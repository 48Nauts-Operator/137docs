{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udcda Auto-Generated Documentation Index","text":"<ul> <li>force_process_hetzner.py</li> <li>check_processing.py</li> <li>fix_hetzner_sender_names.py</li> <li>src/backend/check_documents.py</li> <li>src/backend/version.py</li> <li>src/backend/force_process_hetzner.py</li> <li>src/backend/init_db.py</li> <li>src/backend/check_processing.py</li> <li>src/backend/fix_hetzner_sender_names.py</li> <li>src/backend/create_sample_data.py</li> <li>src/backend/run_tests.py</li> <li>src/backend/fix_tenant_automation.py</li> <li>src/backend/main.py</li> <li>src/backend/app/database.py</li> <li>src/backend/app/rule_engine.py</li> <li>src/backend/app/config.py</li> <li>src/backend/app/analytics.py</li> <li>src/backend/app/version.py</li> <li>src/backend/app/scheduler.py</li> <li>src/backend/app/llm.py</li> <li>src/backend/app/models.py</li> <li>src/backend/app/ocr.py</li> <li>src/backend/app/vector_store.py</li> <li>src/backend/app/auth.py</li> <li>src/backend/app/repository.py</li> <li>src/backend/app/api.py</li> <li>src/backend/app/embeddings.py</li> <li>src/backend/app/colpali_embedder.py</li> <li>src/backend/app/notifications.py</li> <li>src/backend/app/watcher.py</li> <li>src/backend/app/cleanup_vendor_tenants.py</li> <li>src/backend/app/search.py</li> <li>src/backend/app/calendar_export.py</li> <li>src/backend/app/main.py</li> <li>src/backend/app/api/llm.py</li> <li>src/backend/app/api/endpoints/flight_check.py</li> <li>src/backend/app/agents/tenant_agent.py</li> <li>src/backend/app/services/llm_service.py</li> <li>src/backend/app/services/flight_check_service.py</li> <li>src/backend/app/services/entity.py</li> <li>src/backend/app/services/onboarding.py</li> <li>src/backend/tests/conftest.py</li> <li>src/backend/alembic/env.py</li> <li>src/backend/alembic/versions/20250530_add_processing_rules_table.py</li> <li>src/backend/alembic/versions/2025_05_24_add_disabled_col.py</li> <li>src/backend/alembic/versions/2025_05_23_add_missing_user_columns.py</li> <li>src/backend/alembic/versions/0001_baseline.py</li> <li>src/backend/alembic/versions/2025_05_21_add_users_table.py</li> <li>src/backend/alembic/versions/2025_05_22_add_settings_table.py</li> <li>src/backend/alembic/versions/2025_05_22_expand_address_book.py</li> <li>src/backend/alembic/versions/20250528_add_tenant_profile_fields.py</li> <li>src/backend/alembic/versions/2025_05_24_add_vectors_table.py</li> <li>src/backend/alembic/versions/2025_05_25_add_entities_tables.py</li> <li>src/backend/alembic/versions/2025_05_25_add_llm_config_table.py</li> <li>tools/autodoc.py</li> </ul>"},{"location":"autodoc_check_processing_py_2025-05-31T15-53-18/","title":"autodoc check processing py 2025 05 31T15 53 18","text":""},{"location":"autodoc_check_processing_py_2025-05-31T15-53-18/#document-processing-status-checker","title":"Document Processing Status Checker","text":""},{"location":"autodoc_check_processing_py_2025-05-31T15-53-18/#overview","title":"Overview","text":"<p>This utility script provides a diagnostic tool for monitoring document processing status in the application database. It queries the database to display documents currently being processed and shows the most recently created documents with their status information.</p>"},{"location":"autodoc_check_processing_py_2025-05-31T15-53-18/#requirements","title":"Requirements","text":"<ul> <li>Python 3.7+</li> <li>SQLAlchemy with async support</li> <li>Access to the application database</li> <li>Application models and database configuration</li> </ul>"},{"location":"autodoc_check_processing_py_2025-05-31T15-53-18/#dependencies","title":"Dependencies","text":"<pre><code>import asyncio\nimport sys\nimport os\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy import select, text\nfrom app.database import engine\nfrom app.models import Document\n</code></pre>"},{"location":"autodoc_check_processing_py_2025-05-31T15-53-18/#functions","title":"Functions","text":""},{"location":"autodoc_check_processing_py_2025-05-31T15-53-18/#check_processing","title":"<code>check_processing()</code>","text":"<p>Description: Asynchronously queries the database to retrieve and display document processing information.</p> <p>Parameters: None</p> <p>Returns: None (prints output to console)</p> <p>Functionality:</p> <ol> <li>Processing Documents Query</li> <li>Retrieves all documents with status 'processing'</li> <li>Displays count and details of processing documents</li> <li> <p>Shows document ID and title for each processing document</p> </li> <li> <p>Recent Documents Query</p> </li> <li>Fetches the 5 most recently created documents</li> <li>Orders results by creation date (descending)</li> <li>Displays ID, title, status, and creation timestamp</li> </ol> <p>Database Operations: - Uses SQLAlchemy ORM for processing status query - Uses raw SQL for recent documents query - Operates within an async database session</p>"},{"location":"autodoc_check_processing_py_2025-05-31T15-53-18/#usage","title":"Usage","text":""},{"location":"autodoc_check_processing_py_2025-05-31T15-53-18/#command-line-execution","title":"Command Line Execution","text":"<pre><code>python check_processing.py\n</code></pre>"},{"location":"autodoc_check_processing_py_2025-05-31T15-53-18/#programmatic-usage","title":"Programmatic Usage","text":"<pre><code>import asyncio\nfrom check_processing import check_processing\n\n# Run the check\nawait check_processing()\n\n# Or from synchronous context\nasyncio.run(check_processing())\n</code></pre>"},{"location":"autodoc_check_processing_py_2025-05-31T15-53-18/#output-format","title":"Output Format","text":""},{"location":"autodoc_check_processing_py_2025-05-31T15-53-18/#processing-documents-section","title":"Processing Documents Section","text":"<pre><code>Documents with processing status: 2\n  - Document Title 1 (ID: 123)\n  - Document Title 2 (ID: 456)\n</code></pre>"},{"location":"autodoc_check_processing_py_2025-05-31T15-53-18/#recent-documents-section","title":"Recent Documents Section","text":"<pre><code>Recent documents:\n  - Latest Document (ID: 789, Status: completed, Created: 2023-10-15 14:30:25)\n  - Previous Document (ID: 456, Status: processing, Created: 2023-10-15 13:45:10)\n  - ...\n</code></pre>"},{"location":"autodoc_check_processing_py_2025-05-31T15-53-18/#database-schema-requirements","title":"Database Schema Requirements","text":"<p>The script expects a <code>documents</code> table with the following columns: - <code>id</code>: Primary key - <code>title</code>: Document title - <code>status</code>: Processing status (e.g., 'processing', 'completed') - <code>created_at</code>: Timestamp of document creation</p>"},{"location":"autodoc_check_processing_py_2025-05-31T15-53-18/#error-handling","title":"Error Handling","text":"<ul> <li>Database connection errors will propagate and terminate the script</li> <li>Assumes proper database configuration in <code>app.database.engine</code></li> <li>Requires valid Document model in <code>app.models</code></li> </ul>"},{"location":"autodoc_check_processing_py_2025-05-31T15-53-18/#configuration","title":"Configuration","text":"<p>The script adds <code>/app</code> to the Python path to ensure proper module imports:</p> <pre><code>sys.path.append('/app')\n</code></pre> <p>Modify this path if your application structure differs.</p>"},{"location":"autodoc_check_processing_py_2025-05-31T15-53-18/#use-cases","title":"Use Cases","text":"<ul> <li>Development: Quick status check during development</li> <li>Debugging: Identify stuck processing jobs</li> <li>Monitoring: Regular health checks of document processing pipeline</li> <li>Operations: Troubleshooting document processing issues</li> </ul>"},{"location":"autodoc_check_processing_py_2025-05-31T15-53-18/#notes","title":"Notes","text":"<ul> <li>Script runs asynchronously and requires an event loop</li> <li>Uses both ORM and raw SQL queries for demonstration purposes</li> <li>Database session is properly managed with async context manager</li> <li>Suitable for containerized environments (Docker)</li> </ul>"},{"location":"autodoc_check_processing_py_2025-06-01T06-13-39/","title":"autodoc check processing py 2025 06 01T06 13 39","text":""},{"location":"autodoc_check_processing_py_2025-06-01T06-13-39/#document-processing-status-checker","title":"Document Processing Status Checker","text":""},{"location":"autodoc_check_processing_py_2025-06-01T06-13-39/#overview","title":"Overview","text":"<p>A diagnostic utility script for monitoring document processing status in an asynchronous database environment. This tool provides real-time insights into document processing workflows by querying and displaying current processing states and recent document activity.</p>"},{"location":"autodoc_check_processing_py_2025-06-01T06-13-39/#purpose","title":"Purpose","text":"<p>This script serves as a monitoring and debugging tool for document management systems, allowing administrators to: - Track documents currently in processing state - Review recent document activity - Diagnose potential processing bottlenecks or stuck documents</p>"},{"location":"autodoc_check_processing_py_2025-06-01T06-13-39/#dependencies","title":"Dependencies","text":""},{"location":"autodoc_check_processing_py_2025-06-01T06-13-39/#required-modules","title":"Required Modules","text":"<ul> <li><code>asyncio</code> - Asynchronous I/O support</li> <li><code>sys</code> - System-specific parameters and functions</li> <li><code>os</code> - Operating system interface utilities</li> <li><code>sqlalchemy.ext.asyncio.AsyncSession</code> - Async database session management</li> <li><code>sqlalchemy.select</code> - SQL SELECT query construction</li> <li><code>sqlalchemy.text</code> - Raw SQL text queries</li> </ul>"},{"location":"autodoc_check_processing_py_2025-06-01T06-13-39/#application-dependencies","title":"Application Dependencies","text":"<ul> <li><code>app.database.engine</code> - Database engine instance</li> <li><code>app.models.Document</code> - Document model class</li> </ul>"},{"location":"autodoc_check_processing_py_2025-06-01T06-13-39/#functions","title":"Functions","text":""},{"location":"autodoc_check_processing_py_2025-06-01T06-13-39/#check_processing","title":"<code>check_processing()</code>","text":"<p>Type: <code>async function</code></p> <p>Purpose: Executes comprehensive document status analysis by querying the database for processing documents and recent activity.</p> <p>Parameters: None</p> <p>Returns: None (outputs results to console)</p> <p>Behavior:</p> <ol> <li>Processing Documents Query</li> <li>Retrieves all documents with <code>status = 'processing'</code></li> <li>Displays count and details of processing documents</li> <li> <p>Shows document ID and title for each processing item</p> </li> <li> <p>Recent Documents Query</p> </li> <li>Executes raw SQL query to fetch 5 most recent documents</li> <li>Orders results by creation timestamp (descending)</li> <li>Displays comprehensive details: ID, title, status, and creation time</li> </ol> <p>Database Operations: - Uses async database sessions for non-blocking operations - Implements proper session management with context managers - Combines ORM queries and raw SQL for flexibility</p>"},{"location":"autodoc_check_processing_py_2025-06-01T06-13-39/#usage","title":"Usage","text":""},{"location":"autodoc_check_processing_py_2025-06-01T06-13-39/#command-line-execution","title":"Command Line Execution","text":"<pre><code>python check_processing.py\n</code></pre>"},{"location":"autodoc_check_processing_py_2025-06-01T06-13-39/#programmatic-usage","title":"Programmatic Usage","text":"<pre><code>import asyncio\nfrom check_processing import check_processing\n\n# Run the status check\nawait check_processing()\n\n# Or run from synchronous context\nasyncio.run(check_processing())\n</code></pre>"},{"location":"autodoc_check_processing_py_2025-06-01T06-13-39/#output-format","title":"Output Format","text":""},{"location":"autodoc_check_processing_py_2025-06-01T06-13-39/#processing-documents-section","title":"Processing Documents Section","text":"<pre><code>Documents with processing status: 3\n  - Document Title 1 (ID: 123)\n  - Document Title 2 (ID: 124)\n  - Document Title 3 (ID: 125)\n</code></pre>"},{"location":"autodoc_check_processing_py_2025-06-01T06-13-39/#recent-documents-section","title":"Recent Documents Section","text":"<pre><code>Recent documents:\n  - Latest Document (ID: 130, Status: completed, Created: 2023-12-07 14:30:25)\n  - Previous Document (ID: 129, Status: processing, Created: 2023-12-07 14:28:10)\n  - Another Document (ID: 128, Status: failed, Created: 2023-12-07 14:25:33)\n</code></pre>"},{"location":"autodoc_check_processing_py_2025-06-01T06-13-39/#configuration-requirements","title":"Configuration Requirements","text":""},{"location":"autodoc_check_processing_py_2025-06-01T06-13-39/#environment-setup","title":"Environment Setup","text":"<ul> <li>Application must be accessible at <code>/app</code> path</li> <li>Database engine must be properly configured in <code>app.database</code></li> <li>Document model must be available in <code>app.models</code></li> </ul>"},{"location":"autodoc_check_processing_py_2025-06-01T06-13-39/#database-requirements","title":"Database Requirements","text":"<ul> <li><code>documents</code> table with required columns:</li> <li><code>id</code> (Primary key)</li> <li><code>title</code> (String)</li> <li><code>status</code> (String)</li> <li><code>created_at</code> (Timestamp)</li> </ul>"},{"location":"autodoc_check_processing_py_2025-06-01T06-13-39/#error-handling","title":"Error Handling","text":"<p>The script relies on SQLAlchemy's built-in error handling and async session management. Common issues may include: - Database connection failures - Missing table or column structures - Import path resolution problems</p>"},{"location":"autodoc_check_processing_py_2025-06-01T06-13-39/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Async Operations: All database operations are asynchronous to prevent blocking</li> <li>Limited Queries: Recent documents query is limited to 5 records for performance</li> <li>Session Management: Proper async session cleanup prevents connection leaks</li> </ul>"},{"location":"autodoc_check_processing_py_2025-06-01T06-13-39/#use-cases","title":"Use Cases","text":"<ul> <li>System Monitoring: Regular checks of document processing pipeline health</li> <li>Debugging: Identifying stuck or failed document processing jobs</li> <li>Auditing: Reviewing recent system activity and document flow</li> <li>Maintenance: Pre/post-deployment verification of document processing status</li> </ul>"},{"location":"autodoc_fix_hetzner_sender_names_py_2025-05-31T15-53-36/","title":"autodoc fix hetzner sender names py 2025 05 31T15 53 36","text":""},{"location":"autodoc_fix_hetzner_sender_names_py_2025-05-31T15-53-36/#hetzner-invoice-sender-name-fix-script","title":"Hetzner Invoice Sender Name Fix Script","text":""},{"location":"autodoc_fix_hetzner_sender_names_py_2025-05-31T15-53-36/#overview","title":"Overview","text":"<p>This script is designed to clean up malformed sender names in Hetzner invoice documents stored in the database. It identifies documents where the sender field contains JSON strings instead of clean company names and converts them to properly formatted sender names.</p>"},{"location":"autodoc_fix_hetzner_sender_names_py_2025-05-31T15-53-36/#purpose","title":"Purpose","text":"<ul> <li>Problem: Some Hetzner invoice documents have sender fields containing JSON data instead of clean company names</li> <li>Solution: Parse JSON data and extract the actual company name, typically \"Hetzner Online GmbH\"</li> <li>Scope: Only processes documents with sender names containing \"Hetzner\" (case-insensitive)</li> </ul>"},{"location":"autodoc_fix_hetzner_sender_names_py_2025-05-31T15-53-36/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.7+</li> <li>Access to the application database via SQLAlchemy async engine</li> <li>Required dependencies:</li> <li><code>asyncio</code></li> <li><code>sqlalchemy</code> (with async support)</li> <li>Application modules: <code>app.database</code>, <code>app.models</code></li> </ul>"},{"location":"autodoc_fix_hetzner_sender_names_py_2025-05-31T15-53-36/#functions","title":"Functions","text":""},{"location":"autodoc_fix_hetzner_sender_names_py_2025-05-31T15-53-36/#extract_sender_namesender_data","title":"<code>extract_sender_name(sender_data)</code>","text":"<p>Extracts a clean company name from potentially malformed sender data.</p> <p>Parameters: - <code>sender_data</code> (str|any): Raw sender data that may contain JSON strings</p> <p>Returns: - <code>str</code>: Clean, formatted sender name</p> <p>Logic: 1. Returns empty string for falsy input 2. For string input that looks like JSON:    - Attempts JSON parsing    - Searches for common name fields: <code>name</code>, <code>company</code>, <code>sender</code>, <code>company_name</code>    - Falls back to first non-empty string value if no standard fields found 3. For non-JSON strings, returns trimmed input 4. For non-string types, converts to string and trims</p>"},{"location":"autodoc_fix_hetzner_sender_names_py_2025-05-31T15-53-36/#fix_hetzner_sender_names","title":"<code>fix_hetzner_sender_names()</code>","text":"<p>Main async function that processes and fixes Hetzner document sender names.</p> <p>Process: 1. Queries database for documents with sender names containing \"hetzner\" 2. Iterates through each document 3. Applies <code>extract_sender_name()</code> to clean the sender field 4. Updates database records where changes are needed 5. Commits all changes in a single transaction 6. Provides detailed console output showing progress</p> <p>Output: - Progress information for each document processed - Summary of total documents fixed - Visual indicators (\u2705 for fixed, \u2713 for already clean)</p>"},{"location":"autodoc_fix_hetzner_sender_names_py_2025-05-31T15-53-36/#usage","title":"Usage","text":""},{"location":"autodoc_fix_hetzner_sender_names_py_2025-05-31T15-53-36/#command-line-execution","title":"Command Line Execution","text":"<pre><code>python3 fix_hetzner_sender_names.py\n</code></pre>"},{"location":"autodoc_fix_hetzner_sender_names_py_2025-05-31T15-53-36/#programmatic-usage","title":"Programmatic Usage","text":"<pre><code>import asyncio\nfrom fix_hetzner_sender_names import fix_hetzner_sender_names\n\n# Run the fix process\nawait fix_hetzner_sender_names()\n</code></pre>"},{"location":"autodoc_fix_hetzner_sender_names_py_2025-05-31T15-53-36/#example-output","title":"Example Output","text":"<pre><code>Found 3 Hetzner documents to check:\n\nDocument ID 123:\n  Original: {\"company\": \"Hetzner Online GmbH\", \"address\": \"...\"}\n  Cleaned:  Hetzner Online GmbH\n  \u2705 Fixed!\n\nDocument ID 124:\n  Original: Hetzner Online GmbH\n  Cleaned:  Hetzner Online GmbH\n  \u2713 Already clean\n\nDocument ID 125:\n  Original: {\"name\": \"Hetzner Online GmbH\"}\n  Cleaned:  Hetzner Online GmbH\n  \u2705 Fixed!\n\n\ud83c\udf89 Successfully fixed 2 Hetzner invoice sender names!\n</code></pre>"},{"location":"autodoc_fix_hetzner_sender_names_py_2025-05-31T15-53-36/#error-handling","title":"Error Handling","text":"<ul> <li>JSON Parse Errors: Gracefully handled with fallback to original string</li> <li>Database Errors: Will propagate up from SQLAlchemy operations</li> <li>Missing Data: Empty or null sender data returns empty string</li> </ul>"},{"location":"autodoc_fix_hetzner_sender_names_py_2025-05-31T15-53-36/#safety-features","title":"Safety Features","text":"<ul> <li>Preview Mode: Shows original vs. cleaned data before making changes</li> <li>Targeted Updates: Only modifies documents that actually need fixing</li> <li>Transaction Safety: All changes committed in a single transaction</li> <li>Selective Processing: Only processes Hetzner-related documents</li> </ul>"},{"location":"autodoc_fix_hetzner_sender_names_py_2025-05-31T15-53-36/#database-impact","title":"Database Impact","text":"<ul> <li>Tables Modified: <code>Document</code> table only</li> <li>Fields Modified: <code>sender</code> field only</li> <li>Query Pattern: Uses ILIKE for case-insensitive Hetzner matching</li> <li>Transaction Model: Single commit for all changes</li> </ul>"},{"location":"autodoc_fix_hetzner_sender_names_py_2025-05-31T15-53-36/#notes","title":"Notes","text":"<ul> <li>Script adds <code>/app</code> to Python path for module imports</li> <li>Designed to be run as a one-time maintenance script</li> <li>Safe to run multiple times (idempotent operation)</li> <li>Provides clear feedback on what changes were made</li> </ul>"},{"location":"autodoc_fix_hetzner_sender_names_py_2025-06-01T06-14-00/","title":"autodoc fix hetzner sender names py 2025 06 01T06 14 00","text":""},{"location":"autodoc_fix_hetzner_sender_names_py_2025-06-01T06-14-00/#hetzner-invoice-sender-name-cleanup-script","title":"Hetzner Invoice Sender Name Cleanup Script","text":""},{"location":"autodoc_fix_hetzner_sender_names_py_2025-06-01T06-14-00/#overview","title":"Overview","text":"<p>This script is designed to clean up and standardize sender names in Hetzner invoices stored in a database. It identifies documents with sender names that contain JSON strings and extracts clean company names from them.</p>"},{"location":"autodoc_fix_hetzner_sender_names_py_2025-06-01T06-14-00/#purpose","title":"Purpose","text":"<p>The script addresses a data quality issue where Hetzner invoice sender names may contain JSON-formatted data instead of clean company names. It processes these entries to extract and store properly formatted sender names like \"Hetzner Online GmbH\".</p>"},{"location":"autodoc_fix_hetzner_sender_names_py_2025-06-01T06-14-00/#dependencies","title":"Dependencies","text":"<ul> <li>Python 3.x</li> <li>SQLAlchemy (async)</li> <li>asyncio</li> <li>json</li> <li>re</li> </ul>"},{"location":"autodoc_fix_hetzner_sender_names_py_2025-06-01T06-14-00/#required-modules","title":"Required Modules","text":"<pre><code>from sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy import select, update\nfrom app.database import async_engine\nfrom app.models import Document\n</code></pre>"},{"location":"autodoc_fix_hetzner_sender_names_py_2025-06-01T06-14-00/#functions","title":"Functions","text":""},{"location":"autodoc_fix_hetzner_sender_names_py_2025-06-01T06-14-00/#extract_sender_namesender_data","title":"<code>extract_sender_name(sender_data)</code>","text":"<p>Extracts a clean company name from sender data that may contain JSON strings.</p> <p>Parameters: - <code>sender_data</code> (str): Raw sender data that may contain JSON or plain text</p> <p>Returns: - <code>str</code>: Clean, extracted sender name</p> <p>Logic: 1. Returns empty string if no data provided 2. For string inputs, checks if data appears to be JSON (starts with <code>{</code> and ends with <code>}</code>) 3. If JSON detected, attempts to parse and extract name from common fields:    - <code>name</code>    - <code>company</code>    - <code>sender</code>    - <code>company_name</code> 4. Falls back to first non-empty string value if standard fields not found 5. Returns original string if JSON parsing fails 6. Strips whitespace from all results</p>"},{"location":"autodoc_fix_hetzner_sender_names_py_2025-06-01T06-14-00/#fix_hetzner_sender_names","title":"<code>fix_hetzner_sender_names()</code>","text":"<p>Main async function that processes all Hetzner documents in the database.</p> <p>Process: 1. Creates database session using <code>async_engine</code> 2. Queries for all documents where sender contains \"hetzner\" (case-insensitive) 3. Processes each document:    - Extracts clean sender name using <code>extract_sender_name()</code>    - Compares original vs. cleaned version    - Updates database if changes are needed    - Provides console output for each document processed 4. Commits changes if any fixes were made 5. Reports summary of operations</p> <p>Output: - Lists all documents found and processed - Shows before/after comparison for each document - Indicates whether each document was fixed or already clean - Provides final summary of total fixes applied</p>"},{"location":"autodoc_fix_hetzner_sender_names_py_2025-06-01T06-14-00/#usage","title":"Usage","text":""},{"location":"autodoc_fix_hetzner_sender_names_py_2025-06-01T06-14-00/#command-line-execution","title":"Command Line Execution","text":"<pre><code>python3 hetzner_sender_cleanup.py\n</code></pre>"},{"location":"autodoc_fix_hetzner_sender_names_py_2025-06-01T06-14-00/#example-output","title":"Example Output","text":"<pre><code>Found 5 Hetzner documents to check:\n\nDocument ID 123:\n  Original: {\"company\": \"Hetzner Online GmbH\", \"address\": \"...\"}\n  Cleaned:  Hetzner Online GmbH\n  \u2705 Fixed!\n\nDocument ID 124:\n  Original: Hetzner Online GmbH\n  Cleaned:  Hetzner Online GmbH\n  \u2713 Already clean\n\n\ud83c\udf89 Successfully fixed 1 Hetzner invoice sender names!\n</code></pre>"},{"location":"autodoc_fix_hetzner_sender_names_py_2025-06-01T06-14-00/#configuration","title":"Configuration","text":"<p>The script includes a hardcoded path addition to <code>sys.path</code>:</p> <pre><code>sys.path.insert(0, '/app')\n</code></pre> <p>This allows import of application modules. Modify this path as needed for your environment.</p>"},{"location":"autodoc_fix_hetzner_sender_names_py_2025-06-01T06-14-00/#database-requirements","title":"Database Requirements","text":"<ul> <li>The script expects a <code>Document</code> model with the following fields:</li> <li><code>id</code>: Document identifier</li> <li><code>sender</code>: Sender name field (string)</li> <li>Database connection is handled through <code>async_engine</code> from <code>app.database</code></li> </ul>"},{"location":"autodoc_fix_hetzner_sender_names_py_2025-06-01T06-14-00/#error-handling","title":"Error Handling","text":"<ul> <li>JSON parsing errors are caught and handled gracefully</li> <li>Malformed JSON data falls back to original string</li> <li>Database operations use async context managers for proper session handling</li> </ul>"},{"location":"autodoc_fix_hetzner_sender_names_py_2025-06-01T06-14-00/#safety-features","title":"Safety Features","text":"<ul> <li>Read-first approach: Script queries and analyzes before making changes</li> <li>Detailed logging: Shows exactly what changes will be made</li> <li>Conditional updates: Only modifies records that actually need changes</li> <li>Transaction safety: Uses database transactions with commit only after successful processing</li> </ul>"},{"location":"autodoc_fix_hetzner_sender_names_py_2025-06-01T06-14-00/#notes","title":"Notes","text":"<ul> <li>The script is specifically designed for Hetzner invoices but the <code>extract_sender_name()</code> function is generic enough to handle various JSON formats</li> <li>All database operations are asynchronous for better performance</li> <li>The script provides comprehensive console output for monitoring and debugging</li> </ul>"},{"location":"autodoc_force_process_hetzner_py_2025-05-31T15-52-55/","title":"autodoc force process hetzner py 2025 05 31T15 52 55","text":""},{"location":"autodoc_force_process_hetzner_py_2025-05-31T15-52-55/#hetzner-invoice-force-processing-script","title":"Hetzner Invoice Force Processing Script","text":""},{"location":"autodoc_force_process_hetzner_py_2025-05-31T15-52-55/#overview","title":"Overview","text":"<p>This script provides a manual processing mechanism for Hetzner invoices, bypassing normal duplicate detection and directly adding documents to the processing queue. It is designed to run within a containerized environment and processes PDF invoice files from a designated inbox directory.</p>"},{"location":"autodoc_force_process_hetzner_py_2025-05-31T15-52-55/#purpose","title":"Purpose","text":"<ul> <li>Manual Override: Bypasses automated duplicate detection mechanisms</li> <li>Batch Processing: Processes multiple Hetzner invoice files in sequence</li> <li>Direct Queue Addition: Adds invoices directly to the processing pipeline</li> <li>Error Handling: Provides detailed feedback on processing success/failure</li> </ul>"},{"location":"autodoc_force_process_hetzner_py_2025-05-31T15-52-55/#requirements","title":"Requirements","text":"<ul> <li>Python 3.7+</li> <li>Access to <code>/app</code> directory (backend modules)</li> <li>Access to <code>/hostfs/Inbox</code> directory (invoice files)</li> <li>Required dependencies from the main application</li> </ul>"},{"location":"autodoc_force_process_hetzner_py_2025-05-31T15-52-55/#usage","title":"Usage","text":""},{"location":"autodoc_force_process_hetzner_py_2025-05-31T15-52-55/#command-line-execution","title":"Command Line Execution","text":"<pre><code>python3 force_process_hetzner_invoices.py\n</code></pre>"},{"location":"autodoc_force_process_hetzner_py_2025-05-31T15-52-55/#container-execution","title":"Container Execution","text":"<pre><code># Execute within the application container\n./force_process_hetzner_invoices.py\n</code></pre>"},{"location":"autodoc_force_process_hetzner_py_2025-05-31T15-52-55/#configuration","title":"Configuration","text":""},{"location":"autodoc_force_process_hetzner_py_2025-05-31T15-52-55/#file-paths","title":"File Paths","text":"Path Description Configurable <code>/app</code> Backend application directory No <code>/hostfs/Inbox</code> Invoice file inbox directory No"},{"location":"autodoc_force_process_hetzner_py_2025-05-31T15-52-55/#file-pattern-matching","title":"File Pattern Matching","text":"<p>The script searches for files matching the pattern: <code>*Hetzner*.pdf</code></p>"},{"location":"autodoc_force_process_hetzner_py_2025-05-31T15-52-55/#functions","title":"Functions","text":""},{"location":"autodoc_force_process_hetzner_py_2025-05-31T15-52-55/#force_process_hetzner_invoices","title":"<code>force_process_hetzner_invoices()</code>","text":"<p>Type: <code>async function</code></p> <p>Description: Main processing function that discovers and processes all Hetzner invoice files in the inbox directory.</p> <p>Parameters: None</p> <p>Returns: None</p> <p>Behavior: 1. Scans the inbox directory for Hetzner invoice files 2. Lists all discovered files 3. Processes each file sequentially 4. Provides progress feedback and error reporting</p> <p>Error Handling: Catches and reports processing errors for individual files while continuing with remaining files.</p>"},{"location":"autodoc_force_process_hetzner_py_2025-05-31T15-52-55/#output-format","title":"Output Format","text":""},{"location":"autodoc_force_process_hetzner_py_2025-05-31T15-52-55/#discovery-phase","title":"Discovery Phase","text":"<pre><code>Found 3 Hetzner invoice files:\n  - Hetzner_Invoice_2023_001.pdf\n  - Hetzner_Invoice_2023_002.pdf\n  - Hetzner_Invoice_2023_003.pdf\n</code></pre>"},{"location":"autodoc_force_process_hetzner_py_2025-05-31T15-52-55/#processing-phase","title":"Processing Phase","text":"<pre><code>Starting manual processing of Hetzner invoices...\n\nProcessing 1/3: Hetzner_Invoice_2023_001.pdf\n\u2705 Successfully processed: Hetzner_Invoice_2023_001.pdf\n\nProcessing 2/3: Hetzner_Invoice_2023_002.pdf\n\u274c Error processing Hetzner_Invoice_2023_002.pdf: [Error message]\n</code></pre>"},{"location":"autodoc_force_process_hetzner_py_2025-05-31T15-52-55/#completion-summary","title":"Completion Summary","text":"<pre><code>Completed processing 3 Hetzner invoices.\n</code></pre>"},{"location":"autodoc_force_process_hetzner_py_2025-05-31T15-52-55/#error-handling","title":"Error Handling","text":"<ul> <li>File Not Found: Reports when no Hetzner invoice files are found</li> <li>Processing Errors: Catches and displays individual file processing errors</li> <li>Path Errors: Handles issues with directory access or file permissions</li> </ul>"},{"location":"autodoc_force_process_hetzner_py_2025-05-31T15-52-55/#dependencies","title":"Dependencies","text":""},{"location":"autodoc_force_process_hetzner_py_2025-05-31T15-52-55/#internal-modules","title":"Internal Modules","text":"<pre><code>from app.main import process_new_document\n</code></pre>"},{"location":"autodoc_force_process_hetzner_py_2025-05-31T15-52-55/#standard-library","title":"Standard Library","text":"<ul> <li><code>asyncio</code> - Asynchronous execution</li> <li><code>sys</code> - System-specific parameters and functions</li> <li><code>os</code> - Operating system interface</li> <li><code>glob</code> - Unix-style pathname pattern expansion</li> </ul>"},{"location":"autodoc_force_process_hetzner_py_2025-05-31T15-52-55/#security-considerations","title":"Security Considerations","text":"<ul> <li>Script requires file system access to inbox directory</li> <li>Bypasses normal duplicate detection safeguards</li> <li>Should be used with caution in production environments</li> <li>Requires appropriate container permissions</li> </ul>"},{"location":"autodoc_force_process_hetzner_py_2025-05-31T15-52-55/#limitations","title":"Limitations","text":"<ul> <li>Only processes PDF files</li> <li>Fixed file pattern matching (<code>*Hetzner*.pdf</code>)</li> <li>Sequential processing (no parallel execution)</li> <li>Container-specific file paths</li> </ul>"},{"location":"autodoc_force_process_hetzner_py_2025-05-31T15-52-55/#troubleshooting","title":"Troubleshooting","text":""},{"location":"autodoc_force_process_hetzner_py_2025-05-31T15-52-55/#common-issues","title":"Common Issues","text":"Issue Cause Solution No files found Incorrect file naming or location Verify files match <code>*Hetzner*.pdf</code> pattern in <code>/hostfs/Inbox</code> Import errors Missing backend modules Ensure <code>/app</code> directory is accessible and contains required modules Processing failures Invalid PDF or processing logic errors Check individual file integrity and processing logs"},{"location":"autodoc_force_process_hetzner_py_2025-05-31T15-52-55/#exit-codes","title":"Exit Codes","text":"<ul> <li>0: Successful execution (may include individual file processing errors)</li> <li>Non-zero: Script-level failure (import errors, critical exceptions)</li> </ul>"},{"location":"autodoc_force_process_hetzner_py_2025-05-31T15-52-55/#maintenance","title":"Maintenance","text":"<ul> <li>Monitor processing logs for recurring errors</li> <li>Verify file path accessibility in container environment</li> <li>Update file pattern matching if invoice naming conventions change</li> </ul>"},{"location":"autodoc_force_process_hetzner_py_2025-06-01T06-13-16/","title":"autodoc force process hetzner py 2025 06 01T06 13 16","text":""},{"location":"autodoc_force_process_hetzner_py_2025-06-01T06-13-16/#hetzner-invoice-force-processing-script","title":"Hetzner Invoice Force Processing Script","text":""},{"location":"autodoc_force_process_hetzner_py_2025-06-01T06-13-16/#overview","title":"Overview","text":"<p>This script provides a manual method to force process Hetzner invoices by bypassing duplicate detection mechanisms and directly adding them to the processing queue. It's designed to run within a containerized environment and processes PDF invoice files from a designated inbox folder.</p>"},{"location":"autodoc_force_process_hetzner_py_2025-06-01T06-13-16/#purpose","title":"Purpose","text":"<ul> <li>Manual Processing: Forces processing of Hetzner invoices without normal validation checks</li> <li>Duplicate Bypass: Circumvents duplicate detection to reprocess previously handled invoices</li> <li>Batch Operation: Processes all matching Hetzner invoice files in a single execution</li> </ul>"},{"location":"autodoc_force_process_hetzner_py_2025-06-01T06-13-16/#usage","title":"Usage","text":""},{"location":"autodoc_force_process_hetzner_py_2025-06-01T06-13-16/#basic-execution","title":"Basic Execution","text":"<pre><code>python3 force_process_hetzner.py\n</code></pre>"},{"location":"autodoc_force_process_hetzner_py_2025-06-01T06-13-16/#container-environment","title":"Container Environment","text":"<p>This script is designed to run inside a Docker container with the following assumptions: - Application code mounted at <code>/app</code> - Host filesystem accessible at <code>/hostfs</code> - Inbox folder located at <code>/hostfs/Inbox</code></p>"},{"location":"autodoc_force_process_hetzner_py_2025-06-01T06-13-16/#configuration","title":"Configuration","text":""},{"location":"autodoc_force_process_hetzner_py_2025-06-01T06-13-16/#file-paths","title":"File Paths","text":"Path Description <code>/app</code> Application backend directory <code>/hostfs/Inbox</code> Inbox folder containing invoice files"},{"location":"autodoc_force_process_hetzner_py_2025-06-01T06-13-16/#file-pattern-matching","title":"File Pattern Matching","text":"<p>The script searches for files matching the pattern: <code>*Hetzner*.pdf</code></p>"},{"location":"autodoc_force_process_hetzner_py_2025-06-01T06-13-16/#functions","title":"Functions","text":""},{"location":"autodoc_force_process_hetzner_py_2025-06-01T06-13-16/#force_process_hetzner_invoices","title":"<code>force_process_hetzner_invoices()</code>","text":"<p>Type: Async Function Returns: None</p> <p>Orchestrates the complete processing workflow for Hetzner invoices.</p>"},{"location":"autodoc_force_process_hetzner_py_2025-06-01T06-13-16/#workflow","title":"Workflow","text":"<ol> <li>Discovery: Scans inbox folder for Hetzner invoice files</li> <li>Reporting: Lists all found files with count</li> <li>Processing: Iterates through each file and processes individually</li> <li>Error Handling: Continues processing remaining files if individual files fail</li> <li>Summary: Reports completion status</li> </ol>"},{"location":"autodoc_force_process_hetzner_py_2025-06-01T06-13-16/#error-handling","title":"Error Handling","text":"<ul> <li>Individual file processing errors are caught and logged</li> <li>Processing continues for remaining files even if some fail</li> <li>Success/failure status indicated with emoji indicators (\u2705/\u274c)</li> </ul>"},{"location":"autodoc_force_process_hetzner_py_2025-06-01T06-13-16/#dependencies","title":"Dependencies","text":""},{"location":"autodoc_force_process_hetzner_py_2025-06-01T06-13-16/#standard-library","title":"Standard Library","text":"<ul> <li><code>asyncio</code>: Asynchronous execution support</li> <li><code>sys</code>: System path manipulation</li> <li><code>os</code>: Operating system interface</li> <li><code>glob</code>: File pattern matching</li> </ul>"},{"location":"autodoc_force_process_hetzner_py_2025-06-01T06-13-16/#application-modules","title":"Application Modules","text":"<ul> <li><code>app.main.process_new_document</code>: Core document processing function</li> </ul>"},{"location":"autodoc_force_process_hetzner_py_2025-06-01T06-13-16/#output-format","title":"Output Format","text":""},{"location":"autodoc_force_process_hetzner_py_2025-06-01T06-13-16/#discovery-phase","title":"Discovery Phase","text":"<pre><code>Found 3 Hetzner invoice files:\n  - Hetzner_Invoice_2023_001.pdf\n  - Hetzner_Invoice_2023_002.pdf\n  - Hetzner_Invoice_2023_003.pdf\n</code></pre>"},{"location":"autodoc_force_process_hetzner_py_2025-06-01T06-13-16/#processing-phase","title":"Processing Phase","text":"<pre><code>Processing 1/3: Hetzner_Invoice_2023_001.pdf\n\u2705 Successfully processed: Hetzner_Invoice_2023_001.pdf\n\nProcessing 2/3: Hetzner_Invoice_2023_002.pdf\n\u274c Error processing Hetzner_Invoice_2023_002.pdf: Connection timeout\n</code></pre>"},{"location":"autodoc_force_process_hetzner_py_2025-06-01T06-13-16/#completion-summary","title":"Completion Summary","text":"<pre><code>Completed processing 3 Hetzner invoices.\n</code></pre>"},{"location":"autodoc_force_process_hetzner_py_2025-06-01T06-13-16/#requirements","title":"Requirements","text":"<ul> <li>Python 3.7+ (for asyncio support)</li> <li>Access to application backend modules</li> <li>Read access to inbox directory</li> <li>Write access to processing queue</li> </ul>"},{"location":"autodoc_force_process_hetzner_py_2025-06-01T06-13-16/#limitations","title":"Limitations","text":"<ul> <li>Container Specific: Hardcoded paths assume specific container structure</li> <li>PDF Only: Only processes PDF format files</li> <li>Pattern Dependent: Relies on filename containing \"Hetzner\"</li> <li>No Rollback: No mechanism to undo processing operations</li> </ul>"},{"location":"autodoc_force_process_hetzner_py_2025-06-01T06-13-16/#security-considerations","title":"Security Considerations","text":"<ul> <li>Script bypasses normal duplicate detection safeguards</li> <li>Requires filesystem access to host directories</li> <li>Should be used only by authorized personnel</li> <li>Consider logging all forced processing operations for audit purposes</li> </ul>"},{"location":"autodoc_force_process_hetzner_py_2025-06-01T06-13-16/#troubleshooting","title":"Troubleshooting","text":""},{"location":"autodoc_force_process_hetzner_py_2025-06-01T06-13-16/#common-issues","title":"Common Issues","text":"Issue Cause Solution No files found Incorrect inbox path or missing files Verify <code>/hostfs/Inbox</code> exists and contains Hetzner PDFs Import errors Backend path not accessible Ensure <code>/app</code> contains required application modules Permission errors Insufficient file system permissions Check container has read access to inbox directory Processing failures Individual document issues Review error messages for specific file problems"},{"location":"autodoc_src_backend_alembic_env_py_2025-05-31T16-10-56/","title":"autodoc src backend alembic env py 2025 05 31T16 10 56","text":""},{"location":"autodoc_src_backend_alembic_env_py_2025-05-31T16-10-56/#alembic-environment-configuration-async","title":"Alembic Environment Configuration (Async)","text":"<p>This module configures the Alembic migration environment for asynchronous database operations using SQLAlchemy's async engine.</p>"},{"location":"autodoc_src_backend_alembic_env_py_2025-05-31T16-10-56/#overview","title":"Overview","text":"<p>This Alembic environment script enables database migrations in both offline and online modes with support for asynchronous database connections. It automatically configures the database URL and sets up the necessary metadata for migration autogeneration.</p>"},{"location":"autodoc_src_backend_alembic_env_py_2025-05-31T16-10-56/#dependencies","title":"Dependencies","text":"<ul> <li><code>asyncio</code>: For asynchronous operation support</li> <li><code>logging.config</code>: For configuring Python logging</li> <li><code>sqlalchemy</code>: Database toolkit and ORM</li> <li><code>sqlalchemy.ext.asyncio</code>: Async SQLAlchemy support</li> <li><code>alembic</code>: Database migration tool</li> </ul>"},{"location":"autodoc_src_backend_alembic_env_py_2025-05-31T16-10-56/#configuration","title":"Configuration","text":""},{"location":"autodoc_src_backend_alembic_env_py_2025-05-31T16-10-56/#database-url-configuration","title":"Database URL Configuration","text":"<p>The script automatically configures the database URL using the following priority:</p> <ol> <li><code>settings.DATABASE_URL</code> (if available)</li> <li>Fallback: <code>sqlite+aiosqlite:///{settings.DATABASE_PATH}</code></li> </ol>"},{"location":"autodoc_src_backend_alembic_env_py_2025-05-31T16-10-56/#python-path-setup","title":"Python Path Setup","text":"<p>The script ensures the project root is available on <code>PYTHONPATH</code> to enable proper module imports:</p> <pre><code>sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))\n</code></pre>"},{"location":"autodoc_src_backend_alembic_env_py_2025-05-31T16-10-56/#functions","title":"Functions","text":""},{"location":"autodoc_src_backend_alembic_env_py_2025-05-31T16-10-56/#run_migrations_offline-none","title":"<code>run_migrations_offline() -&gt; None</code>","text":"<p>Executes database migrations in offline mode without requiring an active database connection.</p> <p>Features: - Uses literal SQL binds for parameter binding - Configures named parameter style for SQL dialect - Runs migrations within a transaction context</p> <p>Usage: Typically used for generating SQL scripts that can be executed manually.</p>"},{"location":"autodoc_src_backend_alembic_env_py_2025-05-31T16-10-56/#do_run_migrationsconnection","title":"<code>do_run_migrations(connection)</code>","text":"<p>Helper function that configures and executes migrations using an existing database connection.</p> <p>Parameters: - <code>connection</code>: Active database connection object</p> <p>Features: - Configures Alembic context with the provided connection - Executes migrations within a transaction</p>"},{"location":"autodoc_src_backend_alembic_env_py_2025-05-31T16-10-56/#run_migrations_online-none","title":"<code>run_migrations_online() -&gt; None</code>","text":"<p>Executes database migrations in online mode with an active asynchronous database connection.</p> <p>Features: - Creates async engine from configuration - Uses <code>NullPool</code> for connection pooling to avoid connection management issues - Handles async/sync bridge using <code>connection.run_sync()</code></p> <p>Process: 1. Creates an async engine from Alembic configuration 2. Establishes async database connection 3. Executes migrations synchronously within the async context</p>"},{"location":"autodoc_src_backend_alembic_env_py_2025-05-31T16-10-56/#execution-flow","title":"Execution Flow","text":"<p>The script automatically determines the execution mode:</p> <pre><code>if context.is_offline_mode():\n    run_migrations_offline()\nelse:\n    run_migrations_online()\n</code></pre>"},{"location":"autodoc_src_backend_alembic_env_py_2025-05-31T16-10-56/#configuration-objects","title":"Configuration Objects","text":""},{"location":"autodoc_src_backend_alembic_env_py_2025-05-31T16-10-56/#config","title":"<code>config</code>","text":"<p>Alembic configuration object that: - Loads settings from <code>alembic.ini</code> - Sets the SQLAlchemy database URL - Manages migration configuration</p>"},{"location":"autodoc_src_backend_alembic_env_py_2025-05-31T16-10-56/#target_metadata","title":"<code>target_metadata</code>","text":"<p>SQLAlchemy metadata object (<code>Base.metadata</code>) used for: - Autogeneration of migrations - Schema comparison - Model introspection</p>"},{"location":"autodoc_src_backend_alembic_env_py_2025-05-31T16-10-56/#usage-examples","title":"Usage Examples","text":""},{"location":"autodoc_src_backend_alembic_env_py_2025-05-31T16-10-56/#running-migrations","title":"Running Migrations","text":"<pre><code># Online mode (default)\nalembic upgrade head\n\n# Offline mode (generate SQL)\nalembic upgrade head --sql\n</code></pre>"},{"location":"autodoc_src_backend_alembic_env_py_2025-05-31T16-10-56/#generating-migrations","title":"Generating Migrations","text":"<pre><code># Auto-generate migration from model changes\nalembic revision --autogenerate -m \"Description of changes\"\n</code></pre>"},{"location":"autodoc_src_backend_alembic_env_py_2025-05-31T16-10-56/#notes","title":"Notes","text":"<ul> <li>The <code># noqa: E402</code> comments suppress linting warnings for imports after path manipulation</li> <li>Uses <code>NullPool</code> to prevent connection pool issues in migration context</li> <li>Supports both SQLite (via aiosqlite) and other async database drivers</li> <li>Logging configuration is loaded from the Alembic INI file</li> </ul>"},{"location":"autodoc_src_backend_alembic_env_py_2025-05-31T16-10-56/#error-handling","title":"Error Handling","text":"<p>The script relies on Alembic's built-in error handling mechanisms. Ensure that: - Database connection settings are properly configured - Required database drivers are installed - Model imports are accessible from the configured path</p>"},{"location":"autodoc_src_backend_alembic_env_py_2025-06-01T06-31-22/","title":"autodoc src backend alembic env py 2025 06 01T06 31 22","text":""},{"location":"autodoc_src_backend_alembic_env_py_2025-06-01T06-31-22/#alembic-environment-configuration-async","title":"Alembic Environment Configuration (Async)","text":"<p>This module configures the Alembic environment for running database migrations with asynchronous SQLAlchemy support.</p>"},{"location":"autodoc_src_backend_alembic_env_py_2025-06-01T06-31-22/#overview","title":"Overview","text":"<p>This is an Alembic environment configuration file that enables database schema migrations for applications using async SQLAlchemy. It supports both offline and online migration modes and automatically configures the database connection using application settings.</p>"},{"location":"autodoc_src_backend_alembic_env_py_2025-06-01T06-31-22/#dependencies","title":"Dependencies","text":"<ul> <li><code>asyncio</code>: For asynchronous operation support</li> <li><code>logging.config</code>: For configuring Python logging</li> <li><code>sqlalchemy</code>: Database toolkit and ORM</li> <li><code>sqlalchemy.ext.asyncio</code>: Async SQLAlchemy extensions</li> <li><code>alembic</code>: Database migration tool</li> </ul>"},{"location":"autodoc_src_backend_alembic_env_py_2025-06-01T06-31-22/#configuration","title":"Configuration","text":""},{"location":"autodoc_src_backend_alembic_env_py_2025-06-01T06-31-22/#database-connection","title":"Database Connection","text":"<p>The module automatically configures the database connection using: - <code>settings.DATABASE_URL</code> (primary) - Full database connection URL - <code>settings.DATABASE_PATH</code> (fallback) - Path for SQLite database with aiosqlite driver</p>"},{"location":"autodoc_src_backend_alembic_env_py_2025-06-01T06-31-22/#path-configuration","title":"Path Configuration","text":"<pre><code>sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))\n</code></pre> <p>Ensures the project root directory is available for importing application modules.</p>"},{"location":"autodoc_src_backend_alembic_env_py_2025-06-01T06-31-22/#functions","title":"Functions","text":""},{"location":"autodoc_src_backend_alembic_env_py_2025-06-01T06-31-22/#run_migrations_offline","title":"<code>run_migrations_offline()</code>","text":"<p>Executes database migrations in offline mode without requiring an active database connection.</p> <p>Parameters: None</p> <p>Returns: <code>None</code></p> <p>Usage: - Generates SQL migration scripts without executing them - Uses literal binds and named parameter style - Suitable for generating migration SQL for manual execution</p> <p>Configuration: - <code>literal_binds=True</code>: Renders bound parameters as literal values - <code>dialect_opts={\"paramstyle\": \"named\"}</code>: Uses named parameter style</p>"},{"location":"autodoc_src_backend_alembic_env_py_2025-06-01T06-31-22/#do_run_migrationsconnection","title":"<code>do_run_migrations(connection)</code>","text":"<p>Helper function that executes migrations using a provided database connection.</p> <p>Parameters: - <code>connection</code>: Active database connection object</p> <p>Returns: <code>None</code></p> <p>Purpose: - Configures Alembic context with the provided connection - Executes migrations within a transaction context</p>"},{"location":"autodoc_src_backend_alembic_env_py_2025-06-01T06-31-22/#run_migrations_online","title":"<code>run_migrations_online()</code>","text":"<p>Executes database migrations in online mode with an active database connection.</p> <p>Parameters: None</p> <p>Returns: <code>None</code></p> <p>Features: - Creates async SQLAlchemy engine from configuration - Uses <code>NullPool</code> for connection pooling (recommended for migrations) - Runs migrations asynchronously using <code>asyncio.run()</code></p> <p>Implementation Details: <pre><code>async def run_async_migrations():\n    async with connectable.connect() as connection:\n        await connection.run_sync(do_run_migrations)\n</code></pre></p>"},{"location":"autodoc_src_backend_alembic_env_py_2025-06-01T06-31-22/#execution-flow","title":"Execution Flow","text":"<p>The module automatically determines the execution mode:</p> <pre><code>if context.is_offline_mode():\n    run_migrations_offline()\nelse:\n    run_migrations_online()\n</code></pre> <ul> <li>Offline Mode: Generates SQL without database connection</li> <li>Online Mode: Connects to database and executes migrations directly</li> </ul>"},{"location":"autodoc_src_backend_alembic_env_py_2025-06-01T06-31-22/#configuration-objects","title":"Configuration Objects","text":""},{"location":"autodoc_src_backend_alembic_env_py_2025-06-01T06-31-22/#config","title":"<code>config</code>","text":"<ul> <li>Alembic configuration object</li> <li>Automatically sets SQLAlchemy URL from application settings</li> <li>Configures logging from INI file</li> </ul>"},{"location":"autodoc_src_backend_alembic_env_py_2025-06-01T06-31-22/#target_metadata","title":"<code>target_metadata</code>","text":"<ul> <li>References <code>Base.metadata</code> from application models</li> <li>Used by Alembic for autogenerate functionality</li> <li>Enables automatic detection of model changes</li> </ul>"},{"location":"autodoc_src_backend_alembic_env_py_2025-06-01T06-31-22/#usage","title":"Usage","text":"<p>This file is typically executed by Alembic commands:</p> <pre><code># Run migrations online (default)\nalembic upgrade head\n\n# Generate migration offline\nalembic upgrade head --sql\n\n# Create new migration\nalembic revision --autogenerate -m \"description\"\n</code></pre>"},{"location":"autodoc_src_backend_alembic_env_py_2025-06-01T06-31-22/#notes","title":"Notes","text":"<ul> <li>The <code># noqa: E402</code> comments suppress linting warnings for imports after path modification</li> <li>Uses <code>NullPool</code> to avoid connection pool issues during migrations</li> <li>Supports both SQLite (with aiosqlite) and other async database drivers</li> <li>Maintains compatibility with standard Alembic workflow while adding async support</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_0001_baseline_py_2025-05-31T16-12-10/","title":"autodoc src backend alembic versions 0001 baseline py 2025 05 31T16 12 10","text":""},{"location":"autodoc_src_backend_alembic_versions_0001_baseline_py_2025-05-31T16-12-10/#database-migration-baseline-revision","title":"Database Migration: Baseline Revision","text":""},{"location":"autodoc_src_backend_alembic_versions_0001_baseline_py_2025-05-31T16-12-10/#overview","title":"Overview","text":"<p>This Alembic migration file establishes a baseline revision for an existing database schema. It serves as the initial migration point that allows Alembic to begin tracking schema changes without modifying the current database structure.</p>"},{"location":"autodoc_src_backend_alembic_versions_0001_baseline_py_2025-05-31T16-12-10/#migration-details","title":"Migration Details","text":"Property Value Revision ID <code>0001_baseline</code> Previous Revision None (Initial migration) Created 2025-05-19 12:00:00.000000 Branch Labels None Dependencies None"},{"location":"autodoc_src_backend_alembic_versions_0001_baseline_py_2025-05-31T16-12-10/#purpose","title":"Purpose","text":"<p>This baseline migration is designed for scenarios where:</p> <ul> <li>A database schema already exists and is managed by SQLAlchemy's <code>metadata.create_all()</code> method</li> <li>You need to introduce Alembic migration tracking to an existing project</li> <li>The current schema should remain unchanged while enabling future migrations</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_0001_baseline_py_2025-05-31T16-12-10/#functions","title":"Functions","text":""},{"location":"autodoc_src_backend_alembic_versions_0001_baseline_py_2025-05-31T16-12-10/#upgrade","title":"<code>upgrade()</code>","text":"<pre><code>def upgrade():\n    pass\n</code></pre> <p>Description: The upgrade function is intentionally empty as this migration does not perform any schema modifications. The existing schema is assumed to be already in place and correctly configured.</p> <p>Behavior: No database operations are performed during upgrade.</p>"},{"location":"autodoc_src_backend_alembic_versions_0001_baseline_py_2025-05-31T16-12-10/#downgrade","title":"<code>downgrade()</code>","text":"<pre><code>def downgrade():\n    pass\n</code></pre> <p>Description: The downgrade function is empty and cannot be executed meaningfully, as this represents the initial state of the migration system.</p> <p>Behavior: No database operations are performed during downgrade. This migration is considered irreversible.</p>"},{"location":"autodoc_src_backend_alembic_versions_0001_baseline_py_2025-05-31T16-12-10/#usage","title":"Usage","text":""},{"location":"autodoc_src_backend_alembic_versions_0001_baseline_py_2025-05-31T16-12-10/#applying-the-migration","title":"Applying the Migration","text":"<p>To apply this baseline migration:</p> <pre><code>alembic upgrade head\n</code></pre>"},{"location":"autodoc_src_backend_alembic_versions_0001_baseline_py_2025-05-31T16-12-10/#migration-status","title":"Migration Status","text":"<p>After applying, check the migration status:</p> <pre><code>alembic current\n</code></pre> <p>Expected output: <pre><code>0001_baseline (head)\n</code></pre></p>"},{"location":"autodoc_src_backend_alembic_versions_0001_baseline_py_2025-05-31T16-12-10/#important-notes","title":"Important Notes","text":"<p>\u26a0\ufe0f Critical Considerations:</p> <ol> <li>Existing Schema Required: This migration assumes your database schema already exists and matches your SQLAlchemy models</li> <li>No Schema Changes: Neither upgrade nor downgrade operations modify the database structure</li> <li>Irreversible: This baseline cannot be meaningfully downgraded as it represents the initial migration state</li> <li>Future Migrations: All subsequent migrations will build upon this baseline</li> </ol>"},{"location":"autodoc_src_backend_alembic_versions_0001_baseline_py_2025-05-31T16-12-10/#integration-with-existing-systems","title":"Integration with Existing Systems","text":"<p>This migration pattern is commonly used when:</p> <ul> <li>Transitioning from manual schema management to Alembic</li> <li>The application currently uses <code>db.create_all()</code> or similar methods for schema creation</li> <li>You need to maintain backward compatibility with existing deployment processes</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_0001_baseline_py_2025-05-31T16-12-10/#next-steps","title":"Next Steps","text":"<p>After applying this baseline migration:</p> <ol> <li>Ensure your current database schema matches your SQLAlchemy models</li> <li>Generate new migrations for future schema changes using:    <pre><code>alembic revision --autogenerate -m \"description of changes\"\n</code></pre></li> <li>Test the migration system with a small, non-critical schema change</li> </ol>"},{"location":"autodoc_src_backend_alembic_versions_0001_baseline_py_2025-05-31T16-12-10/#related-files","title":"Related Files","text":"<ul> <li>Alembic configuration: <code>alembic.ini</code></li> <li>Migration environment: <code>env.py</code></li> <li>SQLAlchemy models: Check your application's model definitions</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_0001_baseline_py_2025-06-01T06-32-33/","title":"autodoc src backend alembic versions 0001 baseline py 2025 06 01T06 32 33","text":""},{"location":"autodoc_src_backend_alembic_versions_0001_baseline_py_2025-06-01T06-32-33/#database-migration-baseline-revision","title":"Database Migration: Baseline Revision","text":""},{"location":"autodoc_src_backend_alembic_versions_0001_baseline_py_2025-06-01T06-32-33/#overview","title":"Overview","text":"<p>This document describes the baseline database migration file <code>0001_baseline</code> for establishing Alembic version control on an existing database schema.</p>"},{"location":"autodoc_src_backend_alembic_versions_0001_baseline_py_2025-06-01T06-32-33/#migration-details","title":"Migration Details","text":"Property Value Revision ID <code>0001_baseline</code> Down Revision <code>None</code> (Initial migration) Branch Labels <code>None</code> Dependencies <code>None</code> Created 2025-05-19 12:00:00.000000"},{"location":"autodoc_src_backend_alembic_versions_0001_baseline_py_2025-06-01T06-32-33/#purpose","title":"Purpose","text":"<p>This migration serves as a baseline revision for an existing database schema. It allows Alembic to begin tracking database changes without modifying the current database structure.</p>"},{"location":"autodoc_src_backend_alembic_versions_0001_baseline_py_2025-06-01T06-32-33/#key-characteristics","title":"Key Characteristics","text":"<ul> <li>Non-destructive: Does not alter existing database structure</li> <li>Tracking initialization: Establishes version control starting point</li> <li>Schema preservation: Maintains existing SQLAlchemy-managed schema</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_0001_baseline_py_2025-06-01T06-32-33/#migration-functions","title":"Migration Functions","text":""},{"location":"autodoc_src_backend_alembic_versions_0001_baseline_py_2025-06-01T06-32-33/#upgrade","title":"<code>upgrade()</code>","text":"<pre><code>def upgrade():\n    # Schema already managed via SQLAlchemy metadata create_all at startup.\n    # This baseline allows Alembic to start tracking without altering the DB.\n    pass\n</code></pre> <p>Behavior: No-operation (pass-through)</p> <p>Purpose:  - Registers the current schema state with Alembic - Allows future migrations to build upon this baseline - Prevents conflicts with existing SQLAlchemy metadata management</p>"},{"location":"autodoc_src_backend_alembic_versions_0001_baseline_py_2025-06-01T06-32-33/#downgrade","title":"<code>downgrade()</code>","text":"<pre><code>def downgrade():\n    # Irreversible baseline \u2013 no downgrade available.\n    pass\n</code></pre> <p>Behavior: No-operation (pass-through)</p> <p>Purpose:  - Indicates this is an irreversible baseline migration - Prevents accidental rollback attempts that could corrupt the schema</p>"},{"location":"autodoc_src_backend_alembic_versions_0001_baseline_py_2025-06-01T06-32-33/#usage-context","title":"Usage Context","text":"<p>This migration is typically used when:</p> <ol> <li>Introducing Alembic to an existing project with an established database</li> <li>Transitioning from manual schema management to version-controlled migrations</li> <li>Establishing a known good state before implementing new schema changes</li> </ol>"},{"location":"autodoc_src_backend_alembic_versions_0001_baseline_py_2025-06-01T06-32-33/#implementation-notes","title":"Implementation Notes","text":""},{"location":"autodoc_src_backend_alembic_versions_0001_baseline_py_2025-06-01T06-32-33/#prerequisites","title":"Prerequisites","text":"<ul> <li>Database schema must already exist and be stable</li> <li>SQLAlchemy models should be in sync with the current database structure</li> <li>Alembic must be properly configured for the target database</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_0001_baseline_py_2025-06-01T06-32-33/#post-migration","title":"Post-Migration","text":"<ul> <li>Future schema changes should be implemented through new Alembic migrations</li> <li>The baseline revision will serve as the foundation for all subsequent migrations</li> <li>Database versioning will be tracked from this point forward</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_0001_baseline_py_2025-06-01T06-32-33/#important-considerations","title":"Important Considerations","text":"<p>\u26a0\ufe0f Warning: This baseline migration assumes the existing database schema matches the current SQLAlchemy model definitions.</p> <p>\u2705 Best Practice: Verify schema consistency before applying this migration.</p> <p>\ud83d\udd12 Irreversible: This migration cannot be downgraded as it represents the initial state.</p>"},{"location":"autodoc_src_backend_alembic_versions_0001_baseline_py_2025-06-01T06-32-33/#dependencies","title":"Dependencies","text":"<ul> <li><code>alembic</code>: Database migration framework</li> <li><code>sqlalchemy</code>: SQL toolkit and ORM</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_0001_baseline_py_2025-06-01T06-32-33/#related-files","title":"Related Files","text":"<p>This migration should be accompanied by: - Alembic configuration (<code>alembic.ini</code>) - Migration environment setup (<code>env.py</code>) - Current SQLAlchemy model definitions</p>"},{"location":"autodoc_src_backend_alembic_versions_20250528_add_tenant_profile_fields_py_2025-05-31T16-13-11/","title":"autodoc src backend alembic versions 20250528 add tenant profile fields py 2025 05 31T16 13 11","text":""},{"location":"autodoc_src_backend_alembic_versions_20250528_add_tenant_profile_fields_py_2025-05-31T16-13-11/#database-migration-add-tenant-profile-fields-to-entity-model","title":"Database Migration: Add Tenant Profile Fields to Entity Model","text":""},{"location":"autodoc_src_backend_alembic_versions_20250528_add_tenant_profile_fields_py_2025-05-31T16-13-11/#overview","title":"Overview","text":"<p>This Alembic migration adds tenant profile fields to the Entity model, enhancing the system's ability to store detailed tenant information including address components and operational status.</p> <p>Migration ID: <code>20250528_tenant_profile</code> Parent Migration: <code>20250525_llm_config</code> Created: May 28, 2025</p>"},{"location":"autodoc_src_backend_alembic_versions_20250528_add_tenant_profile_fields_py_2025-05-31T16-13-11/#changes-summary","title":"Changes Summary","text":"<p>This migration introduces comprehensive tenant profiling capabilities by adding new fields to both the <code>entities</code> and <code>user_entities</code> tables.</p>"},{"location":"autodoc_src_backend_alembic_versions_20250528_add_tenant_profile_fields_py_2025-05-31T16-13-11/#tables-modified","title":"Tables Modified","text":"<ul> <li><code>entities</code> - Enhanced with profile and address fields</li> <li><code>user_entities</code> - Added default entity designation capability</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_20250528_add_tenant_profile_fields_py_2025-05-31T16-13-11/#schema-changes","title":"Schema Changes","text":""},{"location":"autodoc_src_backend_alembic_versions_20250528_add_tenant_profile_fields_py_2025-05-31T16-13-11/#entities-table","title":"Entities Table","text":"<p>The following columns are added to the <code>entities</code> table:</p> Column Type Length Nullable Default Description <code>alias</code> String 100 No 'Default' Display name or alias for the entity <code>street</code> String 255 Yes NULL Street address <code>house_number</code> String 20 Yes NULL House or building number <code>apartment</code> String 50 Yes NULL Apartment, suite, or unit number <code>area_code</code> String 20 Yes NULL Postal or area code <code>county</code> String 100 Yes NULL County or administrative region <code>country</code> String 100 Yes NULL Country name <code>is_active</code> Boolean - Yes true Entity activation status <code>updated_at</code> DateTime - Yes CURRENT_TIMESTAMP Last modification timestamp"},{"location":"autodoc_src_backend_alembic_versions_20250528_add_tenant_profile_fields_py_2025-05-31T16-13-11/#user-entities-table","title":"User Entities Table","text":"<p>The following column is added to the <code>user_entities</code> table:</p> Column Type Nullable Default Description <code>is_default</code> Boolean Yes false Indicates if this is the user's default entity"},{"location":"autodoc_src_backend_alembic_versions_20250528_add_tenant_profile_fields_py_2025-05-31T16-13-11/#migration-functions","title":"Migration Functions","text":""},{"location":"autodoc_src_backend_alembic_versions_20250528_add_tenant_profile_fields_py_2025-05-31T16-13-11/#upgrade","title":"upgrade()","text":"<p>Executes the forward migration by:</p> <ol> <li>Entities Table Enhancement</li> <li>Adds tenant identification field (<code>alias</code>)</li> <li>Adds comprehensive address fields (<code>street</code>, <code>house_number</code>, <code>apartment</code>, <code>area_code</code>, <code>county</code>, <code>country</code>)</li> <li> <p>Adds operational status tracking (<code>is_active</code>, <code>updated_at</code>)</p> </li> <li> <p>User Entities Relationship Enhancement</p> </li> <li>Adds default entity designation capability (<code>is_default</code>)</li> </ol>"},{"location":"autodoc_src_backend_alembic_versions_20250528_add_tenant_profile_fields_py_2025-05-31T16-13-11/#downgrade","title":"downgrade()","text":"<p>Executes the reverse migration by:</p> <ol> <li>Removing the <code>is_default</code> column from <code>user_entities</code> table</li> <li>Removing all newly added columns from <code>entities</code> table in reverse order</li> </ol>"},{"location":"autodoc_src_backend_alembic_versions_20250528_add_tenant_profile_fields_py_2025-05-31T16-13-11/#usage-implications","title":"Usage Implications","text":""},{"location":"autodoc_src_backend_alembic_versions_20250528_add_tenant_profile_fields_py_2025-05-31T16-13-11/#business-logic-impact","title":"Business Logic Impact","text":"<ul> <li>Tenant Management: Enables comprehensive tenant profiling with detailed address information</li> <li>Multi-tenancy: Support for tenant aliases and activation status</li> <li>User Experience: Default entity selection for improved user workflows</li> <li>Data Integrity: Automatic timestamp tracking for entity modifications</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_20250528_add_tenant_profile_fields_py_2025-05-31T16-13-11/#application-code-considerations","title":"Application Code Considerations","text":"<p>After applying this migration, application code should:</p> <ul> <li>Update Entity model definitions to include new fields</li> <li>Implement tenant address management features</li> <li>Handle default entity selection logic</li> <li>Consider validation rules for address components</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_20250528_add_tenant_profile_fields_py_2025-05-31T16-13-11/#rollback-considerations","title":"Rollback Considerations","text":"<ul> <li>Data Loss Warning: Rolling back this migration will permanently delete all data stored in the new columns</li> <li>Application Compatibility: Ensure application code can handle the absence of these fields before rollback</li> <li>Foreign Key Dependencies: Verify no dependent features rely on the new fields before downgrading</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_20250528_add_tenant_profile_fields_py_2025-05-31T16-13-11/#dependencies","title":"Dependencies","text":"<ul> <li>Requires: Migration <code>20250525_llm_config</code></li> <li>SQLAlchemy: Compatible with batch operations for table alterations</li> <li>Database: Supports boolean data types and datetime functions</li> </ul> <p>This migration is part of the tenant profiling enhancement initiative and should be thoroughly tested in staging environments before production deployment.</p>"},{"location":"autodoc_src_backend_alembic_versions_20250528_add_tenant_profile_fields_py_2025-06-01T06-33-33/","title":"autodoc src backend alembic versions 20250528 add tenant profile fields py 2025 06 01T06 33 33","text":""},{"location":"autodoc_src_backend_alembic_versions_20250528_add_tenant_profile_fields_py_2025-06-01T06-33-33/#database-migration-add-tenant-profile-fields-to-entity-model","title":"Database Migration: Add Tenant Profile Fields to Entity Model","text":""},{"location":"autodoc_src_backend_alembic_versions_20250528_add_tenant_profile_fields_py_2025-06-01T06-33-33/#overview","title":"Overview","text":"<p>This Alembic database migration adds tenant profile fields to the Entity model, enhancing the system's ability to store detailed tenant information including address components and metadata.</p>"},{"location":"autodoc_src_backend_alembic_versions_20250528_add_tenant_profile_fields_py_2025-06-01T06-33-33/#migration-details","title":"Migration Details","text":"Property Value Revision ID <code>20250528_tenant_profile</code> Revises <code>20250525_llm_config</code> Created 2025-05-28 Type Schema Enhancement"},{"location":"autodoc_src_backend_alembic_versions_20250528_add_tenant_profile_fields_py_2025-06-01T06-33-33/#changes-summary","title":"Changes Summary","text":"<p>This migration enhances two existing tables by adding new columns to support comprehensive tenant profiling:</p>"},{"location":"autodoc_src_backend_alembic_versions_20250528_add_tenant_profile_fields_py_2025-06-01T06-33-33/#entities-table-modifications","title":"<code>entities</code> Table Modifications","text":"<p>The following columns are added to the <code>entities</code> table:</p> Column Name Data Type Constraints Default Value Purpose <code>alias</code> VARCHAR(100) NOT NULL 'Default' Human-readable entity identifier <code>street</code> VARCHAR(255) NULLABLE NULL Street address <code>house_number</code> VARCHAR(20) NULLABLE NULL House/building number <code>apartment</code> VARCHAR(50) NULLABLE NULL Apartment/unit number <code>area_code</code> VARCHAR(20) NULLABLE NULL Postal/ZIP code <code>county</code> VARCHAR(100) NULLABLE NULL County/region <code>country</code> VARCHAR(100) NULLABLE NULL Country <code>is_active</code> BOOLEAN NULLABLE TRUE Entity status flag <code>updated_at</code> DATETIME NULLABLE CURRENT_TIMESTAMP Last modification timestamp"},{"location":"autodoc_src_backend_alembic_versions_20250528_add_tenant_profile_fields_py_2025-06-01T06-33-33/#user_entities-table-modifications","title":"<code>user_entities</code> Table Modifications","text":"Column Name Data Type Constraints Default Value Purpose <code>is_default</code> BOOLEAN NULLABLE FALSE Default entity flag for user"},{"location":"autodoc_src_backend_alembic_versions_20250528_add_tenant_profile_fields_py_2025-06-01T06-33-33/#implementation-details","title":"Implementation Details","text":""},{"location":"autodoc_src_backend_alembic_versions_20250528_add_tenant_profile_fields_py_2025-06-01T06-33-33/#upgrade-function","title":"Upgrade Function","text":"<p>The <code>upgrade()</code> function performs the following operations:</p> <ol> <li>Entities Table Enhancement: Uses batch operations to add nine new columns supporting:</li> <li>Entity identification (<code>alias</code>)</li> <li>Complete address information (<code>street</code>, <code>house_number</code>, <code>apartment</code>, <code>area_code</code>, <code>county</code>, <code>country</code>)</li> <li> <p>Status tracking (<code>is_active</code>, <code>updated_at</code>)</p> </li> <li> <p>User-Entity Relationship Enhancement: Adds the <code>is_default</code> flag to track which entity serves as a user's primary/default entity.</p> </li> </ol>"},{"location":"autodoc_src_backend_alembic_versions_20250528_add_tenant_profile_fields_py_2025-06-01T06-33-33/#downgrade-function","title":"Downgrade Function","text":"<p>The <code>downgrade()</code> function provides complete rollback capability by:</p> <ol> <li>Removing the <code>is_default</code> column from <code>user_entities</code> table</li> <li>Removing all nine added columns from <code>entities</code> table in reverse order</li> </ol>"},{"location":"autodoc_src_backend_alembic_versions_20250528_add_tenant_profile_fields_py_2025-06-01T06-33-33/#usage-impact","title":"Usage Impact","text":""},{"location":"autodoc_src_backend_alembic_versions_20250528_add_tenant_profile_fields_py_2025-06-01T06-33-33/#benefits","title":"Benefits","text":"<ul> <li>Enhanced Address Management: Complete address storage with granular components</li> <li>Improved User Experience: Default entity selection for streamlined workflows  </li> <li>Better Data Organization: Entity aliasing and status tracking</li> <li>Audit Trail: Automatic timestamp tracking for entity modifications</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_20250528_add_tenant_profile_fields_py_2025-06-01T06-33-33/#considerations","title":"Considerations","text":"<ul> <li>Storage Requirements: Additional columns will increase table size</li> <li>Application Updates: Client applications may need updates to utilize new fields</li> <li>Data Validation: Consider implementing application-level validation for address components</li> <li>Migration Time: Large <code>entities</code> tables may require extended migration time</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_20250528_add_tenant_profile_fields_py_2025-06-01T06-33-33/#dependencies","title":"Dependencies","text":"<ul> <li>Previous Migration: <code>20250525_llm_config</code></li> <li>Alembic Version: Compatible with standard Alembic operations</li> <li>Database Engine: Uses SQLAlchemy standard column types for cross-database compatibility</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_20250528_add_tenant_profile_fields_py_2025-06-01T06-33-33/#rollback-instructions","title":"Rollback Instructions","text":"<p>To rollback this migration:</p> <pre><code>alembic downgrade 20250525_llm_config\n</code></pre> <p>\u26a0\ufe0f Warning: Rollback will permanently delete all data stored in the newly added columns.</p>"},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-05-31T16-11-17/","title":"autodoc src backend alembic versions 20250530 add processing rules table py 2025 05 31T16 11 17","text":""},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-05-31T16-11-17/#database-migration-processing-rules-table","title":"Database Migration: Processing Rules Table","text":""},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-05-31T16-11-17/#overview","title":"Overview","text":"<p>This Alembic migration creates the <code>processing_rules</code> table to support document automation functionality. The table stores rules that define conditions and actions for automated document processing workflows.</p>"},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-05-31T16-11-17/#migration-details","title":"Migration Details","text":"<ul> <li>Revision ID: <code>20250530_processing_rules</code></li> <li>Previous Revision: <code>20250529_final_cleanup</code></li> <li>Created: 2025-05-30</li> <li>Type: Schema addition</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-05-31T16-11-17/#table-structure","title":"Table Structure","text":""},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-05-31T16-11-17/#processing_rules","title":"processing_rules","text":"<p>The <code>processing_rules</code> table stores automation rules with the following structure:</p>"},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-05-31T16-11-17/#primary-key","title":"Primary Key","text":"Column Type Description <code>id</code> <code>INTEGER</code> Primary key, auto-incrementing"},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-05-31T16-11-17/#rule-identification","title":"Rule Identification","text":"Column Type Constraints Description <code>name</code> <code>VARCHAR(255)</code> NOT NULL Human-readable rule name <code>description</code> <code>TEXT</code> NULL Optional detailed description of the rule"},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-05-31T16-11-17/#matching-criteria","title":"Matching Criteria","text":"Column Type Constraints Description <code>vendor</code> <code>VARCHAR(255)</code> NULL Vendor name for rule matching <code>preferred_tenant_id</code> <code>INTEGER</code> NULL, FK to <code>entities.id</code> Associated tenant entity"},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-05-31T16-11-17/#rule-logic","title":"Rule Logic","text":"Column Type Constraints Description <code>conditions</code> <code>TEXT</code> NOT NULL JSON string defining rule conditions <code>actions</code> <code>TEXT</code> NOT NULL JSON string defining rule actions"},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-05-31T16-11-17/#rule-management","title":"Rule Management","text":"Column Type Default Description <code>priority</code> <code>INTEGER</code> <code>0</code> Rule execution priority (higher values = higher priority) <code>enabled</code> <code>BOOLEAN</code> <code>TRUE</code> Whether the rule is active"},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-05-31T16-11-17/#usage-statistics","title":"Usage Statistics","text":"Column Type Default Description <code>matches_count</code> <code>INTEGER</code> <code>0</code> Number of times this rule has been matched <code>last_matched_at</code> <code>DATETIME</code> NULL Timestamp of most recent rule match"},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-05-31T16-11-17/#timestamps","title":"Timestamps","text":"Column Type Default Description <code>created_at</code> <code>DATETIME</code> <code>NOW()</code> Record creation timestamp <code>updated_at</code> <code>DATETIME</code> <code>NOW()</code> Record last modification timestamp"},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-05-31T16-11-17/#indexes","title":"Indexes","text":"<p>The migration creates the following indexes for query optimization:</p> <ul> <li><code>ix_processing_rules_id</code>: Primary key index</li> <li><code>ix_processing_rules_vendor</code>: Vendor lookup optimization</li> <li><code>ix_processing_rules_priority</code>: Priority-based ordering</li> <li><code>ix_processing_rules_enabled</code>: Active rule filtering</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-05-31T16-11-17/#foreign-key-relationships","title":"Foreign Key Relationships","text":"<ul> <li><code>preferred_tenant_id</code> \u2192 <code>entities.id</code>: Links rules to specific tenant entities</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-05-31T16-11-17/#json-schema","title":"JSON Schema","text":""},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-05-31T16-11-17/#conditions-field","title":"Conditions Field","text":"<p>The <code>conditions</code> field stores JSON data that defines when a rule should be triggered. The exact schema depends on the application's rule engine implementation.</p>"},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-05-31T16-11-17/#actions-field","title":"Actions Field","text":"<p>The <code>actions</code> field stores JSON data that defines what actions to take when the rule conditions are met.</p>"},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-05-31T16-11-17/#usage-examples","title":"Usage Examples","text":""},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-05-31T16-11-17/#applying-the-migration","title":"Applying the Migration","text":"<pre><code>alembic upgrade head\n</code></pre>"},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-05-31T16-11-17/#rolling-back-the-migration","title":"Rolling Back the Migration","text":"<pre><code>alembic downgrade 20250529_final_cleanup\n</code></pre>"},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-05-31T16-11-17/#functions","title":"Functions","text":""},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-05-31T16-11-17/#upgrade","title":"upgrade()","text":"<p>Creates the <code>processing_rules</code> table with all specified columns, constraints, and indexes.</p> <p>Operations performed: 1. Creates the <code>processing_rules</code> table with all columns 2. Establishes foreign key relationship to <code>entities</code> table 3. Creates performance optimization indexes</p>"},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-05-31T16-11-17/#downgrade","title":"downgrade()","text":"<p>Removes the <code>processing_rules</code> table and all associated indexes.</p> <p>Operations performed: 1. Drops all indexes in reverse order 2. Drops the <code>processing_rules</code> table</p>"},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-05-31T16-11-17/#notes","title":"Notes","text":"<ul> <li>The <code>conditions</code> and <code>actions</code> fields use <code>TEXT</code> type to store JSON strings</li> <li>Default values are set for management and statistics fields</li> <li>Timestamps use server-side defaults for automatic population</li> <li>The migration maintains referential integrity with the existing <code>entities</code> table</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-05-31T16-11-17/#dependencies","title":"Dependencies","text":"<ul> <li>Requires the <code>entities</code> table to exist (referenced by foreign key)</li> <li>Built on Alembic migration framework</li> <li>Uses SQLAlchemy ORM for database operations</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-06-01T06-31-42/","title":"autodoc src backend alembic versions 20250530 add processing rules table py 2025 06 01T06 31 42","text":""},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-06-01T06-31-42/#database-migration-processing-rules-table","title":"Database Migration: Processing Rules Table","text":""},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-06-01T06-31-42/#overview","title":"Overview","text":"<p>This Alembic migration creates the <code>processing_rules</code> table to support document automation functionality. The table stores configurable rules that can be applied to documents based on various criteria such as vendor information.</p>"},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-06-01T06-31-42/#migration-details","title":"Migration Details","text":"<ul> <li>Revision ID: <code>20250530_processing_rules</code></li> <li>Previous Revision: <code>20250529_final_cleanup</code></li> <li>Created: 2025-05-30</li> <li>Purpose: Add processing rules table for document automation</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-06-01T06-31-42/#table-schema-processing_rules","title":"Table Schema: <code>processing_rules</code>","text":""},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-06-01T06-31-42/#columns","title":"Columns","text":"Column Type Constraints Description <code>id</code> Integer Primary Key Unique identifier for each processing rule <code>name</code> String(255) NOT NULL Human-readable name for the rule <code>description</code> Text NULL Optional detailed description of the rule's purpose <code>vendor</code> String(255) NULL Vendor name for rule matching criteria <code>preferred_tenant_id</code> Integer Foreign Key to <code>entities.id</code> Associated tenant entity <code>conditions</code> Text NOT NULL JSON string defining rule matching conditions <code>actions</code> Text NOT NULL JSON string defining actions to execute when rule matches <code>priority</code> Integer Default: 0 Rule execution priority (higher values = higher priority) <code>enabled</code> Boolean Default: True Whether the rule is active <code>matches_count</code> Integer Default: 0 Number of times this rule has been matched <code>last_matched_at</code> DateTime NULL Timestamp of the most recent rule match <code>created_at</code> DateTime Server Default: <code>now()</code> Record creation timestamp <code>updated_at</code> DateTime Server Default: <code>now()</code> Record last modification timestamp"},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-06-01T06-31-42/#indexes","title":"Indexes","text":"<p>The following indexes are created for optimal query performance:</p> <ul> <li><code>ix_processing_rules_id</code> - Primary key index</li> <li><code>ix_processing_rules_vendor</code> - Vendor lookup optimization</li> <li><code>ix_processing_rules_priority</code> - Priority-based sorting</li> <li><code>ix_processing_rules_enabled</code> - Active rules filtering</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-06-01T06-31-42/#foreign-key-relationships","title":"Foreign Key Relationships","text":"<ul> <li><code>preferred_tenant_id</code> \u2192 <code>entities.id</code>: Links processing rules to tenant entities</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-06-01T06-31-42/#json-field-structure","title":"JSON Field Structure","text":""},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-06-01T06-31-42/#conditions-field","title":"Conditions Field","text":"<p>The <code>conditions</code> column stores JSON data that defines when a rule should be applied. Expected structure: <pre><code>{\n  \"field_matches\": {},\n  \"document_type\": \"string\",\n  \"custom_criteria\": {}\n}\n</code></pre></p>"},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-06-01T06-31-42/#actions-field","title":"Actions Field","text":"<p>The <code>actions</code> column stores JSON data that defines what actions to perform when the rule matches. Expected structure: <pre><code>{\n  \"field_mappings\": {},\n  \"transformations\": [],\n  \"notifications\": []\n}\n</code></pre></p>"},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-06-01T06-31-42/#usage-examples","title":"Usage Examples","text":""},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-06-01T06-31-42/#querying-active-rules-by-priority","title":"Querying Active Rules by Priority","text":"<pre><code>SELECT * FROM processing_rules \nWHERE enabled = true \nORDER BY priority DESC, created_at ASC;\n</code></pre>"},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-06-01T06-31-42/#finding-rules-by-vendor","title":"Finding Rules by Vendor","text":"<pre><code>SELECT * FROM processing_rules \nWHERE vendor = 'Acme Corp' \nAND enabled = true;\n</code></pre>"},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-06-01T06-31-42/#migration-operations","title":"Migration Operations","text":""},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-06-01T06-31-42/#upgrade","title":"Upgrade","text":"<ul> <li>Creates the <code>processing_rules</code> table with all specified columns</li> <li>Establishes foreign key relationship to <code>entities</code> table</li> <li>Creates performance indexes</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-06-01T06-31-42/#downgrade","title":"Downgrade","text":"<ul> <li>Removes all indexes in reverse order</li> <li>Drops the <code>processing_rules</code> table completely</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-06-01T06-31-42/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>The table includes indexes on frequently queried columns (<code>vendor</code>, <code>priority</code>, <code>enabled</code>)</li> <li>JSON fields (<code>conditions</code>, <code>actions</code>) may benefit from database-specific JSON indexing in future migrations</li> <li>Consider partitioning strategies if the table grows to millions of records</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_20250530_add_processing_rules_table_py_2025-06-01T06-31-42/#security-notes","title":"Security Notes","text":"<ul> <li>The <code>conditions</code> and <code>actions</code> JSON fields should be validated before storage</li> <li>Access to processing rules should be restricted based on tenant permissions</li> <li>Rule execution should include proper error handling and logging</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_21_add_users_table_py_2025-05-31T16-12-27/","title":"autodoc src backend alembic versions 2025 05 21 add users table py 2025 05 31T16 12 27","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_21_add_users_table_py_2025-05-31T16-12-27/#database-migration-add-users-table","title":"Database Migration: Add Users Table","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_21_add_users_table_py_2025-05-31T16-12-27/#overview","title":"Overview","text":"<p>This Alembic migration creates a <code>users</code> table to support user authentication and management functionality in the application.</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_21_add_users_table_py_2025-05-31T16-12-27/#migration-details","title":"Migration Details","text":"<ul> <li>Revision ID: <code>2025_05_21_add_users_table</code></li> <li>Previous Revision: <code>0001_baseline</code></li> <li>Created: 2025-05-21 00:00:00.000000</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_21_add_users_table_py_2025-05-31T16-12-27/#table-schema","title":"Table Schema","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_21_add_users_table_py_2025-05-31T16-12-27/#users","title":"<code>users</code>","text":"<p>The users table stores user account information with the following structure:</p> Column Type Constraints Default Description <code>id</code> SERIAL PRIMARY KEY Auto-increment Unique identifier for each user <code>username</code> VARCHAR(50) UNIQUE, NOT NULL - Unique username for login <code>email</code> VARCHAR(100) UNIQUE, NOT NULL - User's email address <code>full_name</code> VARCHAR(100) - - User's display name <code>role</code> VARCHAR(20) NOT NULL 'viewer' User role/permission level <code>hashed_password</code> VARCHAR(255) NOT NULL - Encrypted password hash <code>disabled</code> BOOLEAN - FALSE Account status flag <code>created_at</code> TIMESTAMP - NOW() Account creation timestamp"},{"location":"autodoc_src_backend_alembic_versions_2025_05_21_add_users_table_py_2025-05-31T16-12-27/#migration-functions","title":"Migration Functions","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_21_add_users_table_py_2025-05-31T16-12-27/#upgrade","title":"<code>upgrade()</code>","text":"<p>Creates the <code>users</code> table with the schema defined above.</p> <p>Implementation Notes: - Uses raw SQL with <code>IF NOT EXISTS</code> clause for idempotency - Safe to run multiple times without errors - Creates all necessary constraints and indexes</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_21_add_users_table_py_2025-05-31T16-12-27/#downgrade","title":"<code>downgrade()</code>","text":"<p>Removes the <code>users</code> table from the database.</p> <p>Implementation Notes: - Uses <code>DROP TABLE IF EXISTS</code> for safe removal - Will not error if table doesn't exist</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_21_add_users_table_py_2025-05-31T16-12-27/#usage","title":"Usage","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_21_add_users_table_py_2025-05-31T16-12-27/#apply-migration","title":"Apply Migration","text":"<pre><code>alembic upgrade head\n</code></pre>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_21_add_users_table_py_2025-05-31T16-12-27/#rollback-migration","title":"Rollback Migration","text":"<pre><code>alembic downgrade 0001_baseline\n</code></pre>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_21_add_users_table_py_2025-05-31T16-12-27/#security-considerations","title":"Security Considerations","text":"<ul> <li>The <code>hashed_password</code> field stores encrypted passwords only</li> <li>Email and username fields have unique constraints to prevent duplicates</li> <li>Default role is set to 'viewer' for security (least privilege principle)</li> <li>Accounts can be disabled without deletion via the <code>disabled</code> flag</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_21_add_users_table_py_2025-05-31T16-12-27/#dependencies","title":"Dependencies","text":"<ul> <li>Alembic: Database migration framework</li> <li>SQLAlchemy: Database toolkit and ORM</li> <li>PostgreSQL: Target database (uses SERIAL type and PostgreSQL-specific syntax)</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_21_add_users_table_py_2025-05-31T16-12-27/#related-migrations","title":"Related Migrations","text":"<ul> <li>Previous: <code>0001_baseline</code> - Initial baseline migration</li> <li>Next: TBD - Future migrations will reference this revision ID</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_21_add_users_table_py_2025-06-01T06-32-50/","title":"autodoc src backend alembic versions 2025 05 21 add users table py 2025 06 01T06 32 50","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_21_add_users_table_py_2025-06-01T06-32-50/#database-migration-add-users-table","title":"Database Migration: Add Users Table","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_21_add_users_table_py_2025-06-01T06-32-50/#overview","title":"Overview","text":"<p>This Alembic database migration adds a <code>users</code> table to support user authentication and authorization functionality. The migration uses raw SQL with <code>IF NOT EXISTS</code> clauses to ensure idempotency.</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_21_add_users_table_py_2025-06-01T06-32-50/#migration-details","title":"Migration Details","text":"<ul> <li>Revision ID: <code>2025_05_21_add_users_table</code></li> <li>Parent Revision: <code>0001_baseline</code></li> <li>Created: 2025-05-21 00:00:00.000000</li> <li>Type: Schema addition</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_21_add_users_table_py_2025-06-01T06-32-50/#changes","title":"Changes","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_21_add_users_table_py_2025-06-01T06-32-50/#upgrade-operation","title":"Upgrade Operation","text":"<p>Creates a new <code>users</code> table with the following structure:</p> Column Type Constraints Default Description <code>id</code> <code>SERIAL</code> PRIMARY KEY Auto-increment Unique user identifier <code>username</code> <code>VARCHAR(50)</code> UNIQUE, NOT NULL - User's login name <code>email</code> <code>VARCHAR(100)</code> UNIQUE, NOT NULL - User's email address <code>full_name</code> <code>VARCHAR(100)</code> - - User's display name <code>role</code> <code>VARCHAR(20)</code> NOT NULL <code>'viewer'</code> User's authorization role <code>hashed_password</code> <code>VARCHAR(255)</code> NOT NULL - Encrypted password <code>disabled</code> <code>BOOLEAN</code> - <code>FALSE</code> Account status flag <code>created_at</code> <code>TIMESTAMP WITHOUT TIME ZONE</code> - <code>NOW()</code> Record creation timestamp"},{"location":"autodoc_src_backend_alembic_versions_2025_05_21_add_users_table_py_2025-06-01T06-32-50/#downgrade-operation","title":"Downgrade Operation","text":"<p>Removes the <code>users</code> table completely.</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_21_add_users_table_py_2025-06-01T06-32-50/#key-features","title":"Key Features","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_21_add_users_table_py_2025-06-01T06-32-50/#idempotency","title":"Idempotency","text":"<ul> <li>Uses <code>CREATE TABLE IF NOT EXISTS</code> to prevent errors on repeated runs</li> <li>Uses <code>DROP TABLE IF EXISTS</code> for safe rollback operations</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_21_add_users_table_py_2025-06-01T06-32-50/#security-considerations","title":"Security Considerations","text":"<ul> <li>Passwords are stored in hashed format (<code>hashed_password</code> field)</li> <li>Role-based access control support via <code>role</code> field</li> <li>Account disable functionality via <code>disabled</code> field</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_21_add_users_table_py_2025-06-01T06-32-50/#data-integrity","title":"Data Integrity","text":"<ul> <li>Unique constraints on both <code>username</code> and <code>email</code></li> <li>NOT NULL constraints on critical fields</li> <li>Default role assignment for new users</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_21_add_users_table_py_2025-06-01T06-32-50/#usage","title":"Usage","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_21_add_users_table_py_2025-06-01T06-32-50/#apply-migration","title":"Apply Migration","text":"<pre><code>alembic upgrade head\n</code></pre>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_21_add_users_table_py_2025-06-01T06-32-50/#rollback-migration","title":"Rollback Migration","text":"<pre><code>alembic downgrade 0001_baseline\n</code></pre>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_21_add_users_table_py_2025-06-01T06-32-50/#check-migration-status","title":"Check Migration Status","text":"<pre><code>alembic current\nalembic history\n</code></pre>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_21_add_users_table_py_2025-06-01T06-32-50/#dependencies","title":"Dependencies","text":"<ul> <li>Alembic: Database migration tool</li> <li>SQLAlchemy: SQL toolkit (imported but not directly used)</li> <li>PostgreSQL: Target database (inferred from SERIAL type usage)</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_21_add_users_table_py_2025-06-01T06-32-50/#notes","title":"Notes","text":"<ul> <li>This migration uses raw SQL instead of SQLAlchemy's schema definition methods</li> <li>The <code>role</code> field defaults to <code>'viewer'</code> - ensure your application defines appropriate role values</li> <li>Timestamps are stored without timezone information</li> <li>The migration is designed to be safe for production deployment due to its idempotent nature</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_add_settings_table_py_2025-05-31T16-12-41/","title":"autodoc src backend alembic versions 2025 05 22 add settings table py 2025 05 31T16 12 41","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_add_settings_table_py_2025-05-31T16-12-41/#database-migration-add-settings-table","title":"Database Migration: Add Settings Table","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_add_settings_table_py_2025-05-31T16-12-41/#overview","title":"Overview","text":"<p>This Alembic migration creates a <code>settings</code> table to store application configuration data. The migration is identified by revision <code>2025_05_22_add_settings_table</code> and builds upon the <code>2025_05_22_expand_address_book</code> migration.</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_add_settings_table_py_2025-05-31T16-12-41/#migration-details","title":"Migration Details","text":"Property Value Revision ID <code>2025_05_22_add_settings_table</code> Down Revision <code>2025_05_22_expand_address_book</code> Create Date 2025-05-22 00:00:00.000000 Branch Labels None Dependencies None"},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_add_settings_table_py_2025-05-31T16-12-41/#schema-changes","title":"Schema Changes","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_add_settings_table_py_2025-05-31T16-12-41/#table-settings","title":"Table: <code>settings</code>","text":"<p>This migration creates a new <code>settings</code> table with the following structure:</p> Column Type Constraints Default Description <code>id</code> <code>SERIAL</code> <code>PRIMARY KEY</code> Auto-increment Unique identifier for settings record <code>inbox_path</code> <code>VARCHAR(255)</code> <code>NOT NULL</code> - File system path to inbox directory <code>storage_root</code> <code>VARCHAR(255)</code> <code>NOT NULL</code> - Root directory for application storage <code>locked</code> <code>BOOLEAN</code> - <code>FALSE</code> Flag indicating if settings are locked for editing <code>created_at</code> <code>TIMESTAMP WITHOUT TIME ZONE</code> - <code>NOW()</code> Timestamp when record was created <code>updated_at</code> <code>TIMESTAMP WITHOUT TIME ZONE</code> - <code>NOW()</code> Timestamp when record was last updated"},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_add_settings_table_py_2025-05-31T16-12-41/#functions","title":"Functions","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_add_settings_table_py_2025-05-31T16-12-41/#upgrade","title":"<code>upgrade()</code>","text":"<p>Executes the forward migration by creating the <code>settings</code> table.</p> <p>Behavior: - Creates the <code>settings</code> table using <code>CREATE TABLE IF NOT EXISTS</code> statement - Defines all columns with appropriate data types and constraints - Sets default values for <code>locked</code>, <code>created_at</code>, and <code>updated_at</code> columns</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_add_settings_table_py_2025-05-31T16-12-41/#downgrade","title":"<code>downgrade()</code>","text":"<p>Executes the reverse migration by removing the <code>settings</code> table.</p> <p>Behavior: - Drops the <code>settings</code> table using <code>DROP TABLE IF EXISTS</code> statement - Uses conditional drop to prevent errors if table doesn't exist</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_add_settings_table_py_2025-05-31T16-12-41/#usage-notes","title":"Usage Notes","text":"<ul> <li>The <code>IF NOT EXISTS</code> and <code>IF EXISTS</code> clauses make the migration idempotent</li> <li>The <code>locked</code> field can be used to prevent modification of critical settings</li> <li>Timestamps are stored without timezone information</li> <li>The <code>SERIAL</code> type provides auto-incrementing integer primary keys</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_add_settings_table_py_2025-05-31T16-12-41/#migration-dependencies","title":"Migration Dependencies","text":"<p>Note: There appears to be a discrepancy in the revision comments. The code comments reference depending on <code>2025_05_24_add_vectors_table</code> (May 24), but the actual <code>down_revision</code> is set to <code>2025_05_22_expand_address_book</code> (May 22). Ensure the dependency chain is correct before applying this migration.</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_add_settings_table_py_2025-05-31T16-12-41/#example-usage","title":"Example Usage","text":"<pre><code># Apply migration\nalembic upgrade head\n\n# Rollback migration\nalembic downgrade 2025_05_22_expand_address_book\n</code></pre>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_add_settings_table_py_2025-06-01T06-33-06/","title":"autodoc src backend alembic versions 2025 05 22 add settings table py 2025 06 01T06 33 06","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_add_settings_table_py_2025-06-01T06-33-06/#database-migration-add-settings-table","title":"Database Migration: Add Settings Table","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_add_settings_table_py_2025-06-01T06-33-06/#overview","title":"Overview","text":"<p>This Alembic migration adds a <code>settings</code> table to store application configuration data including file paths and system state information.</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_add_settings_table_py_2025-06-01T06-33-06/#migration-details","title":"Migration Details","text":"<ul> <li>Revision ID: <code>2025_05_22_add_settings_table</code></li> <li>Parent Revision: <code>2025_05_22_expand_address_book</code></li> <li>Creation Date: 2025-05-22 00:00:00.000000</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_add_settings_table_py_2025-06-01T06-33-06/#table-schema","title":"Table Schema","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_add_settings_table_py_2025-06-01T06-33-06/#settings","title":"<code>settings</code>","text":"<p>The migration creates a new table with the following structure:</p> Column Type Constraints Description <code>id</code> SERIAL PRIMARY KEY Auto-incrementing unique identifier <code>inbox_path</code> VARCHAR(255) NOT NULL File system path to the inbox directory <code>storage_root</code> VARCHAR(255) NOT NULL Root directory for file storage <code>locked</code> BOOLEAN DEFAULT FALSE System lock status flag <code>created_at</code> TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW() Record creation timestamp <code>updated_at</code> TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW() Record last update timestamp"},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_add_settings_table_py_2025-06-01T06-33-06/#functions","title":"Functions","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_add_settings_table_py_2025-06-01T06-33-06/#upgrade","title":"<code>upgrade()</code>","text":"<p>Executes the forward migration by creating the <code>settings</code> table with all specified columns, constraints, and default values.</p> <p>SQL Operation: <pre><code>CREATE TABLE IF NOT EXISTS settings (\n    id SERIAL PRIMARY KEY,\n    inbox_path VARCHAR(255) NOT NULL,\n    storage_root VARCHAR(255) NOT NULL,\n    locked BOOLEAN DEFAULT FALSE,\n    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW()\n);\n</code></pre></p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_add_settings_table_py_2025-06-01T06-33-06/#downgrade","title":"<code>downgrade()</code>","text":"<p>Executes the reverse migration by dropping the <code>settings</code> table.</p> <p>SQL Operation: <pre><code>DROP TABLE IF EXISTS settings;\n</code></pre></p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_add_settings_table_py_2025-06-01T06-33-06/#usage","title":"Usage","text":"<p>To apply this migration: <pre><code>alembic upgrade head\n</code></pre></p> <p>To rollback this migration: <pre><code>alembic downgrade 2025_05_22_expand_address_book\n</code></pre></p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_add_settings_table_py_2025-06-01T06-33-06/#notes","title":"Notes","text":"<ul> <li>The migration uses <code>IF NOT EXISTS</code> and <code>IF EXISTS</code> clauses to prevent errors during repeated execution</li> <li>Timestamp columns automatically populate with the current time when records are created</li> <li>The <code>locked</code> field defaults to <code>FALSE</code>, indicating the system is unlocked by default</li> <li>Path fields are limited to 255 characters and cannot be null</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_expand_address_book_py_2025-05-31T16-12-56/","title":"autodoc src backend alembic versions 2025 05 22 expand address book py 2025 05 31T16 12 56","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_expand_address_book_py_2025-05-31T16-12-56/#database-migration-expand-address-book-columns","title":"Database Migration: Expand Address Book Columns","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_expand_address_book_py_2025-05-31T16-12-56/#overview","title":"Overview","text":"<p>This Alembic migration script expands the <code>address_book</code> table with additional columns to support comprehensive address and contact information management.</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_expand_address_book_py_2025-05-31T16-12-56/#migration-details","title":"Migration Details","text":"Property Value Revision ID <code>2025_05_22_expand_address_book</code> Parent Revision <code>2025_05_21_add_users_table</code> Created 2025-05-22 00:00:00.000000 Migration Type Schema Enhancement"},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_expand_address_book_py_2025-05-31T16-12-56/#changes-applied","title":"Changes Applied","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_expand_address_book_py_2025-05-31T16-12-56/#upgrade-operations","title":"Upgrade Operations","text":"<p>The migration adds seven new columns to the existing <code>address_book</code> table:</p> Column Name Data Type Length Nullable Description <code>street</code> String 255 Yes Primary street address <code>address2</code> String 255 Yes Secondary address line (apt, suite, etc.) <code>town</code> String 255 Yes City or town name <code>zip</code> String 20 Yes Postal/ZIP code <code>county</code> String 100 Yes County or administrative region <code>group_name</code> String 100 Yes Contact group classification <code>last_transaction</code> String 50 Yes Most recent transaction reference"},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_expand_address_book_py_2025-05-31T16-12-56/#downgrade-operations","title":"Downgrade Operations","text":"<p>The migration can be reversed by dropping all added columns in reverse order to maintain referential integrity.</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_expand_address_book_py_2025-05-31T16-12-56/#usage","title":"Usage","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_expand_address_book_py_2025-05-31T16-12-56/#applying-the-migration","title":"Applying the Migration","text":"<pre><code># Upgrade to this revision\nalembic upgrade 2025_05_22_expand_address_book\n\n# Or upgrade to latest\nalembic upgrade head\n</code></pre>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_expand_address_book_py_2025-05-31T16-12-56/#rolling-back-the-migration","title":"Rolling Back the Migration","text":"<pre><code># Downgrade to previous revision\nalembic downgrade 2025_05_21_add_users_table\n</code></pre>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_expand_address_book_py_2025-05-31T16-12-56/#implementation-notes","title":"Implementation Notes","text":"<ul> <li>Batch Operations: Uses <code>op.batch_alter_table()</code> for compatibility with SQLite and other databases that require table recreation for schema changes</li> <li>Nullable Columns: All new columns are nullable to accommodate existing records without requiring default values</li> <li>Column Ordering: Downgrade operations drop columns in reverse order of creation</li> <li>Data Preservation: Existing data in the <code>address_book</code> table remains intact</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_expand_address_book_py_2025-05-31T16-12-56/#dependencies","title":"Dependencies","text":"<ul> <li>Alembic: Database migration framework</li> <li>SQLAlchemy: SQL toolkit and ORM</li> <li>Previous Migration: Requires <code>2025_05_21_add_users_table</code> to be applied first</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_expand_address_book_py_2025-05-31T16-12-56/#schema-impact","title":"Schema Impact","text":"<p>This migration enhances the address book functionality by providing fields for: - Complete postal addresses - Contact categorization via groups - Transaction history tracking</p> <p>The expanded schema supports more comprehensive contact management while maintaining backward compatibility through nullable column constraints.</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_expand_address_book_py_2025-06-01T06-33-18/","title":"autodoc src backend alembic versions 2025 05 22 expand address book py 2025 06 01T06 33 18","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_expand_address_book_py_2025-06-01T06-33-18/#database-migration-expand-address-book-columns","title":"Database Migration: Expand Address Book Columns","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_expand_address_book_py_2025-06-01T06-33-18/#overview","title":"Overview","text":"<p>This Alembic migration script expands the <code>address_book</code> table by adding seven new columns to store comprehensive address and contact information.</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_expand_address_book_py_2025-06-01T06-33-18/#migration-details","title":"Migration Details","text":"Property Value Revision ID <code>2025_05_22_expand_address_book</code> Previous Revision <code>2025_05_21_add_users_table</code> Created 2025-05-22 00:00:00.000000 Branch Labels None Dependencies None"},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_expand_address_book_py_2025-06-01T06-33-18/#changes","title":"Changes","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_expand_address_book_py_2025-06-01T06-33-18/#upgrade-operation","title":"Upgrade Operation","text":"<p>The migration adds the following columns to the <code>address_book</code> table:</p> Column Name Data Type Max Length Nullable Description <code>street</code> String 255 Yes Primary street address <code>address2</code> String 255 Yes Secondary address line (apartment, suite, etc.) <code>town</code> String 255 Yes City or town name <code>zip</code> String 20 Yes Postal/ZIP code <code>county</code> String 100 Yes County or administrative region <code>group_name</code> String 100 Yes Contact group classification <code>last_transaction</code> String 50 Yes Most recent transaction identifier"},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_expand_address_book_py_2025-06-01T06-33-18/#downgrade-operation","title":"Downgrade Operation","text":"<p>The migration can be reversed by dropping all seven columns in the reverse order of their creation:</p> <ol> <li><code>last_transaction</code></li> <li><code>group_name</code></li> <li><code>county</code></li> <li><code>zip</code></li> <li><code>town</code></li> <li><code>address2</code></li> <li><code>street</code></li> </ol>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_expand_address_book_py_2025-06-01T06-33-18/#technical-implementation","title":"Technical Implementation","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_expand_address_book_py_2025-06-01T06-33-18/#functions","title":"Functions","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_expand_address_book_py_2025-06-01T06-33-18/#upgrade","title":"<code>upgrade()</code>","text":"<p>Executes the forward migration by adding new columns to the <code>address_book</code> table using Alembic's batch operation context.</p> <p>Behavior: - Uses batch alter table context for database compatibility - Adds columns sequentially with appropriate data types and constraints - All new columns are nullable to prevent issues with existing data</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_expand_address_book_py_2025-06-01T06-33-18/#downgrade","title":"<code>downgrade()</code>","text":"<p>Executes the reverse migration by removing the added columns from the <code>address_book</code> table.</p> <p>Behavior: - Uses batch alter table context for safe column removal - Drops columns in reverse order to avoid dependency issues - Completely removes all data stored in these columns</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_expand_address_book_py_2025-06-01T06-33-18/#usage","title":"Usage","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_expand_address_book_py_2025-06-01T06-33-18/#apply-migration","title":"Apply Migration","text":"<pre><code>alembic upgrade 2025_05_22_expand_address_book\n</code></pre>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_expand_address_book_py_2025-06-01T06-33-18/#revert-migration","title":"Revert Migration","text":"<pre><code>alembic downgrade 2025_05_21_add_users_table\n</code></pre>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_expand_address_book_py_2025-06-01T06-33-18/#notes","title":"Notes","text":"<ul> <li>All new columns are optional (nullable) to maintain compatibility with existing records</li> <li>The migration uses batch operations for better database engine compatibility</li> <li>Column order in downgrade is intentionally reversed to ensure clean removal</li> <li>String length limits are set to accommodate typical address data requirements</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_22_expand_address_book_py_2025-06-01T06-33-18/#dependencies","title":"Dependencies","text":"<ul> <li>alembic: Database migration framework</li> <li>sqlalchemy: SQL toolkit and ORM</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-05-31T16-11-52/","title":"autodoc src backend alembic versions 2025 05 23 add missing user columns py 2025 05 31T16 11 52","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-05-31T16-11-52/#database-migration-user-columns-enhancement","title":"Database Migration: User Columns Enhancement","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-05-31T16-11-52/#overview","title":"Overview","text":"<p>This Alembic migration adds missing <code>full_name</code> and <code>role</code> columns to the <code>users</code> table for installations that were created before version 0.08 of the application.</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-05-31T16-11-52/#migration-details","title":"Migration Details","text":"Property Value Revision ID <code>20250523_user_cols</code> Previous Revision <code>2025_05_22_add_settings_table</code> Created 2025-05-23 00:00:00.000000 Branch Labels None Dependencies None"},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-05-31T16-11-52/#purpose","title":"Purpose","text":"<p>This migration patches older installations where the <code>users</code> table was created before v0.08 and therefore lacks the <code>full_name</code> and <code>role</code> columns that are now required by the authentication logic.</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-05-31T16-11-52/#changes-made","title":"Changes Made","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-05-31T16-11-52/#upgrade-operations","title":"Upgrade Operations","text":"<p>The migration adds two new columns to the <code>users</code> table:</p> <ol> <li><code>full_name</code> </li> <li>Type: <code>VARCHAR(100)</code></li> <li>Nullable: Yes</li> <li> <p>Default: None</p> </li> <li> <p><code>role</code></p> </li> <li>Type: <code>VARCHAR(20)</code></li> <li>Nullable: No</li> <li>Default: <code>'viewer'</code></li> </ol>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-05-31T16-11-52/#implementation-notes","title":"Implementation Notes","text":"<ul> <li>SQLite Compatibility: The migration uses a try/catch approach because SQLite doesn't support <code>IF NOT EXISTS</code> with <code>ADD COLUMN</code> statements</li> <li>Idempotent Design: If columns already exist, the migration will continue without errors</li> <li>Safe Defaults: The <code>role</code> column defaults to <code>'viewer'</code> to ensure existing users maintain access</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-05-31T16-11-52/#database-schema-impact","title":"Database Schema Impact","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-05-31T16-11-52/#before-migration","title":"Before Migration","text":"<pre><code>CREATE TABLE users (\n    -- existing columns without full_name and role\n);\n</code></pre>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-05-31T16-11-52/#after-migration","title":"After Migration","text":"<pre><code>CREATE TABLE users (\n    -- existing columns\n    full_name VARCHAR(100),\n    role VARCHAR(20) NOT NULL DEFAULT 'viewer'\n);\n</code></pre>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-05-31T16-11-52/#rollback-limitations","title":"Rollback Limitations","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-05-31T16-11-52/#downgrade-operations","title":"Downgrade Operations","text":"<p>\u26a0\ufe0f Important: This migration cannot be easily rolled back due to SQLite limitations.</p> <ul> <li>SQLite doesn't support <code>DROP COLUMN</code> operations</li> <li>Rolling back would require recreating the entire table</li> <li>The <code>downgrade()</code> function is intentionally left empty</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-05-31T16-11-52/#running-the-migration","title":"Running the Migration","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-05-31T16-11-52/#apply-migration","title":"Apply Migration","text":"<pre><code>alembic upgrade 20250523_user_cols\n</code></pre>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-05-31T16-11-52/#check-current-version","title":"Check Current Version","text":"<pre><code>alembic current\n</code></pre>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-05-31T16-11-52/#view-migration-history","title":"View Migration History","text":"<pre><code>alembic history\n</code></pre>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-05-31T16-11-52/#compatibility","title":"Compatibility","text":"<ul> <li>Database: SQLite (primary), adaptable to other databases</li> <li>Application Version: Required for v0.08 and later</li> <li>Python: Compatible with Python 3.6+</li> <li>Alembic: Compatible with Alembic 1.0+</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-05-31T16-11-52/#error-handling","title":"Error Handling","text":"<p>The migration includes robust error handling:</p> <ul> <li>Column Exists: If columns already exist, exceptions are caught and ignored</li> <li>Connection Issues: Uses Alembic's connection binding for reliability</li> <li>Transaction Safety: Operations are wrapped in Alembic's transaction context</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-05-31T16-11-52/#testing-recommendations","title":"Testing Recommendations","text":"<p>Before applying to production:</p> <ol> <li>Backup Database: Always backup your database before running migrations</li> <li>Test Environment: Run the migration in a test environment first</li> <li>Verify Schema: Confirm the columns were added correctly</li> <li>Application Testing: Ensure the application works with the new schema</li> </ol>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-05-31T16-11-52/#related-migrations","title":"Related Migrations","text":"<ul> <li>Previous: <code>2025_05_22_add_settings_table</code> - Added settings table</li> <li>Context: Part of the v0.08 authentication system upgrade</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-06-01T06-32-16/","title":"autodoc src backend alembic versions 2025 05 23 add missing user columns py 2025 06 01T06 32 16","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-06-01T06-32-16/#database-migration-add-user-columns","title":"Database Migration: Add User Columns","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-06-01T06-32-16/#overview","title":"Overview","text":"<p>This Alembic migration adds missing <code>full_name</code> and <code>role</code> columns to the <code>users</code> table for installations that were created before version 0.08 of the application.</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-06-01T06-32-16/#migration-details","title":"Migration Details","text":"<ul> <li>Revision ID: <code>20250523_user_cols</code></li> <li>Revises: <code>2025_05_22_expand_address_book</code></li> <li>Create Date: 2025-05-23 00:00:00.000000</li> <li>Purpose: Patch legacy installations missing required user authentication columns</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-06-01T06-32-16/#schema-changes","title":"Schema Changes","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-06-01T06-32-16/#added-columns","title":"Added Columns","text":"Column Name Data Type Constraints Default Value Description <code>full_name</code> <code>VARCHAR(100)</code> None <code>NULL</code> User's complete display name <code>role</code> <code>VARCHAR(20)</code> <code>NOT NULL</code> <code>'viewer'</code> User's permission role in the system"},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-06-01T06-32-16/#functions","title":"Functions","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-06-01T06-32-16/#upgrade","title":"<code>upgrade()</code>","text":"<p>Adds the missing columns to the <code>users</code> table with error handling for existing columns.</p> <p>Behavior: - Attempts to add <code>full_name</code> column as nullable <code>VARCHAR(100)</code> - Attempts to add <code>role</code> column as non-nullable <code>VARCHAR(20)</code> with default value <code>'viewer'</code> - Uses exception handling to gracefully skip columns that already exist - Compatible with SQLite's limitations (no <code>IF NOT EXISTS</code> support for <code>ADD COLUMN</code>)</p> <p>Error Handling: - Catches and ignores exceptions when columns already exist - Safe for running on databases in various states</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-06-01T06-32-16/#downgrade","title":"<code>downgrade()</code>","text":"<p>Currently implements a no-op downgrade due to SQLite limitations.</p> <p>Limitations: - SQLite does not support <code>DROP COLUMN</code> operations - Full downgrade would require recreating the entire table - Left as placeholder for potential future implementation</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-06-01T06-32-16/#database-compatibility","title":"Database Compatibility","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-06-01T06-32-16/#sqlite-considerations","title":"SQLite Considerations","text":"<ul> <li>ADD COLUMN: Supported but without <code>IF NOT EXISTS</code> clause</li> <li>DROP COLUMN: Not supported (affects downgrade implementation)</li> <li>Exception Handling: Used to work around conditional column addition</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-06-01T06-32-16/#usage-notes","title":"Usage Notes","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-06-01T06-32-16/#prerequisites","title":"Prerequisites","text":"<ul> <li>Database must have existing <code>users</code> table</li> <li>Previous migration <code>2025_05_22_expand_address_book</code> must be applied</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-06-01T06-32-16/#post-migration","title":"Post-Migration","text":"<p>After running this migration: - All existing users will have <code>role</code> set to <code>'viewer'</code> by default - All existing users will have <code>full_name</code> set to <code>NULL</code> - New authentication logic requiring these columns will function properly</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-06-01T06-32-16/#safety","title":"Safety","text":"<ul> <li>Idempotent: Safe to run multiple times</li> <li>Non-destructive: Only adds columns, never removes or modifies existing data</li> <li>Backward Compatible: Existing application code will continue to function</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-06-01T06-32-16/#example-usage","title":"Example Usage","text":"<pre><code># Apply migration\nalembic upgrade head\n\n# Check migration status\nalembic current\n\n# View migration history\nalembic history\n</code></pre>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-06-01T06-32-16/#related-migrations","title":"Related Migrations","text":"<ul> <li>Previous: <code>2025_05_22_expand_address_book</code></li> <li>Next: TBD</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_23_add_missing_user_columns_py_2025-06-01T06-32-16/#notes","title":"Notes","text":"<p>This migration specifically addresses installations that were created before the introduction of the enhanced user authentication system in version 0.08. The default role assignment ensures that existing users maintain access while administrators can update roles as needed.</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_disabled_col_py_2025-05-31T16-11-38/","title":"autodoc src backend alembic versions 2025 05 24 add disabled col py 2025 05 31T16 11 38","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_disabled_col_py_2025-05-31T16-11-38/#database-migration-add-disabled-column-to-users","title":"Database Migration: Add Disabled Column to Users","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_disabled_col_py_2025-05-31T16-11-38/#overview","title":"Overview","text":"<p>This Alembic migration adds a <code>disabled</code> column to the <code>users</code> table to support user account status management.</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_disabled_col_py_2025-05-31T16-11-38/#migration-details","title":"Migration Details","text":"<ul> <li>Revision ID: <code>20250524_user_disabled</code></li> <li>Parent Revision: <code>20250523_user_cols</code></li> <li>Created: 2025-05-24 00:00:00.000000</li> <li>Description: Add disabled column to users table</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_disabled_col_py_2025-05-31T16-11-38/#changes","title":"Changes","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_disabled_col_py_2025-05-31T16-11-38/#schema-modifications","title":"Schema Modifications","text":"<p>The migration adds the following column to the <code>users</code> table:</p> Column Type Default Nullable Description <code>disabled</code> <code>BOOLEAN</code> <code>FALSE</code> Yes Indicates whether the user account is disabled"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_disabled_col_py_2025-05-31T16-11-38/#functions","title":"Functions","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_disabled_col_py_2025-05-31T16-11-38/#upgrade","title":"<code>upgrade()</code>","text":"<p>Applies the migration by adding the <code>disabled</code> column to the <code>users</code> table.</p> <p>Behavior: - Executes <code>ALTER TABLE users ADD COLUMN disabled BOOLEAN DEFAULT FALSE;</code> - Uses exception handling to gracefully handle cases where the column already exists - Sets default value to <code>FALSE</code> for all existing users</p> <p>Error Handling: - Catches and ignores exceptions (typically when column already exists) - Does not raise errors for duplicate column scenarios</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_disabled_col_py_2025-05-31T16-11-38/#downgrade","title":"<code>downgrade()</code>","text":"<p>Reverts the migration changes.</p> <p>Behavior: - No-op implementation - does not remove the column - Includes comment explaining SQLite limitations</p> <p>Important Notes: - SQLite does not support <code>DROP COLUMN</code> operations - Column will remain in the database schema after downgrade - Consider manual cleanup if complete rollback is required</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_disabled_col_py_2025-05-31T16-11-38/#usage-example","title":"Usage Example","text":"<pre><code># Apply migration\nalembic upgrade 20250524_user_disabled\n\n# Rollback migration (limited functionality)\nalembic downgrade 20250523_user_cols\n</code></pre>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_disabled_col_py_2025-05-31T16-11-38/#database-compatibility","title":"Database Compatibility","text":"<ul> <li>Primary Support: SQLite</li> <li>Limitations: Downgrade functionality limited by SQLite's lack of <code>DROP COLUMN</code> support</li> <li>Other Databases: Should work with PostgreSQL, MySQL, etc. (downgrade will still be no-op)</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_disabled_col_py_2025-05-31T16-11-38/#post-migration-considerations","title":"Post-Migration Considerations","text":"<ol> <li>Application Code: Update user models and queries to handle the new <code>disabled</code> column</li> <li>Default Behavior: All existing users will have <code>disabled = FALSE</code> after migration</li> <li>Cleanup: Manual intervention required if complete column removal is needed after downgrade</li> </ol>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_disabled_col_py_2025-05-31T16-11-38/#related-migrations","title":"Related Migrations","text":"<ul> <li>Previous: <code>20250523_user_cols</code> - User columns modification</li> <li>Next: (To be determined)</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_disabled_col_py_2025-06-01T06-32-01/","title":"autodoc src backend alembic versions 2025 05 24 add disabled col py 2025 06 01T06 32 01","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_disabled_col_py_2025-06-01T06-32-01/#database-migration-documentation","title":"Database Migration Documentation","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_disabled_col_py_2025-06-01T06-32-01/#migration-add-disabled-column-to-users-table","title":"Migration: Add Disabled Column to Users Table","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_disabled_col_py_2025-06-01T06-32-01/#overview","title":"Overview","text":"<p>This Alembic migration adds a <code>disabled</code> column to the <code>users</code> table to support user account status management.</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_disabled_col_py_2025-06-01T06-32-01/#migration-details","title":"Migration Details","text":"Property Value Revision ID <code>20250524_user_disabled</code> Parent Revision <code>20250523_user_cols</code> Created 2025-05-24 00:00:00.000000 Branch Labels None Dependencies None"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_disabled_col_py_2025-06-01T06-32-01/#changes","title":"Changes","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_disabled_col_py_2025-06-01T06-32-01/#upgrade-operations","title":"Upgrade Operations","text":"<p>The migration performs the following changes when upgrading:</p> <ul> <li>Adds <code>disabled</code> column to the <code>users</code> table</li> <li>Data Type: <code>BOOLEAN</code></li> <li>Default Value: <code>FALSE</code></li> <li>Nullable: Yes (implicit)</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_disabled_col_py_2025-06-01T06-32-01/#sql-executed","title":"SQL Executed","text":"<pre><code>ALTER TABLE users ADD COLUMN disabled BOOLEAN DEFAULT FALSE;\n</code></pre>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_disabled_col_py_2025-06-01T06-32-01/#error-handling","title":"Error Handling","text":"<p>The upgrade operation includes error handling to gracefully manage scenarios where the column may already exist:</p> <ul> <li>If the column addition fails (typically due to the column already existing), the exception is caught and ignored</li> <li>This allows the migration to be run safely multiple times without failing</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_disabled_col_py_2025-06-01T06-32-01/#rollback-limitations","title":"Rollback Limitations","text":"<p>\u26a0\ufe0f Important: This migration has limited rollback capabilities due to SQLite constraints.</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_disabled_col_py_2025-06-01T06-32-01/#downgrade-behavior","title":"Downgrade Behavior","text":"<ul> <li>No operations performed during downgrade</li> <li>The <code>disabled</code> column will remain in the table after rollback</li> <li>This is due to SQLite's lack of support for the <code>DROP COLUMN</code> operation</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_disabled_col_py_2025-06-01T06-32-01/#considerations","title":"Considerations","text":"<ul> <li>If using a different database system (PostgreSQL, MySQL, etc.), consider implementing proper rollback functionality</li> <li>For production environments, ensure you have appropriate backup procedures before applying this migration</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_disabled_col_py_2025-06-01T06-32-01/#usage-impact","title":"Usage Impact","text":"<p>After applying this migration:</p> <ol> <li>All existing users will have <code>disabled = FALSE</code> by default</li> <li>New users will automatically receive <code>disabled = FALSE</code> unless explicitly set otherwise</li> <li>Application code can now check the <code>disabled</code> status to control user access</li> </ol>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_disabled_col_py_2025-06-01T06-32-01/#prerequisites","title":"Prerequisites","text":"<ul> <li>Requires the previous migration <code>20250523_user_cols</code> to be applied</li> <li>Ensure the <code>users</code> table exists before running this migration</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_disabled_col_py_2025-06-01T06-32-01/#testing-recommendations","title":"Testing Recommendations","text":"<ol> <li>Pre-migration: Verify the <code>users</code> table structure</li> <li>Post-migration: Confirm the <code>disabled</code> column exists with correct default values</li> <li>Rollback testing: Understand that the column will persist after downgrade</li> </ol> <p>This migration is part of the user management system enhancement to support account status controls.</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_vectors_table_py_2025-05-31T16-13-31/","title":"autodoc src backend alembic versions 2025 05 24 add vectors table py 2025 05 31T16 13 31","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_vectors_table_py_2025-05-31T16-13-31/#database-migration-colpali-vectors-table","title":"Database Migration: ColPali Vectors Table","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_vectors_table_py_2025-05-31T16-13-31/#overview","title":"Overview","text":"<p>This Alembic migration creates a <code>vectors</code> table to support ColPali patch-id mapping functionality. The table stores vector identifiers associated with document pages for document processing and retrieval operations.</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_vectors_table_py_2025-05-31T16-13-31/#migration-details","title":"Migration Details","text":"<ul> <li>Revision ID: <code>20250524_vectors</code></li> <li>Previous Revision: <code>20250524_user_disabled</code></li> <li>Created: 2025-05-24 12:00:00 UTC</li> <li>Purpose: Create vectors table for ColPali patch-id mapping</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_vectors_table_py_2025-05-31T16-13-31/#database-schema-changes","title":"Database Schema Changes","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_vectors_table_py_2025-05-31T16-13-31/#table-vectors","title":"Table: <code>vectors</code>","text":"<p>Creates a new table to store vector mapping data for document pages.</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_vectors_table_py_2025-05-31T16-13-31/#columns","title":"Columns","text":"Column Type Constraints Description <code>id</code> <code>SERIAL</code> <code>PRIMARY KEY</code> Auto-incrementing unique identifier <code>doc_id</code> <code>INTEGER</code> <code>NOT NULL</code>, <code>FOREIGN KEY</code> References <code>documents(id)</code> with cascade delete <code>page</code> <code>INTEGER</code> <code>NOT NULL</code> Page number within the document <code>vector_ids</code> <code>TEXT</code> <code>NOT NULL</code> Serialized vector identifiers for the page"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_vectors_table_py_2025-05-31T16-13-31/#indexes","title":"Indexes","text":"<ul> <li><code>ix_vectors_doc_id</code>: Index on <code>doc_id</code> column for efficient document-based queries</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_vectors_table_py_2025-05-31T16-13-31/#foreign-key-constraints","title":"Foreign Key Constraints","text":"<ul> <li><code>doc_id</code> \u2192 <code>documents(id)</code> with <code>ON DELETE CASCADE</code></li> <li>When a document is deleted, all associated vector records are automatically removed</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_vectors_table_py_2025-05-31T16-13-31/#migration-functions","title":"Migration Functions","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_vectors_table_py_2025-05-31T16-13-31/#upgrade","title":"<code>upgrade()</code>","text":"<p>Executes the forward migration:</p> <ol> <li>Creates the <code>vectors</code> table with all specified columns and constraints</li> <li>Creates an index on the <code>doc_id</code> column for query optimization</li> <li>Uses <code>IF NOT EXISTS</code> clauses to ensure idempotent execution</li> </ol>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_vectors_table_py_2025-05-31T16-13-31/#downgrade","title":"<code>downgrade()</code>","text":"<p>Executes the rollback migration:</p> <ol> <li>Drops the <code>vectors</code> table completely</li> <li>Uses <code>IF EXISTS</code> clause to prevent errors if table doesn't exist</li> </ol>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_vectors_table_py_2025-05-31T16-13-31/#usage-notes","title":"Usage Notes","text":"<ul> <li>The <code>vector_ids</code> column stores serialized data (likely JSON or comma-separated values)</li> <li>The table supports multiple vector entries per document through the <code>page</code> column</li> <li>Cascade deletion ensures data consistency when documents are removed</li> <li>The migration is designed to be safe for re-execution</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_vectors_table_py_2025-05-31T16-13-31/#dependencies","title":"Dependencies","text":"<ul> <li>Requires <code>alembic</code> for migration execution</li> <li>Requires <code>sqlalchemy</code> for database operations</li> <li>Depends on the existence of a <code>documents</code> table with an <code>id</code> column</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_vectors_table_py_2025-06-01T06-33-53/","title":"autodoc src backend alembic versions 2025 05 24 add vectors table py 2025 06 01T06 33 53","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_vectors_table_py_2025-06-01T06-33-53/#database-migration-vectors-table-creation","title":"Database Migration: Vectors Table Creation","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_vectors_table_py_2025-06-01T06-33-53/#overview","title":"Overview","text":"<p>This Alembic migration creates a <code>vectors</code> table designed to store ColPali patch-id mappings for document processing and vector storage operations.</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_vectors_table_py_2025-06-01T06-33-53/#migration-details","title":"Migration Details","text":"<ul> <li>Revision ID: <code>20250524_vectors</code></li> <li>Previous Revision: <code>20250524_user_disabled</code></li> <li>Created: 2025-05-24 12:00:00</li> <li>Purpose: Create vectors table for ColPali patch-id mapping</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_vectors_table_py_2025-06-01T06-33-53/#schema-changes","title":"Schema Changes","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_vectors_table_py_2025-06-01T06-33-53/#table-creation-vectors","title":"Table Creation: <code>vectors</code>","text":"<p>The migration creates a new table with the following structure:</p> Column Type Constraints Description <code>id</code> SERIAL PRIMARY KEY Auto-incrementing unique identifier <code>doc_id</code> INTEGER NOT NULL, FOREIGN KEY References <code>documents(id)</code> with cascade delete <code>page</code> INTEGER NOT NULL Page number within the document <code>vector_ids</code> TEXT NOT NULL Serialized patch-id mappings for ColPali"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_vectors_table_py_2025-06-01T06-33-53/#indexes","title":"Indexes","text":"<ul> <li><code>ix_vectors_doc_id</code>: Index on <code>doc_id</code> column for optimized document-based queries</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_vectors_table_py_2025-06-01T06-33-53/#foreign-key-relationships","title":"Foreign Key Relationships","text":"<ul> <li><code>doc_id</code> \u2192 <code>documents(id)</code> with <code>ON DELETE CASCADE</code></li> <li>When a document is deleted, all associated vector records are automatically removed</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_vectors_table_py_2025-06-01T06-33-53/#functions","title":"Functions","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_vectors_table_py_2025-06-01T06-33-53/#upgrade","title":"<code>upgrade()</code>","text":"<p>Executes the forward migration:</p> <ol> <li>Creates the <code>vectors</code> table with all specified columns and constraints</li> <li>Creates an index on the <code>doc_id</code> column for query optimization</li> </ol> <p>SQL Operations: - Creates table with SERIAL primary key and foreign key constraint - Adds performance index for document-based lookups</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_vectors_table_py_2025-06-01T06-33-53/#downgrade","title":"<code>downgrade()</code>","text":"<p>Executes the reverse migration:</p> <ol> <li>Drops the <code>vectors</code> table entirely</li> <li>All associated data and indexes are automatically removed</li> </ol> <p>Note: This operation is destructive and will permanently delete all vector mapping data.</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_vectors_table_py_2025-06-01T06-33-53/#usage-context","title":"Usage Context","text":"<p>This table is specifically designed for ColPali (Contextualized Late Interaction via Pairwise Late Interaction) document processing, storing:</p> <ul> <li>Document-to-vector mappings</li> <li>Page-level vector associations</li> <li>Patch-id serialization for efficient retrieval</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_vectors_table_py_2025-06-01T06-33-53/#safety-features","title":"Safety Features","text":"<ul> <li>Uses <code>IF NOT EXISTS</code> and <code>IF EXISTS</code> clauses to prevent errors on repeated execution</li> <li>Implements cascade deletion to maintain referential integrity</li> <li>Includes proper indexing for performance optimization</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_24_add_vectors_table_py_2025-06-01T06-33-53/#dependencies","title":"Dependencies","text":"<ul> <li>Requires the <code>documents</code> table to exist (referenced by foreign key)</li> <li>Depends on previous migration: <code>20250524_user_disabled</code></li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_entities_tables_py_2025-05-31T16-13-44/","title":"autodoc src backend alembic versions 2025 05 25 add entities tables py 2025 05 31T16 13 44","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_entities_tables_py_2025-05-31T16-13-44/#database-migration-add-entities-tables-and-columns","title":"Database Migration: Add Entities Tables and Columns","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_entities_tables_py_2025-05-31T16-13-44/#overview","title":"Overview","text":"<p>This Alembic migration adds entity management functionality to the database schema. It introduces the concept of entities (companies/organizations) and establishes relationships between users, entities, and documents.</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_entities_tables_py_2025-05-31T16-13-44/#migration-details","title":"Migration Details","text":"<ul> <li>Revision ID: <code>20250525_entities</code></li> <li>Previous Revision: <code>20250524_vectors</code></li> <li>Created: 2025-05-25</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_entities_tables_py_2025-05-31T16-13-44/#schema-changes","title":"Schema Changes","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_entities_tables_py_2025-05-31T16-13-44/#new-tables","title":"New Tables","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_entities_tables_py_2025-05-31T16-13-44/#entities","title":"<code>entities</code>","text":"<p>Primary table for storing entity information.</p> Column Type Constraints Description <code>id</code> INTEGER PRIMARY KEY Unique identifier <code>name</code> VARCHAR(255) NOT NULL Entity name <code>type</code> VARCHAR(20) DEFAULT 'company' Entity type classification <code>address_json</code> TEXT NULLABLE JSON-formatted address data <code>vat_id</code> VARCHAR(50) NULLABLE VAT identification number <code>iban</code> VARCHAR(50) NULLABLE International bank account number <code>aliases</code> TEXT[] NULLABLE Array of alternative names (PostgreSQL-specific) <code>created_at</code> DATETIME DEFAULT NOW() Record creation timestamp"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_entities_tables_py_2025-05-31T16-13-44/#user_entities","title":"<code>user_entities</code>","text":"<p>Junction table establishing many-to-many relationships between users and entities.</p> Column Type Constraints Description <code>user_id</code> INTEGER PRIMARY KEY, FOREIGN KEY \u2192 <code>users.id</code> Reference to user <code>entity_id</code> INTEGER PRIMARY KEY, FOREIGN KEY \u2192 <code>entities.id</code> Reference to entity <code>role</code> VARCHAR(20) DEFAULT 'owner' User's role within the entity"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_entities_tables_py_2025-05-31T16-13-44/#modified-tables","title":"Modified Tables","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_entities_tables_py_2025-05-31T16-13-44/#documents","title":"<code>documents</code>","text":"<ul> <li>Added Column: <code>entity_id</code> (INTEGER, NULLABLE)</li> <li>Foreign key reference to <code>entities.id</code></li> <li>Indexed for query performance</li> <li>Establishes relationship between documents and entities</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_entities_tables_py_2025-05-31T16-13-44/#settings","title":"<code>settings</code>","text":"<ul> <li>Added Column: <code>tos_accepted_at</code> (DATETIME, NULLABLE)</li> <li>Timestamp for terms of service acceptance</li> <li>Used for compliance tracking</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_entities_tables_py_2025-05-31T16-13-44/#indexes-and-constraints","title":"Indexes and Constraints","text":"<ul> <li>Index: <code>ix_documents_entity_id</code> on <code>documents.entity_id</code></li> <li>Foreign Key: <code>documents.entity_id</code> \u2192 <code>entities.id</code></li> <li>Foreign Key: <code>user_entities.user_id</code> \u2192 <code>users.id</code></li> <li>Foreign Key: <code>user_entities.entity_id</code> \u2192 <code>entities.id</code></li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_entities_tables_py_2025-05-31T16-13-44/#database-requirements","title":"Database Requirements","text":"<ul> <li>PostgreSQL: Required for <code>ARRAY</code> data type support</li> <li>Alembic: Database migration framework</li> <li>SQLAlchemy: ORM framework</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_entities_tables_py_2025-05-31T16-13-44/#usage","title":"Usage","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_entities_tables_py_2025-05-31T16-13-44/#apply-migration","title":"Apply Migration","text":"<pre><code>alembic upgrade 20250525_entities\n</code></pre>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_entities_tables_py_2025-05-31T16-13-44/#rollback-migration","title":"Rollback Migration","text":"<pre><code>alembic downgrade 20250524_vectors\n</code></pre>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_entities_tables_py_2025-05-31T16-13-44/#rollback-behavior","title":"Rollback Behavior","text":"<p>The downgrade function performs the following operations in reverse order: 1. Removes <code>tos_accepted_at</code> column from <code>settings</code> 2. Drops foreign key constraint on <code>documents.entity_id</code> 3. Removes index on <code>documents.entity_id</code> 4. Drops <code>entity_id</code> column from <code>documents</code> 5. Drops <code>user_entities</code> junction table 6. Drops <code>entities</code> table</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_entities_tables_py_2025-05-31T16-13-44/#notes","title":"Notes","text":"<ul> <li>The <code>aliases</code> column uses PostgreSQL's native array type</li> <li>Entity addresses are stored as JSON text for flexibility</li> <li>The migration maintains referential integrity through foreign key constraints</li> <li>All timestamp fields use server-side defaults for consistency</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_entities_tables_py_2025-06-01T06-34-07/","title":"autodoc src backend alembic versions 2025 05 25 add entities tables py 2025 06 01T06 34 07","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_entities_tables_py_2025-06-01T06-34-07/#database-migration-add-entities-tables-and-columns","title":"Database Migration: Add Entities Tables and Columns","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_entities_tables_py_2025-06-01T06-34-07/#overview","title":"Overview","text":"<p>This Alembic migration script adds entity management functionality to the database schema by creating new tables for entities and user-entity relationships, and adding related columns to existing tables.</p> <p>Migration Details: - Revision ID: <code>20250525_entities</code> - Previous Revision: <code>20250524_vectors</code> - Created: 2025-05-25</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_entities_tables_py_2025-06-01T06-34-07/#schema-changes","title":"Schema Changes","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_entities_tables_py_2025-06-01T06-34-07/#new-tables","title":"New Tables","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_entities_tables_py_2025-06-01T06-34-07/#entities","title":"<code>entities</code>","text":"<p>Stores information about business entities (companies, organizations, etc.).</p> Column Type Constraints Default Description <code>id</code> Integer Primary Key Auto-increment Unique entity identifier <code>name</code> String(255) NOT NULL - Entity name <code>type</code> String(20) - 'company' Entity type classification <code>address_json</code> Text Nullable - JSON-formatted address data <code>vat_id</code> String(50) Nullable - VAT identification number <code>iban</code> String(50) Nullable - International Bank Account Number <code>aliases</code> String[] Nullable - Array of alternative entity names <code>created_at</code> DateTime - <code>now()</code> Record creation timestamp"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_entities_tables_py_2025-06-01T06-34-07/#user_entities","title":"<code>user_entities</code>","text":"<p>Junction table linking users to entities with role-based access.</p> Column Type Constraints Default Description <code>user_id</code> Integer Primary Key, Foreign Key - Reference to users.id <code>entity_id</code> Integer Primary Key, Foreign Key - Reference to entities.id <code>role</code> String(20) - 'owner' User's role for the entity <p>Foreign Key Relationships: - <code>user_id</code> \u2192 <code>users.id</code> - <code>entity_id</code> \u2192 <code>entities.id</code></p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_entities_tables_py_2025-06-01T06-34-07/#modified-tables","title":"Modified Tables","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_entities_tables_py_2025-06-01T06-34-07/#documents","title":"<code>documents</code>","text":"<p>Added Column: - <code>entity_id</code> (Integer, Nullable) - Links documents to entities - Index: <code>ix_documents_entity_id</code> for query optimization - Foreign Key: References <code>entities.id</code></p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_entities_tables_py_2025-06-01T06-34-07/#settings","title":"<code>settings</code>","text":"<p>Added Column: - <code>tos_accepted_at</code> (DateTime, Nullable) - Timestamp of Terms of Service acceptance</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_entities_tables_py_2025-06-01T06-34-07/#database-operations","title":"Database Operations","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_entities_tables_py_2025-06-01T06-34-07/#upgrade-operations","title":"Upgrade Operations","text":"<ol> <li>Create <code>entities</code> table with all specified columns and constraints</li> <li>Create <code>user_entities</code> junction table with composite primary key</li> <li>Add <code>entity_id</code> column to <code>documents</code> table</li> <li>Create index on <code>documents.entity_id</code> for performance</li> <li>Establish foreign key relationship between documents and entities</li> <li>Add <code>tos_accepted_at</code> column to <code>settings</code> table</li> </ol>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_entities_tables_py_2025-06-01T06-34-07/#downgrade-operations","title":"Downgrade Operations","text":"<ol> <li>Remove <code>tos_accepted_at</code> column from <code>settings</code> table</li> <li>Drop foreign key constraint between documents and entities</li> <li>Remove index on <code>documents.entity_id</code></li> <li>Remove <code>entity_id</code> column from <code>documents</code> table</li> <li>Drop <code>user_entities</code> table</li> <li>Drop <code>entities</code> table</li> </ol>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_entities_tables_py_2025-06-01T06-34-07/#usage-notes","title":"Usage Notes","text":"<ul> <li>The migration uses PostgreSQL-specific data types (<code>postgresql.ARRAY</code>)</li> <li>Entity types default to 'company' but can be customized</li> <li>User-entity relationships default to 'owner' role</li> <li>Address data is stored as JSON text for flexibility</li> <li>All timestamp fields use server-side <code>now()</code> function</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_entities_tables_py_2025-06-01T06-34-07/#dependencies","title":"Dependencies","text":"<ul> <li>Python Packages: <code>alembic</code>, <code>sqlalchemy</code></li> <li>Database: PostgreSQL (required for array column type)</li> <li>Previous Migration: <code>20250524_vectors</code></li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_entities_tables_py_2025-06-01T06-34-07/#running-the-migration","title":"Running the Migration","text":"<pre><code># Apply migration\nalembic upgrade head\n\n# Rollback migration\nalembic downgrade 20250524_vectors\n</code></pre>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_llm_config_table_py_2025-05-31T16-14-03/","title":"autodoc src backend alembic versions 2025 05 25 add llm config table py 2025 05 31T16 14 03","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_llm_config_table_py_2025-05-31T16-14-03/#database-migration-llm-configuration-table","title":"Database Migration: LLM Configuration Table","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_llm_config_table_py_2025-05-31T16-14-03/#overview","title":"Overview","text":"<p>This Alembic migration script creates a comprehensive configuration table for Local Language Model (LLM) integration, enabling local-first AI processing capabilities within the application.</p> <p>Migration Details: - Revision ID: <code>20250525_llm_config</code> - Previous Revision: <code>20250525_entities</code> - Created: 2025-05-25 - Purpose: Add LLM configuration management for local-first AI integration</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_llm_config_table_py_2025-05-31T16-14-03/#table-schema-llm_config","title":"Table Schema: <code>llm_config</code>","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_llm_config_table_py_2025-05-31T16-14-03/#primary-key","title":"Primary Key","text":"Column Type Constraints Description <code>id</code> <code>INTEGER</code> Primary Key Unique identifier for configuration records"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_llm_config_table_py_2025-05-31T16-14-03/#provider-configuration","title":"Provider Configuration","text":"Column Type Default Nullable Description <code>provider</code> <code>VARCHAR(50)</code> <code>'local'</code> No LLM service provider (local, openai, anthropic, etc.) <code>api_key</code> <code>VARCHAR(255)</code> None Yes Authentication key for external providers <code>api_url</code> <code>VARCHAR(255)</code> None Yes Custom API endpoint URL"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_llm_config_table_py_2025-05-31T16-14-03/#model-preferences","title":"Model Preferences","text":"<p>Configures specific models for different AI tasks:</p> Column Type Default Nullable Description <code>model_tagger</code> <code>VARCHAR(100)</code> <code>'phi3'</code> No Model for content tagging operations <code>model_enricher</code> <code>VARCHAR(100)</code> <code>'llama3'</code> No Model for content enrichment <code>model_analytics</code> <code>VARCHAR(100)</code> <code>'llama3'</code> No Model for analytics processing <code>model_responder</code> <code>VARCHAR(100)</code> None Yes Model for response generation"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_llm_config_table_py_2025-05-31T16-14-03/#processing-configuration","title":"Processing Configuration","text":"Column Type Default Nullable Description <code>enabled</code> <code>BOOLEAN</code> <code>false</code> No Master switch for LLM processing <code>auto_tagging</code> <code>BOOLEAN</code> <code>true</code> No Enable automatic content tagging <code>auto_enrichment</code> <code>BOOLEAN</code> <code>true</code> No Enable automatic content enrichment <code>external_enrichment</code> <code>BOOLEAN</code> <code>false</code> No Allow external API enrichment"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_llm_config_table_py_2025-05-31T16-14-03/#reliability-settings","title":"Reliability Settings","text":"Column Type Default Nullable Description <code>max_retries</code> <code>INTEGER</code> <code>3</code> No Maximum retry attempts for failed requests <code>retry_delay</code> <code>INTEGER</code> <code>300</code> No Delay between retries (seconds) <code>backup_provider</code> <code>VARCHAR(50)</code> None Yes Fallback provider for reliability <code>backup_model</code> <code>VARCHAR(100)</code> None Yes Fallback model configuration"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_llm_config_table_py_2025-05-31T16-14-03/#performance-settings","title":"Performance Settings","text":"Column Type Default Nullable Description <code>batch_size</code> <code>INTEGER</code> <code>5</code> No Number of items processed per batch <code>concurrent_tasks</code> <code>INTEGER</code> <code>2</code> No Maximum concurrent processing tasks <code>cache_responses</code> <code>BOOLEAN</code> <code>true</code> No Enable response caching for efficiency"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_llm_config_table_py_2025-05-31T16-14-03/#quality-control","title":"Quality Control","text":"Column Type Default Nullable Description <code>min_confidence_tagging</code> <code>FLOAT</code> <code>0.7</code> No Minimum confidence threshold for tagging <code>min_confidence_entity</code> <code>FLOAT</code> <code>0.8</code> No Minimum confidence threshold for entity extraction"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_llm_config_table_py_2025-05-31T16-14-03/#audit-fields","title":"Audit Fields","text":"Column Type Default Nullable Description <code>created_at</code> <code>DATETIME</code> <code>NOW()</code> No Record creation timestamp <code>updated_at</code> <code>DATETIME</code> <code>NOW()</code> No Last modification timestamp"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_llm_config_table_py_2025-05-31T16-14-03/#indexes","title":"Indexes","text":"<ul> <li>Primary Index: <code>ix_llm_config_id</code> on <code>id</code> column for efficient lookups</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_llm_config_table_py_2025-05-31T16-14-03/#migration-functions","title":"Migration Functions","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_llm_config_table_py_2025-05-31T16-14-03/#upgrade","title":"<code>upgrade()</code>","text":"<p>Creates the <code>llm_config</code> table with all specified columns, constraints, and indexes. This function: 1. Creates the table structure with appropriate data types 2. Sets default values for configuration parameters 3. Establishes the primary key index</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_llm_config_table_py_2025-05-31T16-14-03/#downgrade","title":"<code>downgrade()</code>","text":"<p>Rolls back the migration by: 1. Dropping the index <code>ix_llm_config_id</code> 2. Removing the <code>llm_config</code> table entirely</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_llm_config_table_py_2025-05-31T16-14-03/#usage-notes","title":"Usage Notes","text":"<ul> <li>Local-First Design: Default configuration prioritizes local models (<code>phi3</code>, <code>llama3</code>) over external APIs</li> <li>Flexible Provider Support: Supports multiple LLM providers through configurable endpoints</li> <li>Task-Specific Models: Allows different models for different AI tasks (tagging, enrichment, analytics)</li> <li>Performance Tuning: Configurable batch sizes and concurrency limits for optimal resource usage</li> <li>Quality Assurance: Confidence thresholds ensure reliable AI outputs</li> <li>Fault Tolerance: Backup provider and retry mechanisms for robust operation</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_llm_config_table_py_2025-05-31T16-14-03/#dependencies","title":"Dependencies","text":"<p>This migration depends on the <code>20250525_entities</code> revision and should be applied after that migration is complete.</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_llm_config_table_py_2025-06-01T06-34-25/","title":"autodoc src backend alembic versions 2025 05 25 add llm config table py 2025 06 01T06 34 25","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_llm_config_table_py_2025-06-01T06-34-25/#database-migration-llm-configuration-table","title":"Database Migration: LLM Configuration Table","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_llm_config_table_py_2025-06-01T06-34-25/#overview","title":"Overview","text":"<p>This Alembic migration creates the <code>llm_config</code> table to support local-first AI integration capabilities. The table stores configuration settings for Large Language Model (LLM) providers, model preferences, and processing parameters.</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_llm_config_table_py_2025-06-01T06-34-25/#migration-details","title":"Migration Details","text":"<ul> <li>Revision ID: <code>20250525_llm_config</code></li> <li>Parent Revision: <code>20250525_entities</code></li> <li>Created: 2025-05-25</li> <li>Purpose: Add LLM configuration support for local-first AI integration</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_llm_config_table_py_2025-06-01T06-34-25/#table-schema-llm_config","title":"Table Schema: <code>llm_config</code>","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_llm_config_table_py_2025-06-01T06-34-25/#primary-key","title":"Primary Key","text":"Column Type Constraints Description <code>id</code> INTEGER PRIMARY KEY Unique identifier for configuration records"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_llm_config_table_py_2025-06-01T06-34-25/#provider-configuration","title":"Provider Configuration","text":"Column Type Default Nullable Description <code>provider</code> VARCHAR(50) <code>'local'</code> No LLM provider name (local, openai, anthropic, etc.) <code>api_key</code> VARCHAR(255) None Yes API authentication key for external providers <code>api_url</code> VARCHAR(255) None Yes Custom API endpoint URL"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_llm_config_table_py_2025-06-01T06-34-25/#model-preferences","title":"Model Preferences","text":"Column Type Default Nullable Description <code>model_tagger</code> VARCHAR(100) <code>'phi3'</code> No Model used for tagging tasks <code>model_enricher</code> VARCHAR(100) <code>'llama3'</code> No Model used for data enrichment <code>model_analytics</code> VARCHAR(100) <code>'llama3'</code> No Model used for analytics tasks <code>model_responder</code> VARCHAR(100) None Yes Model used for response generation"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_llm_config_table_py_2025-06-01T06-34-25/#processing-configuration","title":"Processing Configuration","text":"Column Type Default Nullable Description <code>enabled</code> BOOLEAN <code>false</code> No Master switch for LLM processing <code>auto_tagging</code> BOOLEAN <code>true</code> No Enable automatic content tagging <code>auto_enrichment</code> BOOLEAN <code>true</code> No Enable automatic data enrichment <code>external_enrichment</code> BOOLEAN <code>false</code> No Allow external API enrichment"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_llm_config_table_py_2025-06-01T06-34-25/#reliability-settings","title":"Reliability Settings","text":"Column Type Default Nullable Description <code>max_retries</code> INTEGER <code>3</code> No Maximum retry attempts for failed requests <code>retry_delay</code> INTEGER <code>300</code> No Delay between retries (seconds) <code>backup_provider</code> VARCHAR(50) None Yes Fallback provider for reliability <code>backup_model</code> VARCHAR(100) None Yes Fallback model name"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_llm_config_table_py_2025-06-01T06-34-25/#performance-settings","title":"Performance Settings","text":"Column Type Default Nullable Description <code>batch_size</code> INTEGER <code>5</code> No Number of items processed per batch <code>concurrent_tasks</code> INTEGER <code>2</code> No Maximum concurrent processing tasks <code>cache_responses</code> BOOLEAN <code>true</code> No Enable response caching"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_llm_config_table_py_2025-06-01T06-34-25/#quality-control","title":"Quality Control","text":"Column Type Default Nullable Description <code>min_confidence_tagging</code> FLOAT <code>0.7</code> No Minimum confidence threshold for tagging <code>min_confidence_entity</code> FLOAT <code>0.8</code> No Minimum confidence threshold for entity extraction"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_llm_config_table_py_2025-06-01T06-34-25/#audit-fields","title":"Audit Fields","text":"Column Type Default Nullable Description <code>created_at</code> DATETIME <code>NOW()</code> No Record creation timestamp <code>updated_at</code> DATETIME <code>NOW()</code> No Last modification timestamp"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_llm_config_table_py_2025-06-01T06-34-25/#indexes","title":"Indexes","text":"<ul> <li>Primary Index: <code>ix_llm_config_id</code> on <code>id</code> column</li> </ul>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_llm_config_table_py_2025-06-01T06-34-25/#migration-functions","title":"Migration Functions","text":""},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_llm_config_table_py_2025-06-01T06-34-25/#upgrade","title":"<code>upgrade()</code>","text":"<p>Creates the <code>llm_config</code> table with all specified columns, constraints, and indexes. This enables LLM configuration management functionality.</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_llm_config_table_py_2025-06-01T06-34-25/#downgrade","title":"<code>downgrade()</code>","text":"<p>Removes the <code>ix_llm_config_id</code> index and drops the <code>llm_config</code> table, reverting all changes made by this migration.</p>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_llm_config_table_py_2025-06-01T06-34-25/#usage-notes","title":"Usage Notes","text":"<ol> <li>Local-First Design: Default configuration prioritizes local models (<code>phi3</code>, <code>llama3</code>) over external APIs</li> <li>Security: API keys should be encrypted at the application layer before storage</li> <li>Performance: Batch processing and concurrency limits help manage resource usage</li> <li>Reliability: Backup provider/model settings ensure fallback capabilities</li> <li>Quality Control: Confidence thresholds filter low-quality AI outputs</li> </ol>"},{"location":"autodoc_src_backend_alembic_versions_2025_05_25_add_llm_config_table_py_2025-06-01T06-34-25/#related-tables","title":"Related Tables","text":"<p>This migration depends on the <code>20250525_entities</code> migration and is part of the AI integration feature set.</p>"},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-05-31T16-08-19/","title":"autodoc src backend app agents tenant agent py 2025 05 31T16 08 19","text":""},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-05-31T16-08-19/#tenant-extraction-and-auto-assignment-agent","title":"Tenant Extraction and Auto-Assignment Agent","text":""},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-05-31T16-08-19/#overview","title":"Overview","text":"<p>The <code>TenantExtractionAgent</code> is a sophisticated document processing agent that automatically analyzes document content to extract recipient/tenant information and assigns documents to appropriate tenant profiles. It combines LLM-powered intelligent extraction with fallback rule-based processing to ensure reliable operation.</p>"},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-05-31T16-08-19/#features","title":"Features","text":"<ul> <li>Intelligent Content Analysis: Uses LLM services for sophisticated tenant information extraction</li> <li>Fallback Processing: Rule-based extraction when LLM services are unavailable</li> <li>Tenant Matching: Fuzzy matching algorithm to find existing tenants</li> <li>Multi-language Support: Handles Swiss German and English documents</li> <li>Confidence Scoring: Provides extraction confidence levels for quality control</li> <li>Safe Operation: Never automatically creates new tenants for security</li> </ul>"},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-05-31T16-08-19/#class-reference","title":"Class Reference","text":""},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-05-31T16-08-19/#tenantextractionagent","title":"TenantExtractionAgent","text":"<p>Main agent class for tenant extraction and document assignment operations.</p>"},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-05-31T16-08-19/#constructor","title":"Constructor","text":"<pre><code>TenantExtractionAgent(db_session: AsyncSession)\n</code></pre> <p>Parameters: - <code>db_session</code> (AsyncSession): Database session for data operations</p> <p>Dependencies: - <code>TenantRepository</code>: For tenant data operations - <code>DocumentRepository</code>: For document data operations - <code>LLMService</code>: For AI-powered content analysis</p>"},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-05-31T16-08-19/#methods","title":"Methods","text":""},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-05-31T16-08-19/#analyze_and_assign_tenant","title":"analyze_and_assign_tenant","text":"<pre><code>async def analyze_and_assign_tenant(\n    document_id: int, \n    user_id: int\n) -&gt; Dict[str, Any]\n</code></pre> <p>Main entry point that analyzes document content and assigns it to appropriate tenant.</p> <p>Parameters: - <code>document_id</code> (int): ID of the document to analyze - <code>user_id</code> (int): ID of the user who owns the document</p> <p>Returns: - <code>Dict[str, Any]</code>: Analysis results with the following structure:</p> <pre><code>{\n    \"status\": str,           # \"success\", \"no_match\", \"error\", \"vendor_rejected\"\n    \"message\": str,          # Human-readable status message\n    \"tenant\": Dict,          # Matched tenant information (if successful)\n    \"extracted_info\": Dict,  # Raw extracted tenant data\n    \"confidence\": float,     # Extraction confidence score (0.0-1.0)\n    \"action\": str           # \"found\", \"created\", or \"updated\"\n}\n</code></pre> <p>Status Values: - <code>\"success\"</code>: Document successfully assigned to tenant - <code>\"no_match\"</code>: No matching tenant found or low confidence extraction - <code>\"error\"</code>: Processing error occurred - <code>\"vendor_rejected\"</code>: Extracted information appears to be vendor/sender data</p>"},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-05-31T16-08-19/#extraction-process","title":"Extraction Process","text":""},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-05-31T16-08-19/#1-document-validation","title":"1. Document Validation","text":"<p>The agent first validates the document and checks if it already has a valid recipient assignment:</p> <pre><code># Skip if document already has a good recipient assignment\nif (document.recipient and \n    document.recipient.strip() and \n    document.recipient not in [\"Your Company\", \"\", \"Unknown\"]):\n    return {\"status\": \"no_match\", \"message\": f\"Document already has recipient: {document.recipient}\"}\n</code></pre>"},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-05-31T16-08-19/#2-llm-powered-extraction","title":"2. LLM-Powered Extraction","text":"<p>When LLM services are available, the agent uses sophisticated AI analysis:</p> <ul> <li>Content Analysis: Processes document content and title</li> <li>Recipient Focus: Specifically extracts recipient information, not sender/vendor data</li> <li>Structured Output: Returns JSON-formatted tenant information</li> <li>Confidence Scoring: Provides reliability metrics</li> </ul>"},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-05-31T16-08-19/#3-fallback-rule-based-extraction","title":"3. Fallback Rule-Based Extraction","text":"<p>When LLM is unavailable, uses pattern matching:</p> <ul> <li>Swiss Legal Patterns: Specialized patterns for Swiss documents</li> <li>Standard Business Patterns: Common business document formats</li> <li>Proper Noun Detection: Identifies potential names and entities</li> </ul>"},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-05-31T16-08-19/#extracted-information-structure","title":"Extracted Information Structure","text":"<p>The agent extracts comprehensive tenant information:</p> <pre><code>{\n    \"name\": str,              # Full legal name\n    \"alias\": str,             # Short friendly name\n    \"type\": str,              # \"company\" or \"individual\"\n    \"address\": {\n        \"street\": str,\n        \"house_number\": str,\n        \"apartment\": str,\n        \"area_code\": str,\n        \"county\": str,\n        \"country\": str\n    },\n    \"contact\": {\n        \"phone\": str,\n        \"email\": str\n    },\n    \"business_info\": {\n        \"vat_id\": str,\n        \"iban\": str\n    },\n    \"confidence\": float       # 0.0-1.0 confidence score\n}\n</code></pre>"},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-05-31T16-08-19/#tenant-matching-algorithm","title":"Tenant Matching Algorithm","text":"<p>The agent uses fuzzy string matching to find existing tenants:</p> <pre><code>def _find_matching_tenant(self, tenant_info: Dict[str, Any], existing_tenants: List[Dict]) -&gt; Optional[Dict]:\n    \"\"\"Find matching tenant using fuzzy matching.\"\"\"\n    from difflib import SequenceMatcher\n\n    threshold = 0.8  # High threshold for tenant matching\n    # Compares names and aliases using sequence matching\n    # Returns best match above threshold\n</code></pre> <p>Matching Criteria: - Name Similarity: Uses SequenceMatcher for fuzzy name comparison - High Threshold: 0.8 similarity required to prevent false matches - Best Match: Returns highest scoring match above threshold</p>"},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-05-31T16-08-19/#security-features","title":"Security Features","text":""},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-05-31T16-08-19/#no-automatic-tenant-creation","title":"No Automatic Tenant Creation","text":"<p>For security reasons, the agent never automatically creates new tenants:</p> <pre><code># NO AUTOMATIC CREATION - User must create tenants manually\nlogger.info(f\"No matching tenant found - tenant creation disabled for security\")\nreturn {\n    \"status\": \"no_match\",\n    \"message\": f\"No matching tenant found. Please create tenant manually if needed.\",\n    \"extracted_info\": tenant_info\n}\n</code></pre>"},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-05-31T16-08-19/#vendor-detection","title":"Vendor Detection","text":"<p>The agent includes safeguards against extracting vendor/sender information instead of recipient data:</p> <ul> <li>Vendor Name Filtering: Maintains list of common vendor names to ignore</li> <li>Pattern Recognition: Identifies \"From:\" vs \"To:\" sections</li> <li>Confidence Adjustment: Lowers confidence when only vendor info is found</li> </ul>"},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-05-31T16-08-19/#configuration","title":"Configuration","text":""},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-05-31T16-08-19/#confidence-thresholds","title":"Confidence Thresholds","text":"<pre><code># Minimum confidence for processing\nMIN_CONFIDENCE = 0.5\n\n# Tenant matching threshold  \nMATCH_THRESHOLD = 0.8\n</code></pre>"},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-05-31T16-08-19/#content-limits","title":"Content Limits","text":"<pre><code># Content truncation for LLM efficiency\nMAX_CONTENT_LENGTH = 4000\n</code></pre>"},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-05-31T16-08-19/#error-handling","title":"Error Handling","text":"<p>The agent implements comprehensive error handling:</p> <p>```python</p>"},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-06-01T06-28-42/","title":"autodoc src backend app agents tenant agent py 2025 06 01T06 28 42","text":""},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-06-01T06-28-42/#tenant-extraction-and-auto-assignment-agent","title":"Tenant Extraction and Auto-Assignment Agent","text":""},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-06-01T06-28-42/#overview","title":"Overview","text":"<p>The <code>TenantExtractionAgent</code> is a sophisticated document processing agent that automatically extracts recipient/tenant information from documents and assigns them to appropriate tenant profiles. It combines LLM-powered intelligent extraction with fallback rule-based methods to ensure reliable tenant identification.</p>"},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-06-01T06-28-42/#features","title":"Features","text":"<ul> <li>Intelligent Tenant Extraction: Uses LLM services for sophisticated content analysis</li> <li>Fallback Rule-Based Extraction: Provides reliable extraction when LLM is unavailable</li> <li>Fuzzy Tenant Matching: Matches extracted information to existing tenant profiles</li> <li>Multi-language Support: Handles Swiss German and standard patterns</li> <li>Confidence Scoring: Provides reliability metrics for extraction results</li> <li>Safe Operation: Never creates tenants automatically for security</li> </ul>"},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-06-01T06-28-42/#class-tenantextractionagent","title":"Class: TenantExtractionAgent","text":""},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-06-01T06-28-42/#constructor","title":"Constructor","text":"<pre><code>def __init__(self, db_session: AsyncSession)\n</code></pre> <p>Initializes the agent with required database session and service dependencies.</p> <p>Parameters: - <code>db_session</code> (AsyncSession): Database session for data operations</p> <p>Dependencies: - <code>TenantRepository</code>: For tenant data operations - <code>DocumentRepository</code>: For document data operations - <code>LLMService</code>: For intelligent content analysis</p>"},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-06-01T06-28-42/#main-methods","title":"Main Methods","text":""},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-06-01T06-28-42/#analyze_and_assign_tenantdocument_id-int-user_id-int-dictstr-any","title":"<code>analyze_and_assign_tenant(document_id: int, user_id: int) -&gt; Dict[str, Any]</code>","text":"<p>Purpose: Main entry point that analyzes document content to extract tenant information and assigns to appropriate tenant.</p> <p>Parameters: - <code>document_id</code> (int): ID of the document to analyze - <code>user_id</code> (int): ID of the user who owns the document</p> <p>Returns: Dictionary with analysis results and assignment status</p> <p>Return Structure: <pre><code>{\n    \"status\": \"success\" | \"no_match\" | \"vendor_rejected\" | \"error\",\n    \"message\": \"Description of the result\",\n    \"tenant\": {...},  # Tenant information (if successful)\n    \"extracted_info\": {...},  # Raw extraction results\n    \"confidence\": 0.0-1.0,  # Confidence score\n    \"action\": \"found\" | \"created\" | \"updated\"  # Action taken\n}\n</code></pre></p> <p>Example Usage: <pre><code>agent = TenantExtractionAgent(db_session)\nresult = await agent.analyze_and_assign_tenant(document_id=123, user_id=456)\n\nif result[\"status\"] == \"success\":\n    print(f\"Document assigned to: {result['tenant']['alias']}\")\n    print(f\"Confidence: {result['confidence']:.2f}\")\n</code></pre></p>"},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-06-01T06-28-42/#extraction-methods","title":"Extraction Methods","text":""},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-06-01T06-28-42/#_extract_tenant_infodocument-document-optionaldictstr-any","title":"<code>_extract_tenant_info(document: Document) -&gt; Optional[Dict[str, Any]]</code>","text":"<p>Purpose: Extracts tenant/recipient information from document content using LLM or fallback methods.</p> <p>Parameters: - <code>document</code> (Document): Document object to analyze</p> <p>Returns: Extracted tenant information or None if extraction fails</p> <p>Extraction Strategy: 1. Check if LLM service is available 2. Use LLM-powered extraction for sophisticated analysis 3. Fall back to rule-based extraction if LLM fails 4. Return structured tenant information with confidence score</p>"},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-06-01T06-28-42/#_simple_tenant_extractiondocument-document-optionaldictstr-any","title":"<code>_simple_tenant_extraction(document: Document) -&gt; Optional[Dict[str, Any]]</code>","text":"<p>Purpose: Rule-based extraction when LLM is unavailable.</p> <p>Features: - Swiss legal document pattern recognition - Standard recipient pattern matching - Proper noun identification - Business entity type detection</p> <p>Supported Patterns: - Swiss patterns: <code>unsere referenz</code>, <code>gl\u00e4ubiger</code>, <code>zust\u00e4ndig mitarbeiter</code> - Standard patterns: <code>bill to</code>, <code>customer</code>, company suffixes - Address blocks and contact information</p>"},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-06-01T06-28-42/#tenant-management-methods","title":"Tenant Management Methods","text":""},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-06-01T06-28-42/#_find_or_create_tenanttenant_info-dictstr-any-user_id-int-dictstr-any","title":"<code>_find_or_create_tenant(tenant_info: Dict[str, Any], user_id: int) -&gt; Dict[str, Any]</code>","text":"<p>Purpose: Finds existing matching tenant. Never creates new tenants automatically for security.</p> <p>Security Note: This method only finds existing tenants and never creates new ones. Users must manually create tenant profiles.</p> <p>Parameters: - <code>tenant_info</code> (Dict): Extracted tenant information - <code>user_id</code> (int): User ID for tenant lookup</p> <p>Returns: Result dictionary with match status</p>"},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-06-01T06-28-42/#_find_matching_tenanttenant_info-dictstr-any-existing_tenants-listdict-optionaldict","title":"<code>_find_matching_tenant(tenant_info: Dict[str, Any], existing_tenants: List[Dict]) -&gt; Optional[Dict]</code>","text":"<p>Purpose: Uses fuzzy string matching to find similar existing tenants.</p> <p>Matching Algorithm: - Uses <code>difflib.SequenceMatcher</code> for similarity scoring - Compares both name and alias fields - Requires 80% similarity threshold for matches - Returns best matching tenant above threshold</p>"},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-06-01T06-28-42/#llm-integration-methods","title":"LLM Integration Methods","text":""},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-06-01T06-28-42/#_create_tenant_extraction_promptcontent-str-title-str-str","title":"<code>_create_tenant_extraction_prompt(content: str, title: str) -&gt; str</code>","text":"<p>Purpose: Creates sophisticated LLM prompt for tenant extraction.</p> <p>Key Features: - Clear recipient vs. vendor distinction instructions - Common vendor name exclusion list - Structured JSON response format - Confidence scoring guidelines - Multi-pattern recognition hints</p> <p>Prompt Structure: - Document analysis instructions - Critical extraction rules - Vendor exclusion patterns - JSON response template - Confidence scoring criteria</p>"},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-06-01T06-28-42/#_parse_tenant_responseresponse-str-optionaldictstr-any","title":"<code>_parse_tenant_response(response: str) -&gt; Optional[Dict[str, Any]]</code>","text":"<p>Purpose: Robustly parses LLM JSON responses with multiple fallback strategies.</p> <p>Parsing Strategies: 1. Direct JSON parsing 2. JSON extraction from markdown code blocks 3. Pattern-based JSON extraction 4. JSON cleaning and repair</p> <p>Validation: - Confidence threshold checking (minimum 0.5) - Required field validation - Data structure normalization</p>"},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-06-01T06-28-42/#utility-methods","title":"Utility Methods","text":""},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-06-01T06-28-42/#_normalize_tenant_datadata-dictstr-any-dictstr-any","title":"<code>_normalize_tenant_data(data: Dict[str, Any]) -&gt; Dict[str, Any]</code>","text":"<p>Purpose: Normalizes and validates extracted tenant data structure.</p> <p>Normalization Features: - String cleaning and trimming - Type validation and defaults - Nested structure processing - Empty field removal - Required field generation</p>"},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-06-01T06-28-42/#_generate_aliasname-str-str","title":"<code>_generate_alias(name: str) -&gt; str</code>","text":"<p>Purpose: Generates friendly aliases from full names.</p> <p>Algorithm: - Removes business suffixes (GmbH, Ltd, etc.) - Truncates long names intelligently - Preserves readability - Handles both individual and company names</p>"},{"location":"autodoc_src_backend_app_agents_tenant_agent_py_2025-06-01T06-28-42/#_assign_document_to_tenantdocument-document-tenant-dict","title":"`_assign_document_to_tenant(document: Document, tenant: Dict)","text":""},{"location":"autodoc_src_backend_app_analytics_py_2025-05-31T15-59-17/","title":"autodoc src backend app analytics py 2025 05 31T15 59 17","text":""},{"location":"autodoc_src_backend_app_analytics_py_2025-05-31T15-59-17/#analytics-service-documentation","title":"Analytics Service Documentation","text":""},{"location":"autodoc_src_backend_app_analytics_py_2025-05-31T15-59-17/#overview","title":"Overview","text":"<p>The <code>AnalyticsService</code> class provides comprehensive analytics functionality for the Document Management System. It supports both synchronous and asynchronous database operations, offering various reporting and analysis capabilities for documents, invoices, and payment tracking.</p>"},{"location":"autodoc_src_backend_app_analytics_py_2025-05-31T15-59-17/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Class Definition</li> <li>Constructor</li> <li>Core Methods</li> <li>Compatibility Methods</li> <li>Usage Examples</li> <li>Error Handling</li> </ul>"},{"location":"autodoc_src_backend_app_analytics_py_2025-05-31T15-59-17/#class-definition","title":"Class Definition","text":"<pre><code>class AnalyticsService:\n    \"\"\"Service for document analytics.\"\"\"\n</code></pre> <p>The service handles analytics operations with support for both async and sync database sessions, automatically detecting the session type and adapting its behavior accordingly.</p>"},{"location":"autodoc_src_backend_app_analytics_py_2025-05-31T15-59-17/#constructor","title":"Constructor","text":""},{"location":"autodoc_src_backend_app_analytics_py_2025-05-31T15-59-17/#__init__db-session","title":"<code>__init__(db: Session)</code>","text":"<p>Initializes the analytics service with a database session.</p> <p>Parameters: - <code>db</code> (Session): SQLAlchemy database session (sync or async)</p> <p>Example: <pre><code>analytics = AnalyticsService(db_session)\n</code></pre></p>"},{"location":"autodoc_src_backend_app_analytics_py_2025-05-31T15-59-17/#core-methods","title":"Core Methods","text":""},{"location":"autodoc_src_backend_app_analytics_py_2025-05-31T15-59-17/#document-statistics","title":"Document Statistics","text":""},{"location":"autodoc_src_backend_app_analytics_py_2025-05-31T15-59-17/#get_document_count_by_type-listdictstr-any","title":"<code>get_document_count_by_type() -&gt; List[Dict[str, Any]]</code>","text":"<p>Returns document counts grouped by document type.</p> <p>Returns: - List of dictionaries containing:   - <code>document_type</code> (str): Type of document   - <code>count</code> (int): Number of documents of this type</p> <p>Example Response: <pre><code>[\n    {\"document_type\": \"invoice\", \"count\": 150},\n    {\"document_type\": \"receipt\", \"count\": 89},\n    {\"document_type\": \"contract\", \"count\": 23}\n]\n</code></pre></p>"},{"location":"autodoc_src_backend_app_analytics_py_2025-05-31T15-59-17/#get_document_count_by_status-listdictstr-any","title":"<code>get_document_count_by_status() -&gt; List[Dict[str, Any]]</code>","text":"<p>Returns document counts grouped by status.</p> <p>Returns: - List of dictionaries containing:   - <code>status</code> (str): Document status   - <code>count</code> (int): Number of documents with this status</p> <p>Example Response: <pre><code>[\n    {\"status\": \"paid\", \"count\": 120},\n    {\"status\": \"unpaid\", \"count\": 45},\n    {\"status\": \"pending\", \"count\": 18}\n]\n</code></pre></p>"},{"location":"autodoc_src_backend_app_analytics_py_2025-05-31T15-59-17/#time-based-analytics","title":"Time-Based Analytics","text":""},{"location":"autodoc_src_backend_app_analytics_py_2025-05-31T15-59-17/#get_document_count_by_monthmonths-int-6-listdictstr-any","title":"<code>get_document_count_by_month(months: int = 6) -&gt; List[Dict[str, Any]]</code>","text":"<p>Returns document counts by month for the specified time period.</p> <p>Parameters: - <code>months</code> (int, optional): Number of months to include (default: 6)</p> <p>Returns: - List of dictionaries containing:   - <code>year</code> (int): Year   - <code>month</code> (int): Month number   - <code>month_name</code> (str): Month name   - <code>count</code> (int): Number of documents</p> <p>Features: - Supports multiple date formats (ISO, European) - Falls back to <code>created_at</code> if <code>document_date</code> is unavailable - Handles date parsing errors gracefully</p> <p>Example Response: <pre><code>[\n    {\"year\": 2024, \"month\": 1, \"month_name\": \"January\", \"count\": 25},\n    {\"year\": 2024, \"month\": 2, \"month_name\": \"February\", \"count\": 32}\n]\n</code></pre></p>"},{"location":"autodoc_src_backend_app_analytics_py_2025-05-31T15-59-17/#get_invoice_amount_by_monthmonths-int-6-listdictstr-any","title":"<code>get_invoice_amount_by_month(months: int = 6) -&gt; List[Dict[str, Any]]</code>","text":"<p>Returns total invoice amounts by month for the specified time period.</p> <p>Parameters: - <code>months</code> (int, optional): Number of months to include (default: 6)</p> <p>Returns: - List of dictionaries containing:   - <code>year</code> (int): Year   - <code>month</code> (int): Month number   - <code>month_name</code> (str): Month name   - <code>total_amount</code> (float): Sum of invoice amounts   - <code>count</code> (int): Number of invoices</p> <p>Example Response: <pre><code>[\n    {\n        \"year\": 2024,\n        \"month\": 1,\n        \"month_name\": \"January\",\n        \"total_amount\": 15750.50,\n        \"count\": 12\n    }\n]\n</code></pre></p>"},{"location":"autodoc_src_backend_app_analytics_py_2025-05-31T15-59-17/#payment-analytics","title":"Payment Analytics","text":""},{"location":"autodoc_src_backend_app_analytics_py_2025-05-31T15-59-17/#get_payment_status_summary-dictstr-any","title":"<code>get_payment_status_summary() -&gt; Dict[str, Any]</code>","text":"<p>Returns comprehensive payment status summary with counts, amounts, and percentages.</p> <p>Returns: - Dictionary containing:   - <code>total_invoices</code> (int): Total number of invoices   - <code>paid_invoices</code> (int): Number of paid invoices   - <code>unpaid_invoices</code> (int): Number of unpaid invoices   - <code>overdue_invoices</code> (int): Number of overdue invoices   - <code>total_amount</code> (float): Total invoice amount   - <code>paid_amount</code> (float): Total paid amount   - <code>unpaid_amount</code> (float): Total unpaid amount   - <code>overdue_amount</code> (float): Total overdue amount   - <code>paid_percentage</code> (float): Percentage of paid invoices   - <code>unpaid_percentage</code> (float): Percentage of unpaid invoices   - <code>overdue_percentage</code> (float): Percentage of overdue invoices</p> <p>Example Response: <pre><code>{\n    \"total_invoices\": 100,\n    \"paid_invoices\": 75,\n    \"unpaid_invoices\": 25,\n    \"overdue_invoices\": 5,\n    \"total_amount\": 50000.0,\n    \"paid_amount\": 37500.0,\n    \"unpaid_amount\": 12500.0,\n    \"overdue_amount\": 2500.0,\n    \"paid_percentage\": 75.0,\n    \"unpaid_percentage\": 25.0,\n    \"overdue_percentage\": 5.0\n}\n</code></pre></p>"},{"location":"autodoc_src_backend_app_analytics_py_2025-05-31T15-59-17/#get_upcoming_due_datesdays-int-30-listdictstr-any","title":"<code>get_upcoming_due_dates(days: int = 30) -&gt; List[Dict[str, Any]]</code>","text":"<p>Returns documents with due dates within the specified number of days.</p> <p>Parameters: - <code>days</code> (int, optional): Number of days ahead to check (default: 30)</p> <p>Returns: - List of dictionaries containing:   - <code>id</code> (int): Document ID   - <code>title</code> (str): Document title   - <code>sender</code> (str): Document sender   - <code>due_date</code> (str): Due date in ISO format   - <code>amount</code> (float): Document amount   - <code>document_type</code> (</p>"},{"location":"autodoc_src_backend_app_analytics_py_2025-06-01T06-19-39/","title":"autodoc src backend app analytics py 2025 06 01T06 19 39","text":""},{"location":"autodoc_src_backend_app_analytics_py_2025-06-01T06-19-39/#analytics-service-documentation","title":"Analytics Service Documentation","text":""},{"location":"autodoc_src_backend_app_analytics_py_2025-06-01T06-19-39/#overview","title":"Overview","text":"<p>The <code>AnalyticsService</code> class provides comprehensive analytics functionality for the Document Management System. It supports both synchronous and asynchronous database operations, offering various metrics and insights about documents, invoices, tags, and payment statuses.</p>"},{"location":"autodoc_src_backend_app_analytics_py_2025-06-01T06-19-39/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Class Definition</li> <li>Initialization</li> <li>Core Analytics Methods</li> <li>Compatibility Methods</li> <li>Usage Examples</li> <li>Error Handling</li> </ul>"},{"location":"autodoc_src_backend_app_analytics_py_2025-06-01T06-19-39/#class-definition","title":"Class Definition","text":"<pre><code>class AnalyticsService:\n    \"\"\"Service for document analytics.\"\"\"\n</code></pre>"},{"location":"autodoc_src_backend_app_analytics_py_2025-06-01T06-19-39/#dependencies","title":"Dependencies","text":"<ul> <li><code>sqlalchemy</code>: Database ORM operations</li> <li><code>datetime</code>: Date and time manipulation</li> <li><code>typing</code>: Type hints</li> <li><code>calendar</code>: Calendar utilities</li> <li><code>re</code>: Regular expression operations</li> <li><code>logging</code>: Logging functionality</li> </ul>"},{"location":"autodoc_src_backend_app_analytics_py_2025-06-01T06-19-39/#initialization","title":"Initialization","text":""},{"location":"autodoc_src_backend_app_analytics_py_2025-06-01T06-19-39/#__init__self-db-session","title":"<code>__init__(self, db: Session)</code>","text":"<p>Initializes the analytics service with a database session.</p> <p>Parameters: - <code>db</code> (Session): SQLAlchemy database session (supports both sync and async)</p> <p>Example: <pre><code>analytics = AnalyticsService(db_session)\n</code></pre></p>"},{"location":"autodoc_src_backend_app_analytics_py_2025-06-01T06-19-39/#core-analytics-methods","title":"Core Analytics Methods","text":""},{"location":"autodoc_src_backend_app_analytics_py_2025-06-01T06-19-39/#document-distribution-analytics","title":"Document Distribution Analytics","text":""},{"location":"autodoc_src_backend_app_analytics_py_2025-06-01T06-19-39/#get_document_count_by_typeself-listdictstr-any","title":"<code>get_document_count_by_type(self) -&gt; List[Dict[str, Any]]</code>","text":"<p>Returns document counts grouped by document type.</p> <p>Returns: - List of dictionaries containing:   - <code>document_type</code> (str): Type of document   - <code>count</code> (int): Number of documents of this type</p> <p>Example Response: <pre><code>[\n    {\"document_type\": \"invoice\", \"count\": 150},\n    {\"document_type\": \"receipt\", \"count\": 89},\n    {\"document_type\": \"contract\", \"count\": 23}\n]\n</code></pre></p>"},{"location":"autodoc_src_backend_app_analytics_py_2025-06-01T06-19-39/#get_document_count_by_statusself-listdictstr-any","title":"<code>get_document_count_by_status(self) -&gt; List[Dict[str, Any]]</code>","text":"<p>Returns document counts grouped by status.</p> <p>Returns: - List of dictionaries containing:   - <code>status</code> (str): Document status   - <code>count</code> (int): Number of documents with this status</p> <p>Example Response: <pre><code>[\n    {\"status\": \"paid\", \"count\": 120},\n    {\"status\": \"unpaid\", \"count\": 45},\n    {\"status\": \"pending\", \"count\": 23}\n]\n</code></pre></p>"},{"location":"autodoc_src_backend_app_analytics_py_2025-06-01T06-19-39/#temporal-analytics","title":"Temporal Analytics","text":""},{"location":"autodoc_src_backend_app_analytics_py_2025-06-01T06-19-39/#get_document_count_by_monthself-months-int-6-listdictstr-any","title":"<code>get_document_count_by_month(self, months: int = 6) -&gt; List[Dict[str, Any]]</code>","text":"<p>Returns document counts by month for the specified time period.</p> <p>Parameters: - <code>months</code> (int, optional): Number of months to include. Defaults to 6.</p> <p>Returns: - List of dictionaries containing:   - <code>year</code> (int): Year   - <code>month</code> (int): Month number   - <code>month_name</code> (str): Month name   - <code>count</code> (int): Number of documents</p> <p>Features: - Supports multiple date formats (ISO and European) - Falls back to <code>created_at</code> if <code>document_date</code> is unavailable - Handles async and sync database operations</p>"},{"location":"autodoc_src_backend_app_analytics_py_2025-06-01T06-19-39/#get_invoice_amount_by_monthself-months-int-6-listdictstr-any","title":"<code>get_invoice_amount_by_month(self, months: int = 6) -&gt; List[Dict[str, Any]]</code>","text":"<p>Returns total invoice amounts by month for the specified time period.</p> <p>Parameters: - <code>months</code> (int, optional): Number of months to include. Defaults to 6.</p> <p>Returns: - List of dictionaries containing:   - <code>year</code> (int): Year   - <code>month</code> (int): Month number   - <code>month_name</code> (str): Month name   - <code>total_amount</code> (float): Total invoice amount   - <code>count</code> (int): Number of invoices</p>"},{"location":"autodoc_src_backend_app_analytics_py_2025-06-01T06-19-39/#payment-analytics","title":"Payment Analytics","text":""},{"location":"autodoc_src_backend_app_analytics_py_2025-06-01T06-19-39/#get_payment_status_summaryself-dictstr-any","title":"<code>get_payment_status_summary(self) -&gt; Dict[str, Any]</code>","text":"<p>Provides comprehensive payment status analytics for invoices.</p> <p>Returns: Dictionary containing: - <code>total_invoices</code> (int): Total number of invoices - <code>paid_invoices</code> (int): Number of paid invoices - <code>unpaid_invoices</code> (int): Number of unpaid invoices - <code>overdue_invoices</code> (int): Number of overdue invoices - <code>total_amount</code> (float): Total invoice amount - <code>paid_amount</code> (float): Total paid amount - <code>unpaid_amount</code> (float): Total unpaid amount - <code>overdue_amount</code> (float): Total overdue amount - <code>paid_percentage</code> (float): Percentage of paid invoices - <code>unpaid_percentage</code> (float): Percentage of unpaid invoices - <code>overdue_percentage</code> (float): Percentage of overdue invoices</p> <p>Example Response: <pre><code>{\n    \"total_invoices\": 200,\n    \"paid_invoices\": 150,\n    \"unpaid_invoices\": 50,\n    \"overdue_invoices\": 10,\n    \"total_amount\": 50000.0,\n    \"paid_amount\": 37500.0,\n    \"unpaid_amount\": 12500.0,\n    \"overdue_amount\": 2500.0,\n    \"paid_percentage\": 75.0,\n    \"unpaid_percentage\": 25.0,\n    \"overdue_percentage\": 5.0\n}\n</code></pre></p>"},{"location":"autodoc_src_backend_app_analytics_py_2025-06-01T06-19-39/#get_upcoming_due_datesself-days-int-30-listdictstr-any","title":"<code>get_upcoming_due_dates(self, days: int = 30) -&gt; List[Dict[str, Any]]</code>","text":"<p>Returns documents with upcoming due dates within the specified period.</p> <p>Parameters: - <code>days</code> (int, optional): Number of days ahead to check. Defaults to 30.</p> <p>Returns: - List of dictionaries containing:   - <code>id</code> (int): Document ID   - <code>title</code> (str): Document title   - <code>sender</code> (str): Document sender   - <code>due_date</code> (str): Due date in ISO format   - <code>amount</code> (float): Document amount   - <code>document_type</code> (str): Type of document   - <code>days_until_due</code> (int): Days until due date</p>"},{"location":"autodoc_src_backend_app_analytics_py_2025-06-01T06-19-39/#tag-and-pattern-analytics","title":"Tag and Pattern Analytics","text":""},{"location":"autodoc_src_backend_app_analytics_py_2025-06-01T06-19-39/#get_tag_distributionself-listdictstr-any","title":"<code>get_tag_distribution(self) -&gt; List[Dict[str, Any]]</code>","text":"<p>Returns document counts by tag, ordered by frequency.</p> <p>Returns: - List of dictionaries containing:   - <code>name</code> (str): Tag name   - <code>color</code> (str): Tag color   - <code>count</code> (int): Number of documents</p>"},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-05-31T16-07-52/","title":"autodoc src backend app api endpoints flight check py 2025 05 31T16 07 52","text":""},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-05-31T16-07-52/#flight-check-api-endpoints","title":"Flight Check API Endpoints","text":""},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-05-31T16-07-52/#overview","title":"Overview","text":"<p>The Flight Check API provides comprehensive platform diagnostics through REST endpoints. It offers various levels of system health checks, from quick health assessments to deep diagnostic analyses.</p>"},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-05-31T16-07-52/#base-information","title":"Base Information","text":"<ul> <li>Module: <code>app.routers.flight_check</code></li> <li>Base Router: <code>/flight-check</code> (typically)</li> <li>Documentation Reference: <code>docs/flight-check.md</code></li> </ul>"},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-05-31T16-07-52/#authentication-requirements","title":"Authentication Requirements","text":"Endpoint Authentication Role Required <code>/health</code> None N/A <code>/comprehensive</code> Required Any authenticated user <code>/deep</code> Required Admin only <code>/database</code> Required Any authenticated user <code>/ai-services</code> Required Any authenticated user <code>/multi-tenant</code> Required Any authenticated user <code>/processing</code> Required Any authenticated user <code>/analytics</code> Required Any authenticated user <code>/performance</code> Required Admin only <code>/security</code> Required Admin only <code>/status</code> Conditional Varies by check type"},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-05-31T16-07-52/#enums","title":"Enums","text":""},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-05-31T16-07-52/#checktype","title":"CheckType","text":"<pre><code>class CheckType(str, Enum):\n    QUICK = \"quick\"\n    COMPREHENSIVE = \"comprehensive\"\n    DEEP = \"deep\"\n</code></pre>"},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-05-31T16-07-52/#api-endpoints","title":"API Endpoints","text":""},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-05-31T16-07-52/#1-quick-health-check","title":"1. Quick Health Check","text":"<p>Endpoint: <code>GET /health</code></p> <p>Description: Performs a quick health check covering essential systems only. Completes within 30 seconds.</p> <p>Authentication: None required</p> <p>Response Model: <code>Dict[str, Any]</code></p> <p>Example Response: <pre><code>{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"checks\": {\n    \"database\": \"ok\",\n    \"basic_services\": \"ok\"\n  }\n}\n</code></pre></p> <p>Error Handling: - Returns HTTP 500 if health check fails - Logs errors for debugging</p>"},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-05-31T16-07-52/#2-comprehensive-check","title":"2. Comprehensive Check","text":"<p>Endpoint: <code>GET /comprehensive</code></p> <p>Description: Performs comprehensive system analysis covering all major systems. Completes within 5 minutes.</p> <p>Authentication: Required (any authenticated user)</p> <p>Response Model: <code>Dict[str, Any]</code></p> <p>Additional Features: - Includes user context in response - Comprehensive system coverage</p> <p>Example Response: <pre><code>{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"checks\": {\n    \"database\": {...},\n    \"ai_services\": {...},\n    \"multi_tenant\": {...}\n  },\n  \"user\": {\n    \"id\": 123,\n    \"username\": \"john_doe\",\n    \"role\": \"user\"\n  }\n}\n</code></pre></p>"},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-05-31T16-07-52/#3-deep-diagnostic","title":"3. Deep Diagnostic","text":"<p>Endpoint: <code>GET /deep</code></p> <p>Description: Performs complete system analysis with deep diagnostics. Completes within 15 minutes.</p> <p>Authentication: Required (admin role only)</p> <p>Response Model: <code>Dict[str, Any]</code></p> <p>Authorization: - Restricted to users with <code>admin</code> role - Returns HTTP 403 for non-admin users</p>"},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-05-31T16-07-52/#4-database-check","title":"4. Database Check","text":"<p>Endpoint: <code>GET /database</code></p> <p>Description: Focused health check for database systems.</p> <p>Authentication: Required (any authenticated user)</p> <p>Response Model: <code>Dict[str, Any]</code></p> <p>Example Response: <pre><code>{\n  \"category\": \"Database\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"check\": {\n    \"connection\": \"ok\",\n    \"query_performance\": \"good\",\n    \"storage\": \"healthy\"\n  }\n}\n</code></pre></p>"},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-05-31T16-07-52/#5-ai-services-check","title":"5. AI Services Check","text":"<p>Endpoint: <code>GET /ai-services</code></p> <p>Description: Focused health check for AI and machine learning services.</p> <p>Authentication: Required (any authenticated user)</p> <p>Response Model: <code>Dict[str, Any]</code></p> <p>Example Response: <pre><code>{\n  \"category\": \"AI Services\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"checks\": {\n    \"nlp_service\": \"ok\",\n    \"ml_models\": \"loaded\",\n    \"processing_queue\": \"healthy\"\n  }\n}\n</code></pre></p>"},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-05-31T16-07-52/#6-multi-tenant-check","title":"6. Multi-Tenant Check","text":"<p>Endpoint: <code>GET /multi-tenant</code></p> <p>Description: Focused health check for multi-tenant system components.</p> <p>Authentication: Required (any authenticated user)</p> <p>Response Model: <code>Dict[str, Any]</code></p> <p>Example Response: <pre><code>{\n  \"category\": \"Multi-Tenant System\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"checks\": {\n    \"tenant_isolation\": \"ok\",\n    \"resource_allocation\": \"balanced\",\n    \"access_control\": \"secure\"\n  }\n}\n</code></pre></p>"},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-05-31T16-07-52/#7-processing-check","title":"7. Processing Check","text":"<p>Endpoint: <code>GET /processing</code></p> <p>Description: Focused health check for document processing pipeline.</p> <p>Authentication: Required (any authenticated user)</p> <p>Response Model: <code>Dict[str, Any]</code></p> <p>Note: Currently uses <code>_check_file_system()</code> method from FlightCheckService.</p>"},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-05-31T16-07-52/#8-analytics-check","title":"8. Analytics Check","text":"<p>Endpoint: <code>GET /analytics</code></p> <p>Description: Focused health check for analytics and reporting systems.</p> <p>Authentication: Required (any authenticated user)</p> <p>Response Model: <code>Dict[str, Any]</code></p> <p>Example Response: <pre><code>{\n  \"category\": \"Analytics &amp; Reporting\",\n  \"timestamp\": \"2024-01-15T10:30:00Z\",\n  \"checks\": {\n    \"data_aggregation\": \"ok\",\n    \"report_generation\": \"functional\",\n    \"metrics_collection\": \"active\"\n  }\n}\n</code></pre></p>"},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-05-31T16-07-52/#9-performance-check","title":"9. Performance Check","text":"<p>Endpoint: <code>GET /performance</code></p> <p>Description: Focused system performance analysis.</p> <p>Authentication: Required (admin role only)</p> <p>Response Model: <code>Dict[str, Any]</code></p> <p>Authorization: - Restricted to users with <code>admin</code> role - Returns HTTP 403 for non-admin users</p>"},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-05-31T16-07-52/#10-security-check","title":"10. Security Check","text":"<p>Endpoint: <code>GET /security</code></p> <p>Description: Focused security configuration an</p>"},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-06-01T06-28-15/","title":"autodoc src backend app api endpoints flight check py 2025 06 01T06 28 15","text":""},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-06-01T06-28-15/#flight-check-api-endpoints","title":"Flight Check API Endpoints","text":""},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-06-01T06-28-15/#overview","title":"Overview","text":"<p>The Flight Check API provides comprehensive platform diagnostics through REST API endpoints. This module implements health checks and system diagnostics with varying levels of depth and authentication requirements.</p>"},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-06-01T06-28-15/#features","title":"Features","text":"<ul> <li>Multiple Check Types: Quick, comprehensive, and deep diagnostic options</li> <li>Authentication Integration: Role-based access control for sensitive operations</li> <li>Focused Diagnostics: Targeted checks for specific system components</li> <li>Unified Status Endpoint: Configurable system status with depth control</li> <li>Error Handling: Comprehensive exception handling with logging</li> </ul>"},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-06-01T06-28-15/#api-endpoints","title":"API Endpoints","text":""},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-06-01T06-28-15/#health-check-endpoints","title":"Health Check Endpoints","text":""},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-06-01T06-28-15/#get-health","title":"GET <code>/health</code>","text":"<p>Quick Health Check - Essential systems only (30 seconds)</p> <ul> <li>Authentication: None required</li> <li>Response Time: ~30 seconds</li> <li>Description: Basic health check for essential systems</li> </ul> <p>Response: <pre><code>{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-01T12:00:00Z\",\n  \"checks\": {...}\n}\n</code></pre></p>"},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-06-01T06-28-15/#get-comprehensive","title":"GET <code>/comprehensive</code>","text":"<p>Comprehensive Check - All major systems (5 minutes)</p> <ul> <li>Authentication: Required (any authenticated user)</li> <li>Response Time: ~5 minutes</li> <li>Description: Thorough check of all major system components</li> </ul> <p>Response: <pre><code>{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-01T12:00:00Z\",\n  \"checks\": {...},\n  \"user\": {\n    \"id\": 123,\n    \"username\": \"user123\",\n    \"role\": \"user\"\n  }\n}\n</code></pre></p>"},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-06-01T06-28-15/#get-deep","title":"GET <code>/deep</code>","text":"<p>Deep Diagnostic - Complete system analysis (15 minutes)</p> <ul> <li>Authentication: Admin role required</li> <li>Response Time: ~15 minutes</li> <li>Description: Complete system analysis with detailed diagnostics</li> </ul> <p>Response: <pre><code>{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-01T12:00:00Z\",\n  \"checks\": {...},\n  \"user\": {\n    \"id\": 123,\n    \"username\": \"admin123\",\n    \"role\": \"admin\"\n  }\n}\n</code></pre></p>"},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-06-01T06-28-15/#component-specific-checks","title":"Component-Specific Checks","text":""},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-06-01T06-28-15/#get-database","title":"GET <code>/database</code>","text":"<p>Database Health Check</p> <ul> <li>Authentication: Required</li> <li>Description: Focused database connectivity and performance check</li> </ul> <p>Response: <pre><code>{\n  \"category\": \"Database\",\n  \"timestamp\": \"2024-01-01T12:00:00Z\",\n  \"check\": {...}\n}\n</code></pre></p>"},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-06-01T06-28-15/#get-ai-services","title":"GET <code>/ai-services</code>","text":"<p>AI Services Health Check</p> <ul> <li>Authentication: Required</li> <li>Description: Check AI service availability and performance</li> </ul> <p>Response: <pre><code>{\n  \"category\": \"AI Services\",\n  \"timestamp\": \"2024-01-01T12:00:00Z\",\n  \"checks\": {...}\n}\n</code></pre></p>"},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-06-01T06-28-15/#get-multi-tenant","title":"GET <code>/multi-tenant</code>","text":"<p>Multi-Tenant System Check</p> <ul> <li>Authentication: Required</li> <li>Description: Validate multi-tenant system functionality</li> </ul> <p>Response: <pre><code>{\n  \"category\": \"Multi-Tenant System\",\n  \"timestamp\": \"2024-01-01T12:00:00Z\",\n  \"checks\": {...}\n}\n</code></pre></p>"},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-06-01T06-28-15/#get-processing","title":"GET <code>/processing</code>","text":"<p>Document Processing Check</p> <ul> <li>Authentication: Required</li> <li>Description: Validate document processing pipeline</li> </ul> <p>Response: <pre><code>{\n  \"category\": \"Document Processing\",\n  \"timestamp\": \"2024-01-01T12:00:00Z\",\n  \"checks\": {...}\n}\n</code></pre></p>"},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-06-01T06-28-15/#get-analytics","title":"GET <code>/analytics</code>","text":"<p>Analytics System Check</p> <ul> <li>Authentication: Required</li> <li>Description: Check analytics and reporting system health</li> </ul> <p>Response: <pre><code>{\n  \"category\": \"Analytics &amp; Reporting\",\n  \"timestamp\": \"2024-01-01T12:00:00Z\",\n  \"checks\": {...}\n}\n</code></pre></p>"},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-06-01T06-28-15/#get-performance","title":"GET <code>/performance</code>","text":"<p>Performance Check</p> <ul> <li>Authentication: Admin role required</li> <li>Description: System performance metrics and analysis</li> </ul> <p>Response: <pre><code>{\n  \"category\": \"Performance\",\n  \"timestamp\": \"2024-01-01T12:00:00Z\",\n  \"checks\": {...}\n}\n</code></pre></p>"},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-06-01T06-28-15/#get-security","title":"GET <code>/security</code>","text":"<p>Security Configuration Check</p> <ul> <li>Authentication: Admin role required</li> <li>Description: Security configuration and compliance check</li> </ul> <p>Response: <pre><code>{\n  \"category\": \"Security\",\n  \"timestamp\": \"2024-01-01T12:00:00Z\",\n  \"checks\": {...}\n}\n</code></pre></p>"},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-06-01T06-28-15/#unified-status-endpoint","title":"Unified Status Endpoint","text":""},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-06-01T06-28-15/#get-status","title":"GET <code>/status</code>","text":"<p>Configurable System Status</p> <ul> <li>Authentication: Variable (depends on check type)</li> <li>Description: Unified endpoint with configurable check depth</li> </ul> <p>Query Parameters: - <code>check_type</code>: Type of check to perform   - <code>quick</code> (default) - No authentication required   - <code>comprehensive</code> - Authentication required   - <code>deep</code> - Admin role required</p> <p>Example: <pre><code>GET /status?check_type=comprehensive\n</code></pre></p> <p>Response: <pre><code>{\n  \"status\": \"healthy\",\n  \"timestamp\": \"2024-01-01T12:00:00Z\",\n  \"check_type\": \"comprehensive\",\n  \"checks\": {...},\n  \"user\": {\n    \"id\": 123,\n    \"username\": \"user123\",\n    \"role\": \"user\"\n  }\n}\n</code></pre></p>"},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-06-01T06-28-15/#data-models","title":"Data Models","text":""},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-06-01T06-28-15/#checktype-enum","title":"CheckType Enum","text":"<pre><code>class CheckType(str, Enum):\n    QUICK = \"quick\"\n    COMPREHENSIVE = \"comprehensive\"\n    DEEP = \"deep\"\n</code></pre>"},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-06-01T06-28-15/#authentication-requirements","title":"Authentication Requirements","text":"Endpoint Authentication Role Requirement <code>/health</code> None None <code>/comprehensive</code> Required Any authenticated user <code>/deep</code> Required Admin <code>/database</code> Required Any authenticated user <code>/ai-services</code> Required Any authenticated user <code>/multi-tenant</code> Required Any authenticated user <code>/processing</code> Required Any authenticated user <code>/analytics</code> Required Any authenticated user <code>/performance</code> Required Admin <code>/security</code> Required Admin <code>/status</code> Variable Depends on check_type"},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-06-01T06-28-15/#error-handling","title":"Error Handling","text":"<p>All endpoints implement comprehensive error handling:</p>"},{"location":"autodoc_src_backend_app_api_endpoints_flight_check_py_2025-06-01T06-28-15/#-500-internal-server-error-system-check-failures","title":"- 500 Internal Server Error: System check failures","text":""},{"location":"autodoc_src_backend_app_api_llm_py_2025-05-31T16-07-21/","title":"autodoc src backend app api llm py 2025 05 31T16 07 21","text":""},{"location":"autodoc_src_backend_app_api_llm_py_2025-05-31T16-07-21/#llm-api-router-documentation","title":"LLM API Router Documentation","text":""},{"location":"autodoc_src_backend_app_api_llm_py_2025-05-31T16-07-21/#overview","title":"Overview","text":"<p>This module provides a FastAPI router for managing Large Language Model (LLM) operations including configuration management, document processing, tenant extraction, and batch operations. The router handles both synchronous and asynchronous LLM operations with proper error handling and logging.</p>"},{"location":"autodoc_src_backend_app_api_llm_py_2025-05-31T16-07-21/#dependencies","title":"Dependencies","text":"<ul> <li>FastAPI: Web framework and routing</li> <li>SQLAlchemy: Database operations with async support</li> <li>Custom Services: LLM service factory, document repository, tenant extraction</li> <li>Authentication: User authentication and authorization</li> </ul>"},{"location":"autodoc_src_backend_app_api_llm_py_2025-05-31T16-07-21/#configuration-endpoints","title":"Configuration Endpoints","text":""},{"location":"autodoc_src_backend_app_api_llm_py_2025-05-31T16-07-21/#get-config","title":"GET <code>/config</code>","text":"<p>Retrieves the current LLM configuration settings.</p> <p>Parameters: - <code>db: AsyncSession</code> - Database session dependency</p> <p>Returns: <pre><code>{\n  \"config\": {\n    \"provider\": \"string\",\n    \"api_key\": \"string\",\n    \"api_url\": \"string\",\n    \"model_tagger\": \"string\",\n    \"model_enricher\": \"string\",\n    \"enabled\": \"boolean\"\n  }\n}\n</code></pre></p> <p>Behavior: - Creates default configuration if none exists - Returns complete configuration object</p>"},{"location":"autodoc_src_backend_app_api_llm_py_2025-05-31T16-07-21/#put-config","title":"PUT <code>/config</code>","text":"<p>Updates LLM configuration with form data.</p> <p>Parameters: - <code>request: Request</code> - Form data containing configuration fields - <code>db: AsyncSession</code> - Database session dependency</p> <p>Form Fields: - Provider Settings:   - <code>provider</code>: LLM provider name   - <code>api_key</code>: Authentication key   - <code>api_url</code>: Provider API endpoint</p> <ul> <li>Model Settings:</li> <li><code>model_tagger</code>: Model for tagging operations</li> <li><code>model_enricher</code>: Model for enrichment operations</li> <li><code>model_analytics</code>: Model for analytics operations</li> <li> <p><code>model_responder</code>: Model for response generation</p> </li> <li> <p>Feature Flags:</p> </li> <li><code>enabled</code>: Enable/disable LLM features</li> <li><code>auto_tagging</code>: Automatic document tagging</li> <li><code>auto_enrichment</code>: Automatic content enrichment</li> <li><code>external_enrichment</code>: External data enrichment</li> <li> <p><code>cache_responses</code>: Response caching</p> </li> <li> <p>Performance Settings:</p> </li> <li><code>max_retries</code>: Maximum retry attempts (integer)</li> <li><code>retry_delay</code>: Delay between retries (integer)</li> <li><code>batch_size</code>: Batch processing size (integer)</li> <li><code>concurrent_tasks</code>: Concurrent task limit (integer)</li> <li><code>min_confidence_tagging</code>: Minimum confidence for tagging (float)</li> <li> <p><code>min_confidence_entity</code>: Minimum confidence for entities (float)</p> </li> <li> <p>Backup Settings:</p> </li> <li><code>backup_provider</code>: Fallback provider</li> <li><code>backup_model</code>: Fallback model</li> </ul> <p>Returns: <pre><code>{\n  \"message\": \"LLM configuration updated successfully\",\n  \"config\": { /* updated configuration */ }\n}\n</code></pre></p> <p>Error Handling: - Validates numeric fields with try/catch - Logs configuration errors - Returns 500 status for update failures</p>"},{"location":"autodoc_src_backend_app_api_llm_py_2025-05-31T16-07-21/#post-test-connection","title":"POST <code>/test-connection</code>","text":"<p>Tests connectivity to the specified LLM provider.</p> <p>Parameters: - <code>request: Request</code> - Form data with connection details - <code>db: AsyncSession</code> - Database session dependency</p> <p>Form Fields: - <code>provider</code>: Provider to test (required) - <code>api_url</code>: Provider endpoint URL - <code>api_key</code>: Authentication credentials</p> <p>Returns: Connection test results from the LLM repository</p> <p>Error Handling: - Validates required provider field - Returns 400 for missing provider - Returns 500 for connection failures</p>"},{"location":"autodoc_src_backend_app_api_llm_py_2025-05-31T16-07-21/#document-processing-endpoints","title":"Document Processing Endpoints","text":""},{"location":"autodoc_src_backend_app_api_llm_py_2025-05-31T16-07-21/#post-process-documentdocument_id","title":"POST <code>/process-document/{document_id}</code>","text":"<p>Processes a single document using LLM services.</p> <p>Parameters: - <code>document_id: int</code> - Document identifier - <code>force: bool = False</code> - Force reprocessing flag - <code>db: AsyncSession</code> - Database session dependency</p> <p>Returns: Processing results from the LLM document service</p> <p>Error Handling: - Logs processing errors with document ID - Returns 500 for processing failures</p>"},{"location":"autodoc_src_backend_app_api_llm_py_2025-05-31T16-07-21/#post-batch-process","title":"POST <code>/batch-process</code>","text":"<p>Processes multiple documents in batch mode.</p> <p>Parameters: - <code>request: Request</code> - Form data with document IDs - <code>db: AsyncSession</code> - Database session dependency</p> <p>Form Fields: - <code>document_ids</code>: Comma-separated list of document IDs - <code>force</code>: Force reprocessing flag (\"true\"/\"false\")</p> <p>Processing Logic: 1. Parses comma-separated document ID string 2. Validates and converts IDs to integers 3. Filters out empty or invalid IDs 4. Executes batch processing via LLM service</p> <p>Returns: Batch processing results with success/failure counts</p> <p>Error Handling: - Validates document ID format - Returns 400 for invalid or missing IDs - Returns 500 for batch processing failures</p>"},{"location":"autodoc_src_backend_app_api_llm_py_2025-05-31T16-07-21/#post-enrich-fielddocument_id","title":"POST <code>/enrich-field/{document_id}</code>","text":"<p>Enriches a specific field within a document.</p> <p>Parameters: - <code>document_id: int</code> - Target document identifier - <code>request: Request</code> - Form data with field specification - <code>db: AsyncSession</code> - Database session dependency</p> <p>Form Fields: - <code>field_name</code>: Name of the field to enrich (required)</p> <p>Returns: Field enrichment results</p> <p>Error Handling: - Validates required field name - Returns 400 for missing field name - Returns 500 for enrichment failures</p>"},{"location":"autodoc_src_backend_app_api_llm_py_2025-05-31T16-07-21/#status-and-analysis-endpoints","title":"Status and Analysis Endpoints","text":""},{"location":"autodoc_src_backend_app_api_llm_py_2025-05-31T16-07-21/#get-status","title":"GET <code>/status</code>","text":"<p>Retrieves comprehensive LLM service status and configuration.</p> <p>Parameters: - <code>db: AsyncSession</code> - Database session dependency</p> <p>Returns: <pre><code>{\n  \"enabled\": \"boolean\",\n  \"provider\": \"string\",\n  \"auto_tagging\": \"boolean\",\n  \"auto_enrichment\": \"boolean\",\n  \"models\": {\n    \"tagger\": \"string\",\n    \"enricher\": \"string\",\n    \"analytics\": \"string\",\n    \"responder\": \"string\"\n  },\n  \"performance\": {\n    \"batch_size\": \"integer\",\n    \"concurrent_tasks\": \"integer\",\n    \"max_retries\": \"integer\"\n  }\n}\n</code></pre></p>"},{"location":"autodoc_src_backend_app_api_llm_py_2025-05-31T16-07-21/#post-suggest-tagsdocument_id","title":"POST <code>/suggest-tags/{document_id}</code>","text":"<p>Generates tag suggestions for a document using LLM analysis.</p> <p>Parameters: - <code>document_id: int</code> - Document to analyze - <code>db: AsyncSession</code> - Database session dependency</p> <p>Processing: 1. Retrieves document from repository 2. Validates document existence 3. Analyzes content for tag suggestions</p> <p>Returns: ```</p>"},{"location":"autodoc_src_backend_app_api_llm_py_2025-06-01T06-27-45/","title":"autodoc src backend app api llm py 2025 06 01T06 27 45","text":""},{"location":"autodoc_src_backend_app_api_llm_py_2025-06-01T06-27-45/#llm-api-router-documentation","title":"LLM API Router Documentation","text":""},{"location":"autodoc_src_backend_app_api_llm_py_2025-06-01T06-27-45/#overview","title":"Overview","text":"<p>This module provides FastAPI routes for managing Large Language Model (LLM) services, including configuration, document processing, and tenant extraction capabilities. The router handles both single document operations and batch processing for efficient document management.</p>"},{"location":"autodoc_src_backend_app_api_llm_py_2025-06-01T06-27-45/#dependencies","title":"Dependencies","text":"<ul> <li>FastAPI: Web framework and dependency injection</li> <li>SQLAlchemy: Async database operations</li> <li>Custom Services: LLM services, repositories, and agents</li> <li>Authentication: User authentication and authorization</li> </ul>"},{"location":"autodoc_src_backend_app_api_llm_py_2025-06-01T06-27-45/#configuration-endpoints","title":"Configuration Endpoints","text":""},{"location":"autodoc_src_backend_app_api_llm_py_2025-06-01T06-27-45/#get-config","title":"GET <code>/config</code>","text":"<p>Retrieves the current LLM configuration settings.</p> <p>Response: <pre><code>{\n  \"config\": {\n    \"provider\": \"string\",\n    \"api_key\": \"string\",\n    \"enabled\": \"boolean\",\n    // ... other config fields\n  }\n}\n</code></pre></p> <p>Behavior: - Returns existing configuration if found - Creates default configuration if none exists - No authentication required</p>"},{"location":"autodoc_src_backend_app_api_llm_py_2025-06-01T06-27-45/#put-config","title":"PUT <code>/config</code>","text":"<p>Updates LLM configuration settings via form data.</p> <p>Parameters: - Provider Settings:   - <code>provider</code>: LLM provider name   - <code>api_key</code>: API authentication key   - <code>api_url</code>: Provider API endpoint URL</p> <ul> <li>Model Settings:</li> <li><code>model_tagger</code>: Model for document tagging</li> <li><code>model_enricher</code>: Model for content enrichment</li> <li><code>model_analytics</code>: Model for document analysis</li> <li> <p><code>model_responder</code>: Model for response generation</p> </li> <li> <p>Boolean Settings:</p> </li> <li><code>enabled</code>: Enable/disable LLM services</li> <li><code>auto_tagging</code>: Automatic document tagging</li> <li><code>auto_enrichment</code>: Automatic content enrichment</li> <li><code>external_enrichment</code>: External enrichment sources</li> <li> <p><code>cache_responses</code>: Response caching</p> </li> <li> <p>Numeric Settings:</p> </li> <li><code>max_retries</code>: Maximum retry attempts</li> <li><code>retry_delay</code>: Delay between retries</li> <li><code>batch_size</code>: Documents per batch</li> <li><code>concurrent_tasks</code>: Parallel processing limit</li> <li><code>min_confidence_tagging</code>: Minimum tagging confidence</li> <li><code>min_confidence_entity</code>: Minimum entity confidence</li> </ul> <p>Response: <pre><code>{\n  \"message\": \"LLM configuration updated successfully\",\n  \"config\": { /* updated config */ }\n}\n</code></pre></p> <p>Error Handling: - Returns 500 on configuration update failure - Logs errors for debugging</p>"},{"location":"autodoc_src_backend_app_api_llm_py_2025-06-01T06-27-45/#post-test-connection","title":"POST <code>/test-connection</code>","text":"<p>Tests connectivity to the specified LLM provider.</p> <p>Form Parameters: - <code>provider</code> (required): LLM provider identifier - <code>api_url</code>: Provider API endpoint - <code>api_key</code>: Authentication key</p> <p>Response: <pre><code>{\n  \"status\": \"success|error\",\n  \"message\": \"Connection test result\"\n}\n</code></pre></p> <p>Error Handling: - Returns 400 if provider is missing - Returns 500 on connection test failure</p>"},{"location":"autodoc_src_backend_app_api_llm_py_2025-06-01T06-27-45/#document-processing-endpoints","title":"Document Processing Endpoints","text":""},{"location":"autodoc_src_backend_app_api_llm_py_2025-06-01T06-27-45/#post-process-documentdocument_id","title":"POST <code>/process-document/{document_id}</code>","text":"<p>Processes a single document with LLM services.</p> <p>Parameters: - <code>document_id</code> (path): Document identifier - <code>force</code> (query, optional): Force reprocessing</p> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"document_id\": \"integer\",\n  \"processing_results\": { /* processing details */ }\n}\n</code></pre></p> <p>Features: - Applies configured LLM models - Supports forced reprocessing - Comprehensive error handling</p>"},{"location":"autodoc_src_backend_app_api_llm_py_2025-06-01T06-27-45/#post-batch-process","title":"POST <code>/batch-process</code>","text":"<p>Processes multiple documents simultaneously.</p> <p>Form Parameters: - <code>document_ids</code>: Comma-separated document IDs - <code>force</code>: Force reprocessing flag</p> <p>Response: <pre><code>{\n  \"status\": \"completed\",\n  \"total\": \"integer\",\n  \"processed\": \"integer\",\n  \"failed\": \"integer\",\n  \"results\": [ /* processing results */ ]\n}\n</code></pre></p> <p>Error Handling: - Validates document ID format - Returns 400 for invalid input - Handles batch processing failures gracefully</p>"},{"location":"autodoc_src_backend_app_api_llm_py_2025-06-01T06-27-45/#post-enrich-fielddocument_id","title":"POST <code>/enrich-field/{document_id}</code>","text":"<p>Enriches a specific document field using LLM.</p> <p>Parameters: - <code>document_id</code> (path): Document identifier - <code>field_name</code> (form): Field to enrich</p> <p>Response: <pre><code>{\n  \"status\": \"success\",\n  \"field_name\": \"string\",\n  \"original_value\": \"string\",\n  \"enriched_value\": \"string\"\n}\n</code></pre></p>"},{"location":"autodoc_src_backend_app_api_llm_py_2025-06-01T06-27-45/#analysis-and-intelligence-endpoints","title":"Analysis and Intelligence Endpoints","text":""},{"location":"autodoc_src_backend_app_api_llm_py_2025-06-01T06-27-45/#get-status","title":"GET <code>/status</code>","text":"<p>Retrieves LLM service status and configuration summary.</p> <p>Response: <pre><code>{\n  \"enabled\": \"boolean\",\n  \"provider\": \"string\",\n  \"auto_tagging\": \"boolean\",\n  \"auto_enrichment\": \"boolean\",\n  \"models\": {\n    \"tagger\": \"string\",\n    \"enricher\": \"string\",\n    \"analytics\": \"string\",\n    \"responder\": \"string\"\n  },\n  \"performance\": {\n    \"batch_size\": \"integer\",\n    \"concurrent_tasks\": \"integer\",\n    \"max_retries\": \"integer\"\n  }\n}\n</code></pre></p>"},{"location":"autodoc_src_backend_app_api_llm_py_2025-06-01T06-27-45/#post-suggest-tagsdocument_id","title":"POST <code>/suggest-tags/{document_id}</code>","text":"<p>Generates tag suggestions for a document using LLM.</p> <p>Parameters: - <code>document_id</code> (path): Document identifier</p> <p>Response: <pre><code>{\n  \"document_id\": \"integer\",\n  \"suggested_tags\": [\"tag1\", \"tag2\", \"tag3\"],\n  \"status\": \"success\"\n}\n</code></pre></p> <p>Error Handling: - Returns 404 if document not found - Handles LLM service failures</p>"},{"location":"autodoc_src_backend_app_api_llm_py_2025-06-01T06-27-45/#post-analyzedocument_id","title":"POST <code>/analyze/{document_id}</code>","text":"<p>Performs comprehensive document analysis using LLM.</p> <p>Parameters: - <code>document_id</code> (path): Document identifier</p> <p>Response: <pre><code>{\n  \"document_id\": \"integer\",\n  \"analysis\": {\n    \"summary\": \"string\",\n    \"key_points\": [\"point1\", \"point2\"],\n    \"sentiment\": \"positive|neutral|negative\",\n    \"entities\": [ /* extracted entities */ ]\n  },\n  \"status\": \"success\"\n}\n</code></pre></p>"},{"location":"autodoc_src_backend_app_api_llm_py_2025-06-01T06-27-45/#tenant-management-endpoints","title":"Tenant Management Endpoints","text":""},{"location":"autodoc_src_backend_app_api_llm_py_2025-06-01T06-27-45/#post-extract-tenantdocument_id","title":"POST <code>/extract-tenant/{document_id}</code>","text":"<p>Extracts tenant information and assigns to document.</p> <p>Parameters: - <code>document_id</code> (path): Document identifier - <code>current_user</code> (dependency): Authenticated user</p> <p>Response: ```json {   \"</p>"},{"location":"autodoc_src_backend_app_api_py_2025-05-31T16-03-27/","title":"autodoc src backend app api py 2025 05 31T16 03 27","text":""},{"location":"autodoc_src_backend_app_api_py_2025-05-31T16-03-27/#document-management-system-api-routes","title":"Document Management System API Routes","text":""},{"location":"autodoc_src_backend_app_api_py_2025-05-31T16-03-27/#overview","title":"Overview","text":"<p>This module provides the RESTful API routes for the Document Management System using FastAPI. It handles document CRUD operations, file uploads, OCR processing, and document metadata management including tags and tasks.</p>"},{"location":"autodoc_src_backend_app_api_py_2025-05-31T16-03-27/#dependencies","title":"Dependencies","text":"<ul> <li>FastAPI: Web framework for building APIs</li> <li>SQLAlchemy: Database ORM for data persistence</li> <li>Pydantic: Data validation and serialization</li> <li>Python Standard Library: File operations and logging</li> </ul>"},{"location":"autodoc_src_backend_app_api_py_2025-05-31T16-03-27/#data-models","title":"Data Models","text":""},{"location":"autodoc_src_backend_app_api_py_2025-05-31T16-03-27/#requestresponse-models","title":"Request/Response Models","text":""},{"location":"autodoc_src_backend_app_api_py_2025-05-31T16-03-27/#documentbase","title":"DocumentBase","text":"<p>Base model for document operations.</p> Field Type Description Optional <code>title</code> <code>str</code> Document title Yes <code>sender</code> <code>str</code> Document sender Yes <code>document_date</code> <code>date</code> Date of the document Yes <code>due_date</code> <code>date</code> Due date for document action Yes <code>amount</code> <code>float</code> Monetary amount (if applicable) Yes <code>document_type</code> <code>str</code> Type/category of document Yes <code>status</code> <code>str</code> Processing status Yes"},{"location":"autodoc_src_backend_app_api_py_2025-05-31T16-03-27/#documentresponse","title":"DocumentResponse","text":"<p>Response model extending DocumentBase with additional fields.</p> Field Type Description <code>id</code> <code>int</code> Unique document identifier <code>filename</code> <code>str</code> Original filename <code>content_text</code> <code>str</code> Extracted text content <code>created_at</code> <code>date</code> Creation timestamp <code>updated_at</code> <code>date</code> Last update timestamp"},{"location":"autodoc_src_backend_app_api_py_2025-05-31T16-03-27/#tagcreatetagresponse","title":"TagCreate/TagResponse","text":"<p>Models for document tagging functionality.</p> Field Type Description Default <code>name</code> <code>str</code> Tag name Required <code>color</code> <code>str</code> Hex color code <code>#cccccc</code> <code>id</code> <code>int</code> Tag identifier (response only) -"},{"location":"autodoc_src_backend_app_api_py_2025-05-31T16-03-27/#taskcreatetaskresponse","title":"TaskCreate/TaskResponse","text":"<p>Models for document task management.</p> Field Type Description Default <code>description</code> <code>str</code> Task description Required <code>due_date</code> <code>date</code> Task deadline <code>None</code> <code>id</code> <code>int</code> Task identifier (response only) - <code>status</code> <code>str</code> Task status (response only) -"},{"location":"autodoc_src_backend_app_api_py_2025-05-31T16-03-27/#api-endpoints","title":"API Endpoints","text":""},{"location":"autodoc_src_backend_app_api_py_2025-05-31T16-03-27/#document-management","title":"Document Management","text":""},{"location":"autodoc_src_backend_app_api_py_2025-05-31T16-03-27/#get-documents","title":"GET <code>/documents</code>","text":"<p>Retrieve a paginated list of documents with optional filtering.</p> <p>Query Parameters: - <code>limit</code> (int): Number of documents to return (1-1000, default: 100) - <code>offset</code> (int): Number of documents to skip (default: 0) - <code>document_type</code> (str, optional): Filter by document type - <code>status</code> (str, optional): Filter by document status - <code>tag_id</code> (int, optional): Filter by tag ID</p> <p>Response: List of <code>DocumentResponse</code> objects</p> <p>Example: <pre><code>GET /documents?limit=50&amp;offset=0&amp;document_type=invoice&amp;status=pending\n</code></pre></p>"},{"location":"autodoc_src_backend_app_api_py_2025-05-31T16-03-27/#get-documentsdocument_id","title":"GET <code>/documents/{document_id}</code>","text":"<p>Retrieve a specific document by its ID.</p> <p>Path Parameters: - <code>document_id</code> (int): Unique document identifier</p> <p>Response: <code>DocumentResponse</code> object</p> <p>Error Responses: - <code>404</code>: Document not found</p>"},{"location":"autodoc_src_backend_app_api_py_2025-05-31T16-03-27/#post-documents","title":"POST <code>/documents</code>","text":"<p>Create a new document manually (without file upload).</p> <p>Request Body: <code>DocumentCreate</code> object</p> <p>Response: <code>DocumentResponse</code> object</p>"},{"location":"autodoc_src_backend_app_api_py_2025-05-31T16-03-27/#put-documentsdocument_id","title":"PUT <code>/documents/{document_id}</code>","text":"<p>Update an existing document's metadata.</p> <p>Path Parameters: - <code>document_id</code> (int): Unique document identifier</p> <p>Request Body: <code>DocumentUpdate</code> object (partial updates supported)</p> <p>Response: <code>DocumentResponse</code> object</p> <p>Error Responses: - <code>404</code>: Document not found</p>"},{"location":"autodoc_src_backend_app_api_py_2025-05-31T16-03-27/#delete-documentsdocument_id","title":"DELETE <code>/documents/{document_id}</code>","text":"<p>Delete a document from the system.</p> <p>Path Parameters: - <code>document_id</code> (int): Unique document identifier</p> <p>Response: Success message</p> <p>Error Responses: - <code>404</code>: Document not found</p>"},{"location":"autodoc_src_backend_app_api_py_2025-05-31T16-03-27/#file-upload-and-processing","title":"File Upload and Processing","text":""},{"location":"autodoc_src_backend_app_api_py_2025-05-31T16-03-27/#post-upload","title":"POST <code>/upload</code>","text":"<p>Upload and automatically process a document file.</p> <p>Request Body: Multipart form data with file</p> <p>Supported File Types: Configured in <code>settings.ALLOWED_FILE_TYPES</code></p> <p>Process Flow: 1. Validates file extension 2. Saves file to inbox folder 3. Processes document with OCR 4. Extracts metadata using LLM 5. Stores document in database</p> <p>Response: <pre><code>{\n  \"message\": \"Document uploaded and processed successfully\",\n  \"document_id\": 123\n}\n</code></pre></p> <p>Error Responses: - <code>400</code>: Unsupported file type</p>"},{"location":"autodoc_src_backend_app_api_py_2025-05-31T16-03-27/#tag-management","title":"Tag Management","text":""},{"location":"autodoc_src_backend_app_api_py_2025-05-31T16-03-27/#post-documentsdocument_idtags","title":"POST <code>/documents/{document_id}/tags</code>","text":"<p>Add a tag to a specific document.</p> <p>Path Parameters: - <code>document_id</code> (int): Target document identifier</p> <p>Request Body: <code>TagCreate</code> object</p> <p>Response: <code>TagResponse</code> object</p> <p>Error Responses: - <code>404</code>: Document not found</p>"},{"location":"autodoc_src_backend_app_api_py_2025-05-31T16-03-27/#delete-documentsdocument_idtagstag_id","title":"DELETE <code>/documents/{document_id}/tags/{tag_id}</code>","text":"<p>Remove a tag from a document.</p> <p>Path Parameters: - <code>document_id</code> (int): Target document identifier - <code>tag_id</code> (int): Tag to remove</p> <p>Response: Success message</p> <p>Error Responses: - <code>404</code>: Document or tag not found</p>"},{"location":"autodoc_src_backend_app_api_py_2025-05-31T16-03-27/#task-management","title":"Task Management","text":""},{"location":"autodoc_src_backend_app_api_py_2025-05-31T16-03-27/#post-documentsdocument_idtasks","title":"POST <code>/documents/{document_id}/tasks</code>","text":"<p>Create a task associated with a document.</p> <p>Path Parameters: - <code>document_id</code> (int): Target document identifier</p> <p>Request Body: <code>TaskCreate</code> object</p> <p>Response: <code>TaskResponse</code> object</p> <p>Error Responses: - <code>404</code>: Document not found</p>"},{"location":"autodoc_src_backend_app_api_py_2025-05-31T16-03-27/#configuration","title":"Configuration","text":"<p>The module relies on the following configuration settings:</p> <ul> <li><code>settings.ALLOWED_FILE_TYPES</code>: List of supported file extensions</li> <li><code>settings.INBOX_FOLDER</code>: Directory for uploaded files</li> </ul>"},{"location":"autodoc_src_backend_app_api_py_2025-05-31T16-03-27/#logging","title":"Logging","text":"<p>The module implements structured logging with INFO level, including: - Timestamp - Module name - Log level - Message content</p>"},{"location":"autodoc_src_backend_app_api_py_2025-05-31T16-03-27/#error-handling","title":"Error Handling","text":"<p>The API uses standard HTTP status codes: - <code>200</code>: Success - <code>400</code>: Bad Request (invalid file type, validation errors) - <code>404</code>: Resource Not Found - <code>500</code>: Internal Server Error</p> <p>All error responses follow FastAPI's standard error format with detailed error messages.</p>"},{"location":"autodoc_src_backend_app_api_py_2025-05-31T16-03-27/#dependencies-injection","title":"Dependencies Injection","text":""},{"location":"autodoc_src_backend_app_api_py_2025-06-01T06-23-41/","title":"autodoc src backend app api py 2025 06 01T06 23 41","text":""},{"location":"autodoc_src_backend_app_api_py_2025-06-01T06-23-41/#document-management-system-api-documentation","title":"Document Management System API Documentation","text":""},{"location":"autodoc_src_backend_app_api_py_2025-06-01T06-23-41/#overview","title":"Overview","text":"<p>This module provides REST API endpoints for the Document Management System built with FastAPI. It handles document operations including upload, processing, CRUD operations, tagging, and task management.</p>"},{"location":"autodoc_src_backend_app_api_py_2025-06-01T06-23-41/#dependencies","title":"Dependencies","text":"<ul> <li>FastAPI: Web framework for building APIs</li> <li>SQLAlchemy: Database ORM</li> <li>Pydantic: Data validation and serialization</li> <li>Python Standard Library: logging, os, shutil, datetime</li> </ul>"},{"location":"autodoc_src_backend_app_api_py_2025-06-01T06-23-41/#configuration","title":"Configuration","text":"<p>The module uses structured logging with INFO level and includes timestamp, logger name, level, and message formatting.</p> <pre><code>logging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\",\n)\n</code></pre>"},{"location":"autodoc_src_backend_app_api_py_2025-06-01T06-23-41/#data-models","title":"Data Models","text":""},{"location":"autodoc_src_backend_app_api_py_2025-06-01T06-23-41/#base-models","title":"Base Models","text":""},{"location":"autodoc_src_backend_app_api_py_2025-06-01T06-23-41/#documentbase","title":"<code>DocumentBase</code>","text":"<p>Base model for document data with optional fields.</p> Field Type Description <code>title</code> <code>Optional[str]</code> Document title <code>sender</code> <code>Optional[str]</code> Document sender <code>document_date</code> <code>Optional[date]</code> Date of the document <code>due_date</code> <code>Optional[date]</code> Document due date <code>amount</code> <code>Optional[float]</code> Associated monetary amount <code>document_type</code> <code>Optional[str]</code> Type/category of document <code>status</code> <code>Optional[str]</code> Processing status"},{"location":"autodoc_src_backend_app_api_py_2025-06-01T06-23-41/#documentcreate","title":"<code>DocumentCreate</code>","text":"<p>Inherits from <code>DocumentBase</code>. Used for creating new documents.</p>"},{"location":"autodoc_src_backend_app_api_py_2025-06-01T06-23-41/#documentupdate","title":"<code>DocumentUpdate</code>","text":"<p>Inherits from <code>DocumentBase</code>. Used for updating existing documents.</p>"},{"location":"autodoc_src_backend_app_api_py_2025-06-01T06-23-41/#documentresponse","title":"<code>DocumentResponse</code>","text":"<p>Response model extending <code>DocumentBase</code> with additional system fields.</p> Field Type Description <code>id</code> <code>int</code> Unique document identifier <code>filename</code> <code>str</code> Original filename <code>content_text</code> <code>Optional[str]</code> Extracted text content <code>created_at</code> <code>date</code> Creation timestamp <code>updated_at</code> <code>date</code> Last update timestamp"},{"location":"autodoc_src_backend_app_api_py_2025-06-01T06-23-41/#tag-models","title":"Tag Models","text":""},{"location":"autodoc_src_backend_app_api_py_2025-06-01T06-23-41/#tagcreate","title":"<code>TagCreate</code>","text":"<p>Model for creating new tags.</p> Field Type Default Description <code>name</code> <code>str</code> - Tag name <code>color</code> <code>Optional[str]</code> <code>\"#cccccc\"</code> Hex color code"},{"location":"autodoc_src_backend_app_api_py_2025-06-01T06-23-41/#tagresponse","title":"<code>TagResponse</code>","text":"<p>Response model for tag data.</p> Field Type Description <code>id</code> <code>int</code> Unique tag identifier <code>name</code> <code>str</code> Tag name <code>color</code> <code>Optional[str]</code> Hex color code"},{"location":"autodoc_src_backend_app_api_py_2025-06-01T06-23-41/#task-models","title":"Task Models","text":""},{"location":"autodoc_src_backend_app_api_py_2025-06-01T06-23-41/#taskcreate","title":"<code>TaskCreate</code>","text":"<p>Model for creating new tasks.</p> Field Type Description <code>description</code> <code>str</code> Task description <code>due_date</code> <code>Optional[date]</code> Task due date"},{"location":"autodoc_src_backend_app_api_py_2025-06-01T06-23-41/#taskresponse","title":"<code>TaskResponse</code>","text":"<p>Response model for task data.</p> Field Type Description <code>id</code> <code>int</code> Unique task identifier <code>description</code> <code>str</code> Task description <code>due_date</code> <code>Optional[date]</code> Task due date <code>status</code> <code>str</code> Task status"},{"location":"autodoc_src_backend_app_api_py_2025-06-01T06-23-41/#api-endpoints","title":"API Endpoints","text":""},{"location":"autodoc_src_backend_app_api_py_2025-06-01T06-23-41/#document-operations","title":"Document Operations","text":""},{"location":"autodoc_src_backend_app_api_py_2025-06-01T06-23-41/#get-documents","title":"<code>GET /documents</code>","text":"<p>Retrieve a paginated list of documents with optional filtering.</p> <p>Query Parameters: - <code>limit</code> (int): Maximum number of documents to return (1-1000, default: 100) - <code>offset</code> (int): Number of documents to skip (\u22650, default: 0) - <code>document_type</code> (str, optional): Filter by document type - <code>status</code> (str, optional): Filter by status - <code>tag_id</code> (int, optional): Filter by tag ID</p> <p>Response: <code>List[DocumentResponse]</code></p> <p>Example: <pre><code>GET /documents?limit=50&amp;offset=0&amp;document_type=invoice&amp;status=pending\n</code></pre></p>"},{"location":"autodoc_src_backend_app_api_py_2025-06-01T06-23-41/#get-documentsdocument_id","title":"<code>GET /documents/{document_id}</code>","text":"<p>Retrieve a specific document by ID.</p> <p>Path Parameters: - <code>document_id</code> (int): Document identifier</p> <p>Response: <code>DocumentResponse</code></p> <p>Errors: - <code>404</code>: Document not found</p>"},{"location":"autodoc_src_backend_app_api_py_2025-06-01T06-23-41/#post-documents","title":"<code>POST /documents</code>","text":"<p>Create a new document manually.</p> <p>Request Body: <code>DocumentCreate</code></p> <p>Response: <code>DocumentResponse</code></p> <p>Example: <pre><code>{\n  \"title\": \"Monthly Invoice\",\n  \"sender\": \"ACME Corp\",\n  \"document_type\": \"invoice\",\n  \"amount\": 1500.00,\n  \"due_date\": \"2024-01-31\"\n}\n</code></pre></p>"},{"location":"autodoc_src_backend_app_api_py_2025-06-01T06-23-41/#put-documentsdocument_id","title":"<code>PUT /documents/{document_id}</code>","text":"<p>Update an existing document.</p> <p>Path Parameters: - <code>document_id</code> (int): Document identifier</p> <p>Request Body: <code>DocumentUpdate</code></p> <p>Response: <code>DocumentResponse</code></p> <p>Errors: - <code>404</code>: Document not found</p>"},{"location":"autodoc_src_backend_app_api_py_2025-06-01T06-23-41/#delete-documentsdocument_id","title":"<code>DELETE /documents/{document_id}</code>","text":"<p>Delete a document.</p> <p>Path Parameters: - <code>document_id</code> (int): Document identifier</p> <p>Response: <pre><code>{\n  \"message\": \"Document deleted successfully\"\n}\n</code></pre></p> <p>Errors: - <code>404</code>: Document not found</p>"},{"location":"autodoc_src_backend_app_api_py_2025-06-01T06-23-41/#file-upload","title":"File Upload","text":""},{"location":"autodoc_src_backend_app_api_py_2025-06-01T06-23-41/#post-upload","title":"<code>POST /upload</code>","text":"<p>Upload and process a document file.</p> <p>Request: - Content-Type: <code>multipart/form-data</code> - File field: <code>file</code> (required)</p> <p>Process Flow: 1. Validates file extension against allowed types 2. Saves file to inbox folder 3. Processes document with OCR 4. Stores extracted data in database</p> <p>Response: <pre><code>{\n  \"message\": \"Document uploaded and processed successfully\",\n  \"document_id\": 123\n}\n</code></pre></p> <p>Errors: - <code>400</code>: Unsupported file type</p>"},{"location":"autodoc_src_backend_app_api_py_2025-06-01T06-23-41/#tag-management","title":"Tag Management","text":""},{"location":"autodoc_src_backend_app_api_py_2025-06-01T06-23-41/#post-documentsdocument_idtags","title":"<code>POST /documents/{document_id}/tags</code>","text":"<p>Add a tag to a document.</p> <p>Path Parameters: - <code>document_id</code> (int): Document identifier</p> <p>Request Body: <code>TagCreate</code></p> <p>Response: <code>TagResponse</code></p> <p>Errors: - <code>404</code>: Document not found</p>"},{"location":"autodoc_src_backend_app_api_py_2025-06-01T06-23-41/#delete-documentsdocument_idtagstag_id","title":"<code>DELETE /documents/{document_id}/tags/{tag_id}</code>","text":"<p>Remove a tag from a document.</p> <p>**Path</p>"},{"location":"autodoc_src_backend_app_auth_py_2025-05-31T16-02-28/","title":"autodoc src backend app auth py 2025 05 31T16 02 28","text":""},{"location":"autodoc_src_backend_app_auth_py_2025-05-31T16-02-28/#authentication-module-documentation","title":"Authentication Module Documentation","text":""},{"location":"autodoc_src_backend_app_auth_py_2025-05-31T16-02-28/#overview","title":"Overview","text":"<p>The authentication module provides comprehensive authentication and authorization functionality for the Document Management System. It supports multiple authentication methods including JWT tokens and API keys, with role-based access control and secure password handling.</p>"},{"location":"autodoc_src_backend_app_auth_py_2025-05-31T16-02-28/#features","title":"Features","text":"<ul> <li>JWT Token Authentication: Secure token-based authentication with configurable expiration</li> <li>API Key Authentication: Alternative authentication method using API keys</li> <li>Password Security: Bcrypt-based password hashing and verification</li> <li>Role-Based Access Control: Support for different user roles (admin, viewer)</li> <li>Database Integration: PostgreSQL integration with fallback support</li> <li>Flexible Dependencies: Optional and required authentication dependencies</li> </ul>"},{"location":"autodoc_src_backend_app_auth_py_2025-05-31T16-02-28/#configuration","title":"Configuration","text":""},{"location":"autodoc_src_backend_app_auth_py_2025-05-31T16-02-28/#environment-variables","title":"Environment Variables","text":"Variable Description Default <code>SECRET_KEY</code> JWT signing secret key Auto-generated 32-character string"},{"location":"autodoc_src_backend_app_auth_py_2025-05-31T16-02-28/#constants","title":"Constants","text":"<pre><code>ALGORITHM = \"HS256\"                    # JWT signing algorithm\nACCESS_TOKEN_EXPIRE_MINUTES = 30       # Token expiration time\n</code></pre>"},{"location":"autodoc_src_backend_app_auth_py_2025-05-31T16-02-28/#data-models","title":"Data Models","text":""},{"location":"autodoc_src_backend_app_auth_py_2025-05-31T16-02-28/#token","title":"Token","text":"<p>Represents an authentication token response.</p> <pre><code>class Token(BaseModel):\n    access_token: str    # JWT token string\n    token_type: str      # Token type (typically \"bearer\")\n</code></pre>"},{"location":"autodoc_src_backend_app_auth_py_2025-05-31T16-02-28/#tokendata","title":"TokenData","text":"<p>Internal token payload data.</p> <pre><code>class TokenData(BaseModel):\n    username: Optional[str] = None    # Username from token payload\n</code></pre>"},{"location":"autodoc_src_backend_app_auth_py_2025-05-31T16-02-28/#user","title":"User","text":"<p>Base user model for API responses.</p> <pre><code>class User(BaseModel):\n    id: Optional[int] = None          # User ID\n    username: str                     # Username\n    email: Optional[str] = None       # Email address\n    full_name: Optional[str] = None   # Full display name\n    role: str = \"viewer\"              # User role\n    disabled: Optional[bool] = None   # Account status\n</code></pre>"},{"location":"autodoc_src_backend_app_auth_py_2025-05-31T16-02-28/#userindb","title":"UserInDB","text":"<p>Extended user model including password hash.</p> <pre><code>class UserInDB(User):\n    hashed_password: str    # Bcrypt password hash\n</code></pre>"},{"location":"autodoc_src_backend_app_auth_py_2025-05-31T16-02-28/#core-functions","title":"Core Functions","text":""},{"location":"autodoc_src_backend_app_auth_py_2025-05-31T16-02-28/#password-management","title":"Password Management","text":""},{"location":"autodoc_src_backend_app_auth_py_2025-05-31T16-02-28/#verify_passwordplain_password-str-hashed_password-str-bool","title":"<code>verify_password(plain_password: str, hashed_password: str) -&gt; bool</code>","text":"<p>Verifies a plain text password against a bcrypt hash.</p> <p>Parameters: - <code>plain_password</code>: The plain text password to verify - <code>hashed_password</code>: The bcrypt hash to verify against</p> <p>Returns: <code>True</code> if password is valid, <code>False</code> otherwise</p>"},{"location":"autodoc_src_backend_app_auth_py_2025-05-31T16-02-28/#get_password_hashpassword-str-str","title":"<code>get_password_hash(password: str) -&gt; str</code>","text":"<p>Generates a bcrypt hash for a password.</p> <p>Parameters: - <code>password</code>: Plain text password to hash</p> <p>Returns: Bcrypt hash string</p>"},{"location":"autodoc_src_backend_app_auth_py_2025-05-31T16-02-28/#database-operations","title":"Database Operations","text":""},{"location":"autodoc_src_backend_app_auth_py_2025-05-31T16-02-28/#get_user_dbdb-asyncsession-username-str-optionaluserindb","title":"<code>get_user_db(db: AsyncSession, username: str) -&gt; Optional[UserInDB]</code>","text":"<p>Retrieves a user from the database by username.</p> <p>Parameters: - <code>db</code>: Database session - <code>username</code>: Username to lookup</p> <p>Returns: <code>UserInDB</code> instance if found, <code>None</code> otherwise</p> <p>Behavior: - Queries PostgreSQL database first - Falls back to in-memory store for testing - Returns <code>None</code> if user not found</p>"},{"location":"autodoc_src_backend_app_auth_py_2025-05-31T16-02-28/#authenticate_userdb-asyncsession-username-str-password-str-optionaluserindb","title":"<code>authenticate_user(db: AsyncSession, username: str, password: str) -&gt; Optional[UserInDB]</code>","text":"<p>Authenticates a user with username and password.</p> <p>Parameters: - <code>db</code>: Database session - <code>username</code>: Username to authenticate - <code>password</code>: Plain text password</p> <p>Returns: <code>UserInDB</code> instance if authentication successful, <code>None</code> otherwise</p>"},{"location":"autodoc_src_backend_app_auth_py_2025-05-31T16-02-28/#token-management","title":"Token Management","text":""},{"location":"autodoc_src_backend_app_auth_py_2025-05-31T16-02-28/#create_access_tokendata-dict-expires_delta-optionaltimedelta-none-str","title":"<code>create_access_token(data: dict, expires_delta: Optional[timedelta] = None) -&gt; str</code>","text":"<p>Creates a JWT access token.</p> <p>Parameters: - <code>data</code>: Token payload data - <code>expires_delta</code>: Optional custom expiration time</p> <p>Returns: JWT token string</p> <p>Default Behavior: - Uses 15-minute expiration if no <code>expires_delta</code> provided - Includes <code>exp</code> claim with expiration timestamp - Signs with configured <code>SECRET_KEY</code></p>"},{"location":"autodoc_src_backend_app_auth_py_2025-05-31T16-02-28/#authentication-dependencies","title":"Authentication Dependencies","text":""},{"location":"autodoc_src_backend_app_auth_py_2025-05-31T16-02-28/#get_current_usertoken-api_key-db-user","title":"<code>get_current_user(token, api_key, db) -&gt; User</code>","text":"<p>Primary authentication dependency that supports both JWT tokens and API keys.</p> <p>Parameters: - <code>token</code>: JWT token from OAuth2 scheme - <code>api_key</code>: API key from X-API-Key header - <code>db</code>: Database session</p> <p>Returns: Authenticated <code>User</code> instance</p> <p>Raises: <code>HTTPException</code> (401) if authentication fails</p> <p>Authentication Flow: 1. Check for valid API key first 2. Fall back to JWT token validation 3. Lookup user in database 4. Return user data</p>"},{"location":"autodoc_src_backend_app_auth_py_2025-05-31T16-02-28/#get_current_active_usercurrent_user-user-user","title":"<code>get_current_active_user(current_user: User) -&gt; User</code>","text":"<p>Ensures the authenticated user is active (not disabled).</p> <p>Parameters: - <code>current_user</code>: User from <code>get_current_user</code></p> <p>Returns: Active <code>User</code> instance</p> <p>Raises: <code>HTTPException</code> (400) if user is disabled</p>"},{"location":"autodoc_src_backend_app_auth_py_2025-05-31T16-02-28/#get_current_user_optionaltoken-api_key-db-user-none","title":"<code>get_current_user_optional(token, api_key, db) -&gt; User | None</code>","text":"<p>Optional authentication dependency that returns <code>None</code> instead of raising exceptions.</p> <p>Parameters: - <code>token</code>: JWT token from OAuth2 scheme - <code>api_key</code>: API key from X-API-Key header - <code>db</code>: Database session</p> <p>Returns: <code>User</code> instance if authenticated, <code>None</code> otherwise</p> <p>Use Cases: - Routes that allow anonymous access - Optional authentication scenarios - Public endpoints with enhanced features for authenticated users</p>"},{"location":"autodoc_src_backend_app_auth_py_2025-05-31T16-02-28/#verify_api_keyapi_key-str-str","title":"<code>verify_api_key(api_key: str) -&gt; str</code>","text":"<p>Validates an API key.</p> <p>Parameters: - <code>api_key</code>: API key from header</p> <p>Returns: Username associated with API key</p> <p>Raises: <code>HTTPException</code> (401) if API key is invalid</p>"},{"location":"autodoc_src_backend_app_auth_py_2025-05-31T16-02-28/#get_authapi_key-token","title":"<code>get_auth(api_key, token)</code>","text":"<p>Flexible authentication dependency supporting either API key or JWT token.</p> <p>Parameters: - <code>api_key</code>: API key from header - <code>token</code>: JWT token</p> <p>Returns: Authenticated user information</p> <p>Behavior: - Tries API key authentication first - Falls back to JWT token authentication - Raises exception if both methods fail</p>"},{"location":"autodoc_src_backend_app_auth_py_2025-05-31T16-02-28/#security-features","title":"Security Features","text":""},{"location":"autodoc_src_backend_app_auth_py_2025-05-31T16-02-28/#password-security","title":"Password Security","text":"<ul> <li>Uses bcrypt hashing algorithm</li> <li>Automatic salt generation</li> <li>Configurable complexity through passlib</li> </ul>"},{"location":"autodoc_src_backend_app_auth_py_2025-05-31T16-02-28/#jwt-security","title":"JWT Security","text":"<ul> <li>HS256 algorithm for token signing</li> <li>Configurable expiration times</li> <li>Secure secret key generation</li> <li>Token payload validation</li> </ul>"},{"location":"autodoc_src_backend_app_auth_py_2025-05-31T16-02-28/#api-key-security","title":"API Key Security","text":"<ul> <li>Header-based API key transmission</li> <li>Key-to-user mapping</li> <li>Centralized validation</li> </ul>"},{"location":"autodoc_src_backend_app_auth_py_2025-06-01T06-22-42/","title":"autodoc src backend app auth py 2025 06 01T06 22 42","text":""},{"location":"autodoc_src_backend_app_auth_py_2025-06-01T06-22-42/#authentication-module-documentation","title":"Authentication Module Documentation","text":""},{"location":"autodoc_src_backend_app_auth_py_2025-06-01T06-22-42/#overview","title":"Overview","text":"<p>The authentication module provides comprehensive authentication and authorization functionality for the Document Management System. It supports both JWT token-based authentication and API key authentication, with role-based access control and secure password handling.</p>"},{"location":"autodoc_src_backend_app_auth_py_2025-06-01T06-22-42/#features","title":"Features","text":"<ul> <li>JWT Token Authentication: Secure token-based authentication with configurable expiration</li> <li>API Key Authentication: Alternative authentication method using API keys</li> <li>Password Security: BCrypt-based password hashing and verification</li> <li>Role-Based Access Control: Support for different user roles (admin, viewer, etc.)</li> <li>Database Integration: Seamless integration with PostgreSQL database</li> <li>Fallback Support: In-memory fallback for testing environments</li> </ul>"},{"location":"autodoc_src_backend_app_auth_py_2025-06-01T06-22-42/#configuration","title":"Configuration","text":""},{"location":"autodoc_src_backend_app_auth_py_2025-06-01T06-22-42/#environment-variables","title":"Environment Variables","text":"Variable Description Default <code>SECRET_KEY</code> JWT signing key Auto-generated 32-character string <code>ACCESS_TOKEN_EXPIRE_MINUTES</code> JWT token expiration time 30 minutes"},{"location":"autodoc_src_backend_app_auth_py_2025-06-01T06-22-42/#constants","title":"Constants","text":"<pre><code>ALGORITHM = \"HS256\"  # JWT signing algorithm\nACCESS_TOKEN_EXPIRE_MINUTES = 30\n</code></pre>"},{"location":"autodoc_src_backend_app_auth_py_2025-06-01T06-22-42/#data-models","title":"Data Models","text":""},{"location":"autodoc_src_backend_app_auth_py_2025-06-01T06-22-42/#token","title":"Token","text":"<p>Represents an authentication token response.</p> <pre><code>class Token(BaseModel):\n    access_token: str\n    token_type: str\n</code></pre>"},{"location":"autodoc_src_backend_app_auth_py_2025-06-01T06-22-42/#tokendata","title":"TokenData","text":"<p>Internal token payload data.</p> <pre><code>class TokenData(BaseModel):\n    username: Optional[str] = None\n</code></pre>"},{"location":"autodoc_src_backend_app_auth_py_2025-06-01T06-22-42/#user","title":"User","text":"<p>Base user model for API responses.</p> <pre><code>class User(BaseModel):\n    id: Optional[int] = None\n    username: str\n    email: Optional[str] = None\n    full_name: Optional[str] = None\n    role: str = \"viewer\"\n    disabled: Optional[bool] = None\n</code></pre>"},{"location":"autodoc_src_backend_app_auth_py_2025-06-01T06-22-42/#userindb","title":"UserInDB","text":"<p>Extended user model including password hash for database operations.</p> <pre><code>class UserInDB(User):\n    hashed_password: str\n</code></pre>"},{"location":"autodoc_src_backend_app_auth_py_2025-06-01T06-22-42/#core-functions","title":"Core Functions","text":""},{"location":"autodoc_src_backend_app_auth_py_2025-06-01T06-22-42/#password-management","title":"Password Management","text":""},{"location":"autodoc_src_backend_app_auth_py_2025-06-01T06-22-42/#verify_passwordplain_password-str-hashed_password-str-bool","title":"<code>verify_password(plain_password: str, hashed_password: str) -&gt; bool</code>","text":"<p>Verifies a plain text password against a hashed password.</p> <p>Parameters: - <code>plain_password</code>: The plain text password to verify - <code>hashed_password</code>: The hashed password to compare against</p> <p>Returns: <code>True</code> if password matches, <code>False</code> otherwise</p>"},{"location":"autodoc_src_backend_app_auth_py_2025-06-01T06-22-42/#get_password_hashpassword-str-str","title":"<code>get_password_hash(password: str) -&gt; str</code>","text":"<p>Generates a secure hash for a password.</p> <p>Parameters: - <code>password</code>: Plain text password to hash</p> <p>Returns: BCrypt hashed password string</p>"},{"location":"autodoc_src_backend_app_auth_py_2025-06-01T06-22-42/#database-operations","title":"Database Operations","text":""},{"location":"autodoc_src_backend_app_auth_py_2025-06-01T06-22-42/#get_user_dbdb-asyncsession-username-str-optionaluserindb","title":"<code>get_user_db(db: AsyncSession, username: str) -&gt; Optional[UserInDB]</code>","text":"<p>Retrieves a user from the database by username.</p> <p>Parameters: - <code>db</code>: Database session - <code>username</code>: Username to search for</p> <p>Returns: <code>UserInDB</code> instance if found, <code>None</code> otherwise</p> <p>Note: Falls back to in-memory fake database for testing when user not found in PostgreSQL.</p>"},{"location":"autodoc_src_backend_app_auth_py_2025-06-01T06-22-42/#authenticate_userdb-asyncsession-username-str-password-str-optionaluserindb","title":"<code>authenticate_user(db: AsyncSession, username: str, password: str) -&gt; Optional[UserInDB]</code>","text":"<p>Authenticates a user with username and password.</p> <p>Parameters: - <code>db</code>: Database session - <code>username</code>: Username for authentication - <code>password</code>: Plain text password</p> <p>Returns: <code>UserInDB</code> instance if authentication successful, <code>None</code> otherwise</p>"},{"location":"autodoc_src_backend_app_auth_py_2025-06-01T06-22-42/#token-management","title":"Token Management","text":""},{"location":"autodoc_src_backend_app_auth_py_2025-06-01T06-22-42/#create_access_tokendata-dict-expires_delta-optionaltimedelta-none-str","title":"<code>create_access_token(data: dict, expires_delta: Optional[timedelta] = None) -&gt; str</code>","text":"<p>Creates a JWT access token.</p> <p>Parameters: - <code>data</code>: Token payload data - <code>expires_delta</code>: Optional custom expiration time</p> <p>Returns: Encoded JWT token string</p> <p>Default Expiration: 15 minutes if no custom expiration provided</p>"},{"location":"autodoc_src_backend_app_auth_py_2025-06-01T06-22-42/#dependency-functions","title":"Dependency Functions","text":""},{"location":"autodoc_src_backend_app_auth_py_2025-06-01T06-22-42/#get_current_user","title":"<code>get_current_user()</code>","text":"<p>Dependencies: - <code>token</code>: OAuth2 bearer token - <code>api_key</code>: X-API-Key header - <code>db</code>: Database session</p> <p>Returns: <code>User</code> instance</p> <p>Raises: <code>HTTPException</code> (401) if authentication fails</p> <p>Supports both JWT token and API key authentication methods.</p>"},{"location":"autodoc_src_backend_app_auth_py_2025-06-01T06-22-42/#get_current_active_user","title":"<code>get_current_active_user()</code>","text":"<p>Dependencies: - <code>current_user</code>: Result from <code>get_current_user()</code></p> <p>Returns: <code>User</code> instance</p> <p>Raises: <code>HTTPException</code> (400) if user is disabled</p>"},{"location":"autodoc_src_backend_app_auth_py_2025-06-01T06-22-42/#get_current_user_optional","title":"<code>get_current_user_optional()</code>","text":"<p>Dependencies: - <code>token</code>: OAuth2 bearer token - <code>api_key</code>: X-API-Key header - <code>db</code>: Database session</p> <p>Returns: <code>User</code> instance or <code>None</code></p> <p>Note: Does not raise exceptions - returns <code>None</code> for invalid/missing authentication</p>"},{"location":"autodoc_src_backend_app_auth_py_2025-06-01T06-22-42/#verify_api_key","title":"<code>verify_api_key()</code>","text":"<p>Dependencies: - <code>api_key</code>: X-API-Key header value</p> <p>Returns: Username associated with the API key</p> <p>Raises: <code>HTTPException</code> (401) if API key is invalid</p>"},{"location":"autodoc_src_backend_app_auth_py_2025-06-01T06-22-42/#get_auth","title":"<code>get_auth()</code>","text":"<p>Dependencies: - <code>api_key</code>: X-API-Key header - <code>token</code>: OAuth2 bearer token</p> <p>Returns: User information from either API key or JWT token</p> <p>Attempts API key authentication first, falls back to JWT token authentication.</p>"},{"location":"autodoc_src_backend_app_auth_py_2025-06-01T06-22-42/#authentication-methods","title":"Authentication Methods","text":""},{"location":"autodoc_src_backend_app_auth_py_2025-06-01T06-22-42/#jwt-token-authentication","title":"JWT Token Authentication","text":"<ol> <li>User provides username/password to <code>/token</code> endpoint</li> <li>System validates credentials against database</li> <li>If valid, returns JWT token with user information</li> <li>Token must be included in <code>Authorization: Bearer &lt;token&gt;</code> header</li> <li>Token expires after configured time period</li> </ol>"},{"location":"autodoc_src_backend_app_auth_py_2025-06-01T06-22-42/#api-key-authentication","title":"API Key Authentication","text":"<ol> <li>User includes API key in <code>X-API-Key</code> header</li> <li>System validates key against configured API keys</li> <li>If valid, grants access with associated user role</li> <li>No expiration - keys remain valid until revoked</li> </ol>"},{"location":"autodoc_src_backend_app_auth_py_2025-06-01T06-22-42/#security-features","title":"Security Features","text":"<ul> <li>Password Hashing: Uses BCrypt for secure password storage</li> <li>JWT Signing: Tokens signed with configurable secret key</li> <li>Automatic Key Generation: Generates secure secret key if not configured</li> <li>Role-Based Access: Supports multiple user roles for authorization</li> <li>Token Expiration: Configurable token lifetime</li> <li>Secure Headers: Proper HTTP security headers for authentication</li> </ul>"},{"location":"autodoc_src_backend_app_auth_py_2025-06-01T06-22-42/#testing-support","title":"Testing Support","text":"<p>The module includes fallback authentication data for testing:</p> <p>```python fake_users_db = {     \"admin\": {         \"username\": \"admin\",         \"full_name\": \"Administrator\",          \"email\": \"admin@example.com\",         \"role\": \"admin\",         \"disabled\": False,     },     \"viewer\": {         \"username</p>"},{"location":"autodoc_src_backend_app_calendar_export_py_2025-05-31T16-06-31/","title":"autodoc src backend app calendar export py 2025 05 31T16 06 31","text":""},{"location":"autodoc_src_backend_app_calendar_export_py_2025-05-31T16-06-31/#calendar-export-service-documentation","title":"Calendar Export Service Documentation","text":""},{"location":"autodoc_src_backend_app_calendar_export_py_2025-05-31T16-06-31/#overview","title":"Overview","text":"<p>The Calendar Export Service provides calendar functionality for the Document Management System, allowing users to export documents with due dates as calendar events in ICS format. This service is designed to help users track document deadlines and upcoming due dates.</p>"},{"location":"autodoc_src_backend_app_calendar_export_py_2025-05-31T16-06-31/#classes","title":"Classes","text":""},{"location":"autodoc_src_backend_app_calendar_export_py_2025-05-31T16-06-31/#calendarservice","title":"CalendarService","text":"<p>Main service class for calendar export functionality.</p>"},{"location":"autodoc_src_backend_app_calendar_export_py_2025-05-31T16-06-31/#constructor","title":"Constructor","text":"<pre><code>def __init__(self, db: Session)\n</code></pre> <p>Parameters: - <code>db</code> (Session): SQLAlchemy database session for querying documents</p>"},{"location":"autodoc_src_backend_app_calendar_export_py_2025-05-31T16-06-31/#methods","title":"Methods","text":""},{"location":"autodoc_src_backend_app_calendar_export_py_2025-05-31T16-06-31/#generate_calendar","title":"generate_calendar","text":"<pre><code>def generate_calendar(document_ids: Optional[List[int]] = None) -&gt; Calendar\n</code></pre> <p>Generates a calendar with events for documents that have due dates.</p> <p>Parameters: - <code>document_ids</code> (Optional[List[int]]): Optional list of specific document IDs to include. If None, includes all documents with due dates.</p> <p>Returns: - <code>Calendar</code>: Calendar object containing events for the specified documents</p> <p>Behavior: - Queries documents with non-null due dates - Filters by document IDs if provided - Creates all-day events for each document - Event names follow format: \"{Document Type}: {Title}\" - Event descriptions include sender, amount (if applicable), status, and document ID</p>"},{"location":"autodoc_src_backend_app_calendar_export_py_2025-05-31T16-06-31/#generate_ics_file","title":"generate_ics_file","text":"<pre><code>def generate_ics_file(document_ids: Optional[List[int]] = None) -&gt; str\n</code></pre> <p>Generates ICS file content for documents.</p> <p>Parameters: - <code>document_ids</code> (Optional[List[int]]): Optional list of specific document IDs to include</p> <p>Returns: - <code>str</code>: ICS file content as a string</p>"},{"location":"autodoc_src_backend_app_calendar_export_py_2025-05-31T16-06-31/#generate_upcoming_due_dates_calendar","title":"generate_upcoming_due_dates_calendar","text":"<pre><code>def generate_upcoming_due_dates_calendar(days: int = 30) -&gt; Calendar\n</code></pre> <p>Generates a calendar with events for documents with upcoming due dates within a specified timeframe.</p> <p>Parameters: - <code>days</code> (int): Number of days ahead to check for due dates. Default is 30 days.</p> <p>Returns: - <code>Calendar</code>: Calendar object with upcoming events</p> <p>Behavior: - Excludes documents with status 'paid' - Orders results by due date - Only includes documents with due dates between today and the specified number of days ahead</p>"},{"location":"autodoc_src_backend_app_calendar_export_py_2025-05-31T16-06-31/#generate_upcoming_due_dates_ics","title":"generate_upcoming_due_dates_ics","text":"<pre><code>def generate_upcoming_due_dates_ics(days: int = 30) -&gt; str\n</code></pre> <p>Generates ICS file content for documents with upcoming due dates.</p> <p>Parameters: - <code>days</code> (int): Number of days ahead to check. Default is 30 days.</p> <p>Returns: - <code>str</code>: ICS file content as a string</p>"},{"location":"autodoc_src_backend_app_calendar_export_py_2025-05-31T16-06-31/#get_events_for_month-async","title":"get_events_for_month (Async)","text":"<pre><code>async def get_events_for_month(db, month: int, year: int)\n</code></pre> <p>Returns a list of events (documents with due dates) for a given month and year.</p> <p>Parameters: - <code>db</code>: Database session - <code>month</code> (int): Month number (1-12) - <code>year</code> (int): Year</p> <p>Returns: - <code>List[Dict]</code>: List of dictionaries containing event data with keys:   - <code>id</code>: Document ID   - <code>title</code>: Document sender or title   - <code>due_date</code>: Due date   - <code>status</code>: Document status</p>"},{"location":"autodoc_src_backend_app_calendar_export_py_2025-05-31T16-06-31/#get_events_for_date-async","title":"get_events_for_date (Async)","text":"<pre><code>async def get_events_for_date(db, date_str: str)\n</code></pre> <p>Returns events for a specific date.</p> <p>Parameters: - <code>db</code>: Database session - <code>date_str</code> (str): Date in YYYY-MM-DD format</p> <p>Returns: - <code>List[Dict]</code>: List of dictionaries containing event data for the specified date</p>"},{"location":"autodoc_src_backend_app_calendar_export_py_2025-05-31T16-06-31/#calendarexportservice","title":"CalendarExportService","text":"<pre><code>class CalendarExportService(CalendarService)\n</code></pre> <p>Backward-compatibility alias for <code>CalendarService</code>. This class is maintained for existing code that imports <code>CalendarExportService</code> but provides the same functionality as the parent class.</p>"},{"location":"autodoc_src_backend_app_calendar_export_py_2025-05-31T16-06-31/#dependencies","title":"Dependencies","text":"<ul> <li><code>ics</code>: For creating calendar and event objects</li> <li><code>sqlalchemy</code>: For database operations</li> <li><code>app.models.Document</code>: Document model for querying</li> <li><code>logging</code>: For operation logging</li> <li><code>datetime</code>: For date and time operations</li> <li><code>typing</code>: For type hints</li> </ul>"},{"location":"autodoc_src_backend_app_calendar_export_py_2025-05-31T16-06-31/#event-structure","title":"Event Structure","text":"<p>Calendar events created by this service include:</p> <ul> <li>Name: \"{Document Type}: {Document Title}\"</li> <li>Description: Multi-line text containing:</li> <li>Sender information</li> <li>Amount (if applicable)</li> <li>Document status</li> <li>Document ID</li> <li>Date: All-day event on the document's due date</li> </ul>"},{"location":"autodoc_src_backend_app_calendar_export_py_2025-05-31T16-06-31/#logging","title":"Logging","text":"<p>The service uses Python's logging module to track operations: - Log level: INFO - Format: \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\" - Logs the number of events generated for each calendar operation</p>"},{"location":"autodoc_src_backend_app_calendar_export_py_2025-05-31T16-06-31/#usage-examples","title":"Usage Examples","text":"<pre><code>from sqlalchemy.orm import Session\nfrom app.services.calendar_service import CalendarService\n\n# Initialize service\ndb_session = Session()\ncalendar_service = CalendarService(db_session)\n\n# Generate calendar for all documents\ncalendar = calendar_service.generate_calendar()\n\n# Generate calendar for specific documents\nspecific_calendar = calendar_service.generate_calendar([1, 2, 3])\n\n# Generate ICS file content\nics_content = calendar_service.generate_ics_file()\n\n# Generate calendar for upcoming due dates (next 14 days)\nupcoming_calendar = calendar_service.generate_upcoming_due_dates_calendar(days=14)\n</code></pre>"},{"location":"autodoc_src_backend_app_calendar_export_py_2025-05-31T16-06-31/#error-handling","title":"Error Handling","text":"<ul> <li>Invalid date formats in <code>get_events_for_date</code> return an empty list</li> <li>Database errors are propagated to the caller</li> <li>Logging provides visibility into operation success and event counts</li> </ul>"},{"location":"autodoc_src_backend_app_calendar_export_py_2025-06-01T06-26-50/","title":"autodoc src backend app calendar export py 2025 06 01T06 26 50","text":""},{"location":"autodoc_src_backend_app_calendar_export_py_2025-06-01T06-26-50/#calendar-export-module-documentation","title":"Calendar Export Module Documentation","text":""},{"location":"autodoc_src_backend_app_calendar_export_py_2025-06-01T06-26-50/#overview","title":"Overview","text":"<p>The Calendar Export module provides functionality for generating calendar files and managing calendar events for the Document Management System. It enables users to export document due dates as ICS calendar files and retrieve calendar events for specific time periods.</p>"},{"location":"autodoc_src_backend_app_calendar_export_py_2025-06-01T06-26-50/#dependencies","title":"Dependencies","text":"<ul> <li><code>ics</code>: Calendar and event creation</li> <li><code>sqlalchemy</code>: Database operations</li> <li><code>app.models.Document</code>: Document model</li> <li><code>datetime</code>: Date and time handling</li> <li><code>logging</code>: Application logging</li> </ul>"},{"location":"autodoc_src_backend_app_calendar_export_py_2025-06-01T06-26-50/#classes","title":"Classes","text":""},{"location":"autodoc_src_backend_app_calendar_export_py_2025-06-01T06-26-50/#calendarservice","title":"CalendarService","text":"<p>The main service class for calendar export functionality.</p>"},{"location":"autodoc_src_backend_app_calendar_export_py_2025-06-01T06-26-50/#constructor","title":"Constructor","text":"<pre><code>def __init__(self, db: Session)\n</code></pre> <p>Parameters: - <code>db</code> (Session): SQLAlchemy database session</p> <p>Description: Initializes the calendar service with a database session for document queries.</p>"},{"location":"autodoc_src_backend_app_calendar_export_py_2025-06-01T06-26-50/#methods","title":"Methods","text":""},{"location":"autodoc_src_backend_app_calendar_export_py_2025-06-01T06-26-50/#generate_calendar","title":"generate_calendar()","text":"<pre><code>def generate_calendar(self, document_ids: Optional[List[int]] = None) -&gt; Calendar\n</code></pre> <p>Parameters: - <code>document_ids</code> (Optional[List[int]]): List of specific document IDs to include. If None, includes all documents with due dates.</p> <p>Returns: - <code>Calendar</code>: ICS Calendar object containing document events</p> <p>Description: Generates a calendar with events for documents that have due dates. Each event includes: - Event name: Document type and title - Description: Sender, amount, status, and document ID - All-day event set to the due date</p> <p>Example: <pre><code>calendar_service = CalendarService(db_session)\ncalendar = calendar_service.generate_calendar([1, 2, 3])\n</code></pre></p>"},{"location":"autodoc_src_backend_app_calendar_export_py_2025-06-01T06-26-50/#generate_ics_file","title":"generate_ics_file()","text":"<pre><code>def generate_ics_file(self, document_ids: Optional[List[int]] = None) -&gt; str\n</code></pre> <p>Parameters: - <code>document_ids</code> (Optional[List[int]]): List of specific document IDs to include</p> <p>Returns: - <code>str</code>: ICS file content as a string</p> <p>Description: Generates ICS file content that can be saved to a file or sent as a response for calendar import.</p> <p>Example: <pre><code>ics_content = calendar_service.generate_ics_file()\nwith open('documents.ics', 'w') as f:\n    f.write(ics_content)\n</code></pre></p>"},{"location":"autodoc_src_backend_app_calendar_export_py_2025-06-01T06-26-50/#generate_upcoming_due_dates_calendar","title":"generate_upcoming_due_dates_calendar()","text":"<pre><code>def generate_upcoming_due_dates_calendar(self, days: int = 30) -&gt; Calendar\n</code></pre> <p>Parameters: - <code>days</code> (int): Number of days ahead to check for due dates (default: 30)</p> <p>Returns: - <code>Calendar</code>: Calendar object with upcoming due date events</p> <p>Description: Generates a calendar containing only documents with due dates within the specified number of days. Excludes documents with 'paid' status and orders results by due date.</p> <p>Example: <pre><code># Get calendar for next 7 days\nupcoming_calendar = calendar_service.generate_upcoming_due_dates_calendar(days=7)\n</code></pre></p>"},{"location":"autodoc_src_backend_app_calendar_export_py_2025-06-01T06-26-50/#generate_upcoming_due_dates_ics","title":"generate_upcoming_due_dates_ics()","text":"<pre><code>def generate_upcoming_due_dates_ics(self, days: int = 30) -&gt; str\n</code></pre> <p>Parameters: - <code>days</code> (int): Number of days ahead to check (default: 30)</p> <p>Returns: - <code>str</code>: ICS file content for upcoming due dates</p> <p>Description: Generates ICS file content for documents with upcoming due dates within the specified time period.</p>"},{"location":"autodoc_src_backend_app_calendar_export_py_2025-06-01T06-26-50/#get_events_for_month-async","title":"get_events_for_month() (Async)","text":"<pre><code>async def get_events_for_month(self, db, month: int, year: int)\n</code></pre> <p>Parameters: - <code>db</code>: Database session - <code>month</code> (int): Month (1-12) - <code>year</code> (int): Year</p> <p>Returns: - <code>List[Dict]</code>: List of event dictionaries containing id, title, due_date, and status</p> <p>Description: Asynchronous method that returns events for a specific month and year. Used by FastAPI endpoints.</p> <p>Example: <pre><code>events = await calendar_service.get_events_for_month(db, 12, 2023)\n</code></pre></p>"},{"location":"autodoc_src_backend_app_calendar_export_py_2025-06-01T06-26-50/#get_events_for_date-async","title":"get_events_for_date() (Async)","text":"<pre><code>async def get_events_for_date(self, db, date_str: str)\n</code></pre> <p>Parameters: - <code>db</code>: Database session - <code>date_str</code> (str): Date in YYYY-MM-DD format</p> <p>Returns: - <code>List[Dict]</code>: List of event dictionaries for the specified date</p> <p>Description: Asynchronous method that returns events for a specific date. Returns empty list if date format is invalid.</p> <p>Example: <pre><code>events = await calendar_service.get_events_for_date(db, \"2023-12-25\")\n</code></pre></p>"},{"location":"autodoc_src_backend_app_calendar_export_py_2025-06-01T06-26-50/#calendarexportservice","title":"CalendarExportService","text":"<pre><code>class CalendarExportService(CalendarService):\n    pass\n</code></pre> <p>Description: Backward-compatibility alias for <code>CalendarService</code>. Maintained for existing code that imports <code>CalendarExportService</code>.</p>"},{"location":"autodoc_src_backend_app_calendar_export_py_2025-06-01T06-26-50/#usage-examples","title":"Usage Examples","text":""},{"location":"autodoc_src_backend_app_calendar_export_py_2025-06-01T06-26-50/#basic-calendar-generation","title":"Basic Calendar Generation","text":"<pre><code>from app.calendar_export import CalendarService\nfrom sqlalchemy.orm import Session\n\n# Initialize service\ncalendar_service = CalendarService(db_session)\n\n# Generate calendar for all documents\ncalendar = calendar_service.generate_calendar()\n\n# Generate calendar for specific documents\nspecific_calendar = calendar_service.generate_calendar([1, 2, 3])\n\n# Get ICS file content\nics_content = calendar_service.generate_ics_file()\n</code></pre>"},{"location":"autodoc_src_backend_app_calendar_export_py_2025-06-01T06-26-50/#upcoming-due-dates","title":"Upcoming Due Dates","text":"<pre><code># Get calendar for next 14 days\nupcoming_calendar = calendar_service.generate_upcoming_due_dates_calendar(days=14)\n\n# Get ICS content for upcoming due dates\nupcoming_ics = calendar_service.generate_upcoming_due_dates_ics(days=7)\n</code></pre>"},{"location":"autodoc_src_backend_app_calendar_export_py_2025-06-01T06-26-50/#fastapi-integration","title":"FastAPI Integration","text":"<pre><code># In FastAPI endpoint\n@app.get(\"/calendar/month/{year}/{month}\")\nasync def get_month_events(year: int, month: int, db: Session = Depends(get_db)):\n    calendar_service = CalendarService(db)\n    events = await calendar_service.get_events_for_month(db, month, year)\n    return events\n</code></pre>"},{"location":"autodoc_src_backend_app_calendar_export_py_2025-06-01T06-26-50/#event-structure","title":"Event Structure","text":"<p>Each calendar event contains the following information:</p> <ul> <li>Name: <code>{document_type}: {title}</code></li> <li>Description:</li> </ul>"},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-05-31T16-05-41/","title":"autodoc src backend app cleanup vendor tenants py 2025 05 31T16 05 41","text":""},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-05-31T16-05-41/#vendor-tenant-cleanup-script","title":"Vendor Tenant Cleanup Script","text":""},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-05-31T16-05-41/#overview","title":"Overview","text":"<p>This cleanup script removes vendor companies that were incorrectly created as tenant entities. These companies should function as senders/vendors rather than recipients/tenants in the document processing system.</p>"},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-05-31T16-05-41/#purpose","title":"Purpose","text":"<p>The script addresses a data integrity issue where vendor companies were mistakenly registered as tenants, causing incorrect document routing and processing. It identifies these misclassified entities and removes them while preserving document data integrity.</p>"},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-05-31T16-05-41/#usage","title":"Usage","text":"<pre><code>python3 cleanup_vendor_tenants.py\n</code></pre>"},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-05-31T16-05-41/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.6+</li> <li>SQLAlchemy with async support</li> <li>Access to the application database</li> <li>Required application modules in the <code>src</code> directory</li> </ul>"},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-05-31T16-05-41/#script-components","title":"Script Components","text":""},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-05-31T16-05-41/#main-function","title":"Main Function","text":""},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-05-31T16-05-41/#cleanup_vendor_tenants","title":"<code>cleanup_vendor_tenants()</code>","text":"<p>Purpose: Asynchronous function that performs the complete cleanup operation.</p> <p>Process Flow:</p> <ol> <li>Identification: Searches for entities matching known vendor company names</li> <li>Impact Assessment: Identifies documents affected by vendor tenant removal</li> <li>Document Reset: Resets recipient fields for affected documents</li> <li>Entity Removal: Removes incorrectly classified vendor tenant entities</li> <li>Transaction Commit: Persists all changes to the database</li> </ol>"},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-05-31T16-05-41/#vendor-company-list","title":"Vendor Company List","text":"<p>The script targets the following known vendor companies:</p> Company Name Variations Hetzner Online GmbH Hetzner Team Blockonauts Blockonauts Impact Labs 21 Impact Labs AG Chainstack Pte. Chainstack GitBook GitBook (Company) Digital Ocean DigitalOcean Candoo Labs Candoo Labs (Company) Validity Labs Validity Labs (Company) DAT AG DAT AG (Company)"},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-05-31T16-05-41/#database-operations","title":"Database Operations","text":""},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-05-31T16-05-41/#query-operations","title":"Query Operations","text":"<ul> <li>Entity Search: Uses case-insensitive pattern matching on <code>name</code> and <code>alias</code> fields</li> <li>Document Impact: Identifies documents where <code>recipient</code> field matches vendor aliases</li> </ul>"},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-05-31T16-05-41/#modification-operations","title":"Modification Operations","text":"<ul> <li>Document Update: Sets <code>recipient</code> field to <code>NULL</code> for affected documents</li> <li>Entity Deletion: Removes vendor tenant entities from the database</li> </ul>"},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-05-31T16-05-41/#output-information","title":"Output Information","text":"<p>The script provides detailed console output including:</p> <ul> <li>\ud83d\udd0d Search progress and results</li> <li>\ud83d\udccb Impact analysis of affected documents</li> <li>\ud83d\udd04 Document reset operations</li> <li>\ud83d\uddd1\ufe0f Entity removal operations</li> <li>\ud83c\udf89 Completion summary with statistics</li> </ul>"},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-05-31T16-05-41/#error-handling","title":"Error Handling","text":"<ul> <li>Database operations are wrapped in async session management</li> <li>Transaction rollback occurs automatically on exceptions</li> <li>Console output provides clear status indicators</li> </ul>"},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-05-31T16-05-41/#post-execution-steps","title":"Post-Execution Steps","text":"<p>After successful cleanup:</p> <ol> <li>Navigate to Settings &gt; Automation</li> <li>Execute \"Run Batch Processing\"</li> <li>This will re-process documents with reset recipient fields</li> </ol>"},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-05-31T16-05-41/#database-schema-dependencies","title":"Database Schema Dependencies","text":""},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-05-31T16-05-41/#required-tables","title":"Required Tables","text":"<ul> <li><code>Entity</code>: Stores tenant/company information</li> <li><code>id</code>: Primary key</li> <li><code>name</code>: Company name</li> <li> <p><code>alias</code>: Company alias/short name</p> </li> <li> <p><code>Document</code>: Stores document metadata</p> </li> <li><code>id</code>: Primary key</li> <li><code>title</code>: Document title</li> <li><code>recipient</code>: Reference to entity alias</li> </ul>"},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-05-31T16-05-41/#relationships","title":"Relationships","text":"<ul> <li><code>Document.recipient</code> \u2192 <code>Entity.alias</code> (foreign key relationship)</li> </ul>"},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-05-31T16-05-41/#safety-features","title":"Safety Features","text":"<ul> <li>Read-before-write: Identifies and reports all changes before execution</li> <li>Impact assessment: Shows which documents will be affected</li> <li>Atomic transactions: All changes committed together or rolled back</li> <li>Detailed logging: Comprehensive output for audit trails</li> </ul>"},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-05-31T16-05-41/#exit-conditions","title":"Exit Conditions","text":"<ul> <li>Success: All vendor tenants removed, affected documents reset</li> <li>No Action: If no vendor companies found in tenant list</li> <li>Exception: Database errors result in transaction rollback</li> </ul>"},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-06-01T06-25-55/","title":"autodoc src backend app cleanup vendor tenants py 2025 06 01T06 25 55","text":""},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-06-01T06-25-55/#vendor-tenant-cleanup-script","title":"Vendor Tenant Cleanup Script","text":""},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-06-01T06-25-55/#overview","title":"Overview","text":"<p>This cleanup script identifies and removes vendor companies that were incorrectly created as tenant entities in the system. These companies should function as senders/vendors rather than recipients/tenants. The script also resets any documents that were using these incorrect tenant entities to allow for proper re-processing.</p>"},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-06-01T06-25-55/#purpose","title":"Purpose","text":"<ul> <li>Remove incorrectly categorized vendor companies from the tenant list</li> <li>Reset affected documents to allow re-processing with correct entity relationships</li> <li>Maintain data integrity by ensuring vendors and tenants are properly classified</li> </ul>"},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-06-01T06-25-55/#requirements","title":"Requirements","text":""},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-06-01T06-25-55/#dependencies","title":"Dependencies","text":"<ul> <li>Python 3.7+</li> <li>SQLAlchemy with async support</li> <li>asyncio (built-in)</li> <li>Application modules:</li> <li><code>app.database</code> - Database engine configuration</li> <li><code>app.models</code> - Entity and Document models</li> </ul>"},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-06-01T06-25-55/#database-models","title":"Database Models","text":"<p>The script expects the following model structure:</p> <ul> <li>Entity: Represents tenant/company entities</li> <li><code>id</code>: Primary key</li> <li><code>name</code>: Company name</li> <li><code>alias</code>: Company alias/identifier</li> <li>Document: Represents processed documents</li> <li><code>id</code>: Primary key</li> <li><code>title</code>: Document title</li> <li><code>recipient</code>: References entity alias</li> </ul>"},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-06-01T06-25-55/#usage","title":"Usage","text":""},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-06-01T06-25-55/#command-line-execution","title":"Command Line Execution","text":"<pre><code>python3 cleanup_vendor_tenants.py\n</code></pre>"},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-06-01T06-25-55/#programmatic-usage","title":"Programmatic Usage","text":"<pre><code>import asyncio\nfrom cleanup_vendor_tenants import cleanup_vendor_tenants\n\n# Run the cleanup process\nawait cleanup_vendor_tenants()\n</code></pre>"},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-06-01T06-25-55/#function-reference","title":"Function Reference","text":""},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-06-01T06-25-55/#cleanup_vendor_tenants","title":"<code>cleanup_vendor_tenants()</code>","text":"<p>Description: Main cleanup function that removes vendor companies incorrectly created as tenants.</p> <p>Parameters: None</p> <p>Returns: None</p> <p>Behavior: 1. Searches for entities matching known vendor company names 2. Identifies documents using these entities as recipients 3. Resets affected documents' recipient fields 4. Removes vendor tenant entities from the database 5. Commits all changes in a single transaction</p>"},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-06-01T06-25-55/#configuration","title":"Configuration","text":""},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-06-01T06-25-55/#vendor-company-list","title":"Vendor Company List","text":"<p>The script includes a predefined list of known vendor companies:</p> <pre><code>vendor_names = [\n    \"Hetzner Online GmbH\", \"Hetzner\",\n    \"Team Blockonauts\", \"Blockonauts\", \n    \"Impact Labs\", \"21 Impact Labs AG\",\n    \"Chainstack Pte.\", \"Chainstack\",\n    \"GitBook\", \"GitBook (Company)\",\n    \"Digital Ocean\", \"DigitalOcean\",\n    \"Candoo Labs\", \"Candoo Labs (Company)\",\n    \"Validity Labs\", \"Validity Labs (Company)\",\n    \"DAT AG\", \"DAT AG (Company)\"\n]\n</code></pre> <p>To modify this list, edit the <code>vendor_names</code> array in the <code>cleanup_vendor_tenants()</code> function.</p>"},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-06-01T06-25-55/#output-examples","title":"Output Examples","text":""},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-06-01T06-25-55/#successful-cleanup","title":"Successful Cleanup","text":"<pre><code>\ud83d\udd0d Searching for vendor companies incorrectly created as tenants...\nFound 3 vendor companies incorrectly created as tenants:\n  - ID: 15, Name: Hetzner Online GmbH, Alias: hetzner\n  - ID: 23, Name: GitBook, Alias: gitbook\n  - ID: 31, Name: DigitalOcean, Alias: digitalocean\n\n\ud83d\udccb Found 5 documents using vendor tenants as recipients:\n  - Doc ID: 101, Title: Invoice #2024-001 from Hetzner Online GmbH..., Using: hetzner\n  - Doc ID: 102, Title: Service Agreement - GitBook Premium..., Using: gitbook\n\n\ud83d\udd04 Resetting recipient field for 5 documents...\n  \u2713 Reset document 101\n  \u2713 Reset document 102\n\n\ud83d\uddd1\ufe0f  Removing 3 vendor tenant entities...\n  \u2713 Removed tenant: Hetzner Online GmbH (hetzner)\n  \u2713 Removed tenant: GitBook (gitbook)\n  \u2713 Removed tenant: DigitalOcean (digitalocean)\n\n\ud83c\udf89 Cleanup completed successfully!\n   - Removed 3 vendor tenant entities\n   - Reset 5 document recipients for re-processing\n\n\ud83d\udca1 Tip: Run 'Run Batch Processing' in Settings &gt; Automation to re-process these documents\n</code></pre>"},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-06-01T06-25-55/#no-issues-found","title":"No Issues Found","text":"<pre><code>\ud83d\udd0d Searching for vendor companies incorrectly created as tenants...\n\u2705 No vendor companies found in tenant list - all clean!\n</code></pre>"},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-06-01T06-25-55/#error-handling","title":"Error Handling","text":"<p>The script uses async database sessions with automatic transaction management. If any error occurs during the process, the database transaction will be rolled back, maintaining data consistency.</p>"},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-06-01T06-25-55/#post-cleanup-actions","title":"Post-Cleanup Actions","text":"<p>After running the cleanup script:</p> <ol> <li>Re-process Documents: Use the application's batch processing feature to re-process documents with reset recipients</li> <li>Verify Results: Check that vendor companies no longer appear in tenant lists</li> <li>Monitor Logs: Review application logs to ensure proper entity classification in future document processing</li> </ol>"},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-06-01T06-25-55/#safety-considerations","title":"Safety Considerations","text":"<ul> <li>Backup Database: Always backup your database before running cleanup scripts</li> <li>Test Environment: Run the script in a test environment first</li> <li>Review Output: Carefully review the script output before confirming changes</li> <li>Transaction Safety: The script uses database transactions to ensure atomicity</li> </ul>"},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-06-01T06-25-55/#troubleshooting","title":"Troubleshooting","text":""},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-06-01T06-25-55/#common-issues","title":"Common Issues","text":"<ol> <li>Import Errors: Ensure the <code>src</code> directory structure matches the expected path</li> <li>Database Connection: Verify database engine configuration in <code>app.database</code></li> <li>Permission Issues: Ensure the script has necessary database permissions for DELETE operations</li> </ol>"},{"location":"autodoc_src_backend_app_cleanup_vendor_tenants_py_2025-06-01T06-25-55/#debugging","title":"Debugging","text":"<p>Add logging or print statements to track script execution:</p> <pre><code>import logging\nlogging.basicConfig(level=logging.DEBUG)\n</code></pre>"},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-05-31T16-04-11/","title":"autodoc src backend app colpali embedder py 2025 05 31T16 04 11","text":""},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-05-31T16-04-11/#colpali-embedding-helper","title":"ColPali Embedding Helper","text":"<p>A Python module that provides a singleton wrapper for the ColPali vision-language model, enabling efficient document image embedding with lazy model loading.</p>"},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-05-31T16-04-11/#overview","title":"Overview","text":"<p>This module encapsulates the ColPali model to ensure it's instantiated only once per process, which is crucial given the model's computational requirements. It provides both multi-vector patch embeddings and global pooled vectors for document page images.</p>"},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-05-31T16-04-11/#features","title":"Features","text":"<ul> <li>Lazy Loading: Heavy VLM model is loaded only when first needed</li> <li>Singleton Pattern: Ensures single model instance per process</li> <li>Dual Embedding Types: Returns both patch-level and document-level embeddings</li> <li>Automatic Caching: Models are downloaded from HuggingFace and cached locally</li> <li>Flexible Configuration: Environment variable support for containerized deployments</li> </ul>"},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-05-31T16-04-11/#installation","title":"Installation","text":"<pre><code>pip install colpali-engine torch pillow\n</code></pre>"},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-05-31T16-04-11/#configuration","title":"Configuration","text":"<p>The module supports configuration through environment variables:</p> Variable Default Description <code>COLPALI_MODEL</code> <code>\"vidore/colpali-v1.1\"</code> HuggingFace model identifier <code>HF_LOCAL_ONLY</code> <code>\"0\"</code> Use only locally cached models (1 to enable)"},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-05-31T16-04-11/#api-reference","title":"API Reference","text":""},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-05-31T16-04-11/#colpaliembedder","title":"ColPaliEmbedder","text":"<p>A singleton class that wraps the ColPali model for efficient embedding generation.</p>"},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-05-31T16-04-11/#constructor","title":"Constructor","text":"<pre><code>ColPaliEmbedder(model_name: str = _DEFAULT_MODEL, device: str = _DEVICE)\n</code></pre> <p>Parameters: - <code>model_name</code> (str): HuggingFace model identifier - <code>device</code> (str): Target device (\"cuda\" or \"cpu\", auto-detected by default)</p>"},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-05-31T16-04-11/#methods","title":"Methods","text":""},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-05-31T16-04-11/#embed_page","title":"embed_page()","text":"<pre><code>@torch.inference_mode()\ndef embed_page(page_image: Image.Image) -&gt; Tuple[Sequence[float], Sequence[float]]\n</code></pre> <p>Generates embeddings for a document page image.</p> <p>Parameters: - <code>page_image</code> (PIL.Image.Image): Input page image in PIL format</p> <p>Returns: - <code>Tuple[Sequence[float], Sequence[float]]</code>:    - <code>multi_vectors</code>: Patch-level embeddings, shape (num_patches, dim) - typically (196, 128)   - <code>global_vector</code>: Document-level pooled embedding, shape (dim,) - typically (128,)</p> <p>Example: <pre><code>from PIL import Image\n\nembedder = ColPaliEmbedder()\nimage = Image.open(\"document_page.jpg\")\nmulti_vecs, global_vec = embedder.embed_page(image)\n</code></pre></p>"},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-05-31T16-04-11/#embed_text","title":"embed_text()","text":"<pre><code>@torch.inference_mode()\ndef embed_text(text: str) -&gt; Sequence[float]\n</code></pre> <p>Generates embeddings for text queries.</p> <p>Parameters: - <code>text</code> (str): Input text query</p> <p>Returns: - <code>Sequence[float]</code>: Global text embedding, shape (128,)</p> <p>Example: <pre><code>embedder = ColPaliEmbedder()\nquery_embedding = embedder.embed_text(\"What is the total revenue?\")\n</code></pre></p>"},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-05-31T16-04-11/#utility-functions","title":"Utility Functions","text":""},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-05-31T16-04-11/#get_colpali_embeddings","title":"get_colpali_embeddings()","text":"<pre><code>def get_colpali_embeddings(page_path: str | Path) -&gt; Tuple[Sequence[float], Sequence[float]]\n</code></pre> <p>Convenience function that loads an image from file and generates embeddings.</p> <p>Parameters: - <code>page_path</code> (str | Path): Path to the image file</p> <p>Returns: - Same as <code>embed_page()</code>: tuple of (multi_vectors, global_vector)</p> <p>Example: <pre><code>multi_vecs, global_vec = get_colpali_embeddings(\"document.png\")\n</code></pre></p>"},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-05-31T16-04-11/#usage-examples","title":"Usage Examples","text":""},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-05-31T16-04-11/#basic-usage","title":"Basic Usage","text":"<pre><code>from colpali_embedder import ColPaliEmbedder\nfrom PIL import Image\n\n# Initialize embedder (singleton)\nembedder = ColPaliEmbedder()\n\n# Process a document page\nimage = Image.open(\"invoice.jpg\").convert(\"RGB\")\nmulti_vectors, global_vector = embedder.embed_page(image)\n\n# Process a text query\nquery_embedding = embedder.embed_text(\"Find the invoice total\")\n\nprint(f\"Multi-vector shape: {multi_vectors.shape}\")  # e.g., (196, 128)\nprint(f\"Global vector shape: {global_vector.shape}\")   # e.g., (128,)\nprint(f\"Query embedding shape: {query_embedding.shape}\") # e.g., (128,)\n</code></pre>"},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-05-31T16-04-11/#batch-processing","title":"Batch Processing","text":"<pre><code>from pathlib import Path\n\nembedder = ColPaliEmbedder()\ndocument_paths = Path(\"documents/\").glob(\"*.jpg\")\n\nembeddings = []\nfor doc_path in document_paths:\n    multi_vecs, global_vec = get_colpali_embeddings(doc_path)\n    embeddings.append({\n        'path': doc_path,\n        'multi_vectors': multi_vecs,\n        'global_vector': global_vec\n    })\n</code></pre>"},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-05-31T16-04-11/#environment-configuration","title":"Environment Configuration","text":"<pre><code># Use a different model\nexport COLPALI_MODEL=\"custom/colpali-model\"\n\n# Enable local-only mode (requires pre-downloaded weights)\nexport HF_LOCAL_ONLY=\"1\"\n\npython your_script.py\n</code></pre>"},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-05-31T16-04-11/#technical-details","title":"Technical Details","text":""},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-05-31T16-04-11/#model-architecture","title":"Model Architecture","text":"<ul> <li>Base Model: ColPali vision-language model from vidore/colpali-v1.1</li> <li>Multi-Vector Output: Patch-level embeddings for fine-grained retrieval</li> <li>Global Vector: Mean-pooled document embedding for efficient similarity search</li> <li>Text Processing: Query embedding generation for cross-modal retrieval</li> </ul>"},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-05-31T16-04-11/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Device Selection: Automatically uses CUDA if available, falls back to CPU</li> <li>Memory Optimization: Uses <code>low_cpu_mem_usage=True</code> for efficient loading</li> <li>Precision: Uses <code>float16</code> on CPU, <code>bfloat16</code> on GPU for memory efficiency</li> <li>Singleton Pattern: Prevents multiple model instances in memory</li> </ul>"},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-05-31T16-04-11/#file-system-cache","title":"File System Cache","text":"<p>Models are automatically cached by HuggingFace Hub in: <pre><code>~/.cache/huggingface/\n</code></pre></p>"},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-05-31T16-04-11/#dependencies","title":"Dependencies","text":"<ul> <li><code>torch</code>: PyTorch framework</li> <li>`</li> </ul>"},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-06-01T06-24-24/","title":"autodoc src backend app colpali embedder py 2025 06 01T06 24 24","text":""},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-06-01T06-24-24/#colpali-embedding-helper","title":"ColPali Embedding Helper","text":"<p>A Python module that provides a convenient wrapper around the ColPali vision-language model for generating embeddings from document page images and text queries.</p>"},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-06-01T06-24-24/#overview","title":"Overview","text":"<p>This module encapsulates the ColPali model loading and embedding generation process, implementing a singleton pattern to ensure the heavy VLM (Vision-Language Model) is instantiated only once per process. It returns both multi-vector patch embeddings and global pooled vectors for document page images.</p>"},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-06-01T06-24-24/#features","title":"Features","text":"<ul> <li>Lazy Model Loading: Models are loaded only when first needed</li> <li>Singleton Pattern: Ensures single model instance per process</li> <li>Dual Embedding Types: Supports both multi-vector and global embeddings</li> <li>Cross-Modal: Handles both image and text inputs</li> <li>Device Flexibility: Automatically selects CUDA or CPU</li> <li>Configuration via Environment: Docker-compose friendly configuration</li> </ul>"},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-06-01T06-24-24/#installation","title":"Installation","text":"<pre><code>pip install colpali-engine torch pillow\n</code></pre> <p>The ColPali model will be automatically downloaded from HuggingFace on first run and cached in <code>~/.cache/huggingface/</code>.</p>"},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-06-01T06-24-24/#configuration","title":"Configuration","text":"<p>The module supports configuration via environment variables:</p> Variable Default Description <code>COLPALI_MODEL</code> <code>vidore/colpali-v1.1</code> HuggingFace model identifier <code>HF_LOCAL_ONLY</code> <code>0</code> Set to <code>1</code> to use only locally cached models"},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-06-01T06-24-24/#api-reference","title":"API Reference","text":""},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-06-01T06-24-24/#colpaliembedder","title":"ColPaliEmbedder","text":"<p>Main class that wraps the ColPali model functionality.</p>"},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-06-01T06-24-24/#constructor","title":"Constructor","text":"<pre><code>ColPaliEmbedder(model_name: str = _DEFAULT_MODEL, device: str = _DEVICE)\n</code></pre> <p>Parameters: - <code>model_name</code> (str): HuggingFace model identifier - <code>device</code> (str): Target device ('cuda' or 'cpu')</p>"},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-06-01T06-24-24/#methods","title":"Methods","text":""},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-06-01T06-24-24/#embed_page","title":"embed_page()","text":"<pre><code>@torch.inference_mode()\ndef embed_page(page_image: Image.Image) -&gt; Tuple[Sequence[float], Sequence[float]]\n</code></pre> <p>Generates embeddings for a document page image.</p> <p>Parameters: - <code>page_image</code> (PIL.Image.Image): Input page image in PIL format</p> <p>Returns: - <code>Tuple[Sequence[float], Sequence[float]]</code>: A tuple containing:   - <code>multi_vectors</code>: Multi-vector patch embeddings, shape (num_patches, dim) - typically (196, 128)   - <code>global_vector</code>: Pooled document embedding, shape (dim,) - typically (128,)</p> <p>Example: <pre><code>from PIL import Image\n\nembedder = ColPaliEmbedder()\nimage = Image.open(\"document_page.jpg\").convert(\"RGB\")\nmulti_vecs, global_vec = embedder.embed_page(image)\n</code></pre></p>"},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-06-01T06-24-24/#embed_text","title":"embed_text()","text":"<pre><code>@torch.inference_mode()\ndef embed_text(text: str) -&gt; Sequence[float]\n</code></pre> <p>Generates a global embedding for text queries.</p> <p>Parameters: - <code>text</code> (str): Input text query</p> <p>Returns: - <code>Sequence[float]</code>: 128-dimensional global embedding vector</p> <p>Example: <pre><code>embedder = ColPaliEmbedder()\nquery_embedding = embedder.embed_text(\"What is the total revenue?\")\n</code></pre></p>"},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-06-01T06-24-24/#convenience-functions","title":"Convenience Functions","text":""},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-06-01T06-24-24/#get_colpali_embeddings","title":"get_colpali_embeddings()","text":"<pre><code>def get_colpali_embeddings(page_path: str | Path) -&gt; Tuple[Sequence[float], Sequence[float]]\n</code></pre> <p>Utility function that loads an image from file and generates embeddings.</p> <p>Parameters: - <code>page_path</code> (str | Path): Path to the image file</p> <p>Returns: - <code>Tuple[Sequence[float], Sequence[float]]</code>: Same as <code>embed_page()</code> method</p> <p>Example: <pre><code>multi_vecs, global_vec = get_colpali_embeddings(\"path/to/document.png\")\n</code></pre></p>"},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-06-01T06-24-24/#usage-examples","title":"Usage Examples","text":""},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-06-01T06-24-24/#basic-usage","title":"Basic Usage","text":"<pre><code>from colpali_embedder import ColPaliEmbedder\nfrom PIL import Image\n\n# Initialize embedder (singleton - safe to call multiple times)\nembedder = ColPaliEmbedder()\n\n# Process a document page\npage_image = Image.open(\"document.jpg\").convert(\"RGB\")\npatch_embeddings, document_embedding = embedder.embed_page(page_image)\n\n# Process a text query\nquery_embedding = embedder.embed_text(\"Find financial data\")\n</code></pre>"},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-06-01T06-24-24/#using-environment-configuration","title":"Using Environment Configuration","text":"<pre><code># Set custom model\nexport COLPALI_MODEL=\"custom/colpali-model\"\n\n# Use local files only (no downloads)\nexport HF_LOCAL_ONLY=1\n\npython your_script.py\n</code></pre>"},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-06-01T06-24-24/#docker-compose-integration","title":"Docker Compose Integration","text":"<pre><code>services:\n  app:\n    environment:\n      - COLPALI_MODEL=vidore/colpali-v1.1\n      - HF_LOCAL_ONLY=0\n</code></pre>"},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-06-01T06-24-24/#technical-details","title":"Technical Details","text":""},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-06-01T06-24-24/#model-architecture","title":"Model Architecture","text":"<ul> <li>Input: RGB images and text queries</li> <li>Output Dimensions: </li> <li>Multi-vector: (196, 128) for typical document pages</li> <li>Global vector: (128,) for both images and text</li> <li>Precision: float16 (CPU) / bfloat16 (GPU) for inference, float32 for output</li> </ul>"},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-06-01T06-24-24/#memory-optimization","title":"Memory Optimization","text":"<ul> <li>Uses <code>low_cpu_mem_usage=True</code> for efficient loading</li> <li>Implements <code>@torch.inference_mode()</code> for reduced memory overhead</li> <li>Automatic device selection and tensor movement</li> </ul>"},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-06-01T06-24-24/#singleton-implementation","title":"Singleton Implementation","text":"<p>The class uses a singleton pattern to prevent multiple model instances: - Model loaded once per process - Thread-safe initialization guard - Persistent across multiple instantiations</p>"},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-06-01T06-24-24/#dependencies","title":"Dependencies","text":"<ul> <li><code>torch</code>: PyTorch framework</li> <li><code>PIL</code>: Python Imaging Library</li> <li><code>colpali-engine</code>: ColPali model wrapper</li> <li><code>huggingface_hub</code>: Model downloading and caching</li> </ul>"},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-06-01T06-24-24/#error-handling","title":"Error Handling","text":"<p>The module handles common scenarios: - Automatic fallback to CPU if CUDA unavailable - Graceful handling of missing local files when <code>HF_LOCAL_ONLY=1</code> - PIL image format conversion to RGB</p>"},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-06-01T06-24-24/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>First call incurs model loading overhead</li> <li>Subsequent calls are fast due to singleton pattern</li> <li> </li> </ul>"},{"location":"autodoc_src_backend_app_colpali_embedder_py_2025-06-01T06-24-24/#gpu-usage-recommended-for-better-performance","title":"GPU usage recommended for better performance","text":""},{"location":"autodoc_src_backend_app_config_py_2025-05-31T15-58-48/","title":"autodoc src backend app config py 2025 05 31T15 58 48","text":""},{"location":"autodoc_src_backend_app_config_py_2025-05-31T15-58-48/#configuration-management-module","title":"Configuration Management Module","text":""},{"location":"autodoc_src_backend_app_config_py_2025-05-31T15-58-48/#overview","title":"Overview","text":"<p>The configuration management module provides centralized settings management for the Document Management System. It handles database connections, folder monitoring, LLM integration, authentication, and various feature flags through environment variables and configuration files.</p>"},{"location":"autodoc_src_backend_app_config_py_2025-05-31T15-58-48/#dependencies","title":"Dependencies","text":"<ul> <li>pydantic: For settings validation and management</li> <li>pydantic_settings: For Pydantic v2 compatibility (fallback)</li> <li>os: For environment variable access and file path operations</li> </ul>"},{"location":"autodoc_src_backend_app_config_py_2025-05-31T15-58-48/#classes","title":"Classes","text":""},{"location":"autodoc_src_backend_app_config_py_2025-05-31T15-58-48/#settings","title":"<code>Settings</code>","text":"<p>A Pydantic-based settings class that manages all application configuration parameters.</p> <p>Inheritance: <code>BaseSettings</code></p>"},{"location":"autodoc_src_backend_app_config_py_2025-05-31T15-58-48/#configuration-categories","title":"Configuration Categories","text":""},{"location":"autodoc_src_backend_app_config_py_2025-05-31T15-58-48/#database-settings","title":"Database Settings","text":"Field Type Default Description <code>DATABASE_URL</code> <code>str \\| None</code> <code>$DATABASE_URL</code> Database connection URL from environment <code>DATABASE_PATH</code> <code>str</code> <code>{cwd}/documents.db</code> SQLite database file path"},{"location":"autodoc_src_backend_app_config_py_2025-05-31T15-58-48/#folder-monitoring","title":"Folder Monitoring","text":"Field Type Default Description <code>WATCH_FOLDER</code> <code>str</code> <code>~/Documents/Inbox</code> Directory path for monitoring new documents"},{"location":"autodoc_src_backend_app_config_py_2025-05-31T15-58-48/#llm-large-language-model-settings","title":"LLM (Large Language Model) Settings","text":"Field Type Default Description <code>LLM_MODEL</code> <code>str</code> <code>\"gwen2.5\"</code> Default LLM model identifier <code>LLM_API_KEY</code> <code>str</code> <code>$LLM_API_KEY</code> API key for LLM service authentication <code>LLM_API_URL</code> <code>str</code> <code>\"http://localhost:11434/api/generate\"</code> LLM service endpoint URL"},{"location":"autodoc_src_backend_app_config_py_2025-05-31T15-58-48/#authentication-settings","title":"Authentication Settings","text":"Field Type Default Description <code>SECRET_KEY</code> <code>str</code> <code>$SECRET_KEY</code> or default hash JWT token signing secret <code>ALGORITHM</code> <code>str</code> <code>\"HS256\"</code> JWT signing algorithm <code>ACCESS_TOKEN_EXPIRE_MINUTES</code> <code>int</code> <code>30</code> Token expiration time in minutes"},{"location":"autodoc_src_backend_app_config_py_2025-05-31T15-58-48/#feature-flags","title":"Feature Flags","text":"Field Type Default Description <code>NOTIFICATION_ENABLED</code> <code>bool</code> <code>True</code> Enable/disable system notifications <code>AUTO_OCR</code> <code>bool</code> <code>True</code> Enable automatic OCR processing <code>AUTO_TAGGING</code> <code>bool</code> <code>True</code> Enable automatic document tagging"},{"location":"autodoc_src_backend_app_config_py_2025-05-31T15-58-48/#application-settings","title":"Application Settings","text":"Field Type Default Description <code>DEFAULT_CURRENCY</code> <code>str</code> <code>$DEFAULT_CURRENCY</code> or <code>\"USD\"</code> Default currency for financial documents <code>HOSTFS_ROOT</code> <code>str</code> <code>$HOSTFS_ROOT</code> or <code>\"/hostfs\"</code> Host filesystem mount point in containers"},{"location":"autodoc_src_backend_app_config_py_2025-05-31T15-58-48/#optional-integration-settings","title":"Optional Integration Settings","text":"Field Type Default Description <code>hostfs_mount</code> <code>str \\| None</code> <code>None</code> Alternative host filesystem mount path <code>archive_folder</code> <code>str \\| None</code> <code>None</code> Document archive directory <code>ollama_base_url</code> <code>str \\| None</code> <code>None</code> Ollama service base URL <code>litellm_url</code> <code>str \\| None</code> <code>None</code> LiteLLM service URL <code>litellm_api</code> <code>str \\| None</code> <code>None</code> LiteLLM API endpoint"},{"location":"autodoc_src_backend_app_config_py_2025-05-31T15-58-48/#configuration-class","title":"Configuration Class","text":"<p>The inner <code>Config</code> class defines Pydantic behavior:</p> <ul> <li><code>env_file</code>: <code>\".env\"</code> - Loads environment variables from <code>.env</code> file</li> <li><code>env_file_encoding</code>: <code>\"utf-8\"</code> - File encoding for environment file</li> <li><code>extra</code>: <code>\"ignore\"</code> - Ignores unknown fields without raising errors</li> </ul>"},{"location":"autodoc_src_backend_app_config_py_2025-05-31T15-58-48/#module-variables","title":"Module Variables","text":""},{"location":"autodoc_src_backend_app_config_py_2025-05-31T15-58-48/#settings_1","title":"<code>settings</code>","text":"<p>Type: <code>Settings</code></p> <p>Global settings instance providing access to all configuration parameters throughout the application.</p> <p>Usage: <pre><code>from config import settings\n\n# Access database URL\ndb_url = settings.DATABASE_URL\n\n# Check if OCR is enabled\nif settings.AUTO_OCR:\n    # Perform OCR processing\n    pass\n</code></pre></p>"},{"location":"autodoc_src_backend_app_config_py_2025-05-31T15-58-48/#compatibility-notes","title":"Compatibility Notes","text":"<p>The module includes a compatibility layer for Pydantic versions:</p> <ul> <li>Pydantic &lt; 2.0: Uses <code>pydantic.BaseSettings</code></li> <li>Pydantic \u2265 2.0: Uses <code>pydantic_settings.BaseSettings</code></li> </ul> <p>This ensures the module works across different Pydantic versions without modification.</p>"},{"location":"autodoc_src_backend_app_config_py_2025-05-31T15-58-48/#environment-variables","title":"Environment Variables","text":"<p>The following environment variables can be used to configure the application:</p> Variable Purpose Required <code>DATABASE_URL</code> Database connection string No <code>LLM_API_KEY</code> LLM service authentication No <code>LLM_API_URL</code> Custom LLM endpoint No <code>SECRET_KEY</code> JWT signing secret Recommended <code>DEFAULT_CURRENCY</code> Default currency code No <code>HOSTFS_ROOT</code> Container filesystem root No"},{"location":"autodoc_src_backend_app_config_py_2025-05-31T15-58-48/#usage-examples","title":"Usage Examples","text":""},{"location":"autodoc_src_backend_app_config_py_2025-05-31T15-58-48/#basic-configuration-access","title":"Basic Configuration Access","text":"<pre><code>from config import settings\n\n# Database configuration\nif settings.DATABASE_URL:\n    # Use provided database URL\n    db_connection = create_engine(settings.DATABASE_URL)\nelse:\n    # Use local SQLite database\n    db_connection = create_engine(f\"sqlite:///{settings.DATABASE_PATH}\")\n</code></pre>"},{"location":"autodoc_src_backend_app_config_py_2025-05-31T15-58-48/#feature-flag-usage","title":"Feature Flag Usage","text":"<pre><code>from config import settings\n\ndef process_document(document):\n    if settings.AUTO_OCR:\n        text = perform_ocr(document)\n\n    if settings.AUTO_TAGGING:\n        tags = generate_tags(document)\n\n    if settings.NOTIFICATION_ENABLED:\n        send_notification(\"Document processed\")\n</code></pre>"},{"location":"autodoc_src_backend_app_config_py_2025-05-31T15-58-48/#environment-file-configuration","title":"Environment File Configuration","text":"<p>Create a <code>.env</code> file in your project root:</p> <p>```env DATABASE_URL=postgresql://user:pass@localhost/docms LLM_API_KEY=your-api-key-here SECRET_KEY=your-secret-key-here DEFAULT_CURRENCY=EUR</p>"},{"location":"autodoc_src_backend_app_config_py_2025-06-01T06-19-14/","title":"autodoc src backend app config py 2025 06 01T06 19 14","text":""},{"location":"autodoc_src_backend_app_config_py_2025-06-01T06-19-14/#configuration-management-module","title":"Configuration Management Module","text":""},{"location":"autodoc_src_backend_app_config_py_2025-06-01T06-19-14/#overview","title":"Overview","text":"<p>The configuration management module provides centralized settings management for the Document Management System. It leverages Pydantic for configuration validation and supports loading settings from environment variables and <code>.env</code> files.</p>"},{"location":"autodoc_src_backend_app_config_py_2025-06-01T06-19-14/#module-structure","title":"Module Structure","text":""},{"location":"autodoc_src_backend_app_config_py_2025-06-01T06-19-14/#classes","title":"Classes","text":""},{"location":"autodoc_src_backend_app_config_py_2025-06-01T06-19-14/#settings","title":"<code>Settings</code>","text":"<p>A Pydantic-based configuration class that manages all application settings with type validation and environment variable integration.</p> <p>Inheritance: <code>BaseSettings</code> (from Pydantic)</p>"},{"location":"autodoc_src_backend_app_config_py_2025-06-01T06-19-14/#configuration-categories","title":"Configuration Categories","text":""},{"location":"autodoc_src_backend_app_config_py_2025-06-01T06-19-14/#database-configuration","title":"Database Configuration","text":"Setting Type Default Description <code>DATABASE_URL</code> <code>str \\| None</code> Environment variable Primary database connection URL <code>DATABASE_PATH</code> <code>str</code> <code>{cwd}/documents.db</code> SQLite database file path"},{"location":"autodoc_src_backend_app_config_py_2025-06-01T06-19-14/#file-monitoring","title":"File Monitoring","text":"Setting Type Default Description <code>WATCH_FOLDER</code> <code>str</code> <code>~/Documents/Inbox</code> Directory monitored for new documents"},{"location":"autodoc_src_backend_app_config_py_2025-06-01T06-19-14/#llm-integration","title":"LLM Integration","text":"Setting Type Default Description <code>LLM_MODEL</code> <code>str</code> <code>\"gwen2.5\"</code> Large Language Model identifier <code>LLM_API_KEY</code> <code>str</code> Environment variable API authentication key <code>LLM_API_URL</code> <code>str</code> <code>\"http://localhost:11434/api/generate\"</code> LLM service endpoint"},{"location":"autodoc_src_backend_app_config_py_2025-06-01T06-19-14/#authentication-security","title":"Authentication &amp; Security","text":"Setting Type Default Description <code>SECRET_KEY</code> <code>str</code> Default JWT key Application secret for token signing <code>ALGORITHM</code> <code>str</code> <code>\"HS256\"</code> JWT signing algorithm <code>ACCESS_TOKEN_EXPIRE_MINUTES</code> <code>int</code> <code>30</code> Token expiration duration"},{"location":"autodoc_src_backend_app_config_py_2025-06-01T06-19-14/#feature-toggles","title":"Feature Toggles","text":"Setting Type Default Description <code>NOTIFICATION_ENABLED</code> <code>bool</code> <code>True</code> Enable system notifications <code>AUTO_OCR</code> <code>bool</code> <code>True</code> Automatic OCR processing <code>AUTO_TAGGING</code> <code>bool</code> <code>True</code> Automatic document tagging"},{"location":"autodoc_src_backend_app_config_py_2025-06-01T06-19-14/#system-configuration","title":"System Configuration","text":"Setting Type Default Description <code>DEFAULT_CURRENCY</code> <code>str</code> <code>\"USD\"</code> Default currency for financial documents <code>HOSTFS_ROOT</code> <code>str</code> <code>\"/hostfs\"</code> Container filesystem mount point"},{"location":"autodoc_src_backend_app_config_py_2025-06-01T06-19-14/#optional-extensions","title":"Optional Extensions","text":"Setting Type Default Description <code>hostfs_mount</code> <code>str \\| None</code> <code>None</code> Alternative filesystem mount <code>archive_folder</code> <code>str \\| None</code> <code>None</code> Document archive location <code>ollama_base_url</code> <code>str \\| None</code> <code>None</code> Ollama service URL <code>litellm_url</code> <code>str \\| None</code> <code>None</code> LiteLLM service endpoint <code>litellm_api</code> <code>str \\| None</code> <code>None</code> LiteLLM API configuration"},{"location":"autodoc_src_backend_app_config_py_2025-06-01T06-19-14/#usage","title":"Usage","text":""},{"location":"autodoc_src_backend_app_config_py_2025-06-01T06-19-14/#basic-usage","title":"Basic Usage","text":"<pre><code>from config import settings\n\n# Access configuration values\ndb_url = settings.DATABASE_URL\nwatch_dir = settings.WATCH_FOLDER\nllm_model = settings.LLM_MODEL\n</code></pre>"},{"location":"autodoc_src_backend_app_config_py_2025-06-01T06-19-14/#environment-variables","title":"Environment Variables","text":"<p>The module supports configuration through environment variables:</p> <pre><code>export DATABASE_URL=\"postgresql://user:pass@localhost/docs\"\nexport LLM_API_KEY=\"your-api-key\"\nexport SECRET_KEY=\"your-secret-key\"\nexport DEFAULT_CURRENCY=\"EUR\"\n</code></pre>"},{"location":"autodoc_src_backend_app_config_py_2025-06-01T06-19-14/#environment-file","title":"Environment File","text":"<p>Create a <code>.env</code> file in your project root:</p> <pre><code>DATABASE_URL=postgresql://user:pass@localhost/docs\nLLM_API_KEY=your-api-key\nSECRET_KEY=your-secret-key\nDEFAULT_CURRENCY=EUR\nNOTIFICATION_ENABLED=false\n</code></pre>"},{"location":"autodoc_src_backend_app_config_py_2025-06-01T06-19-14/#compatibility","title":"Compatibility","text":""},{"location":"autodoc_src_backend_app_config_py_2025-06-01T06-19-14/#pydantic-version-support","title":"Pydantic Version Support","text":"<p>The module includes a compatibility layer for Pydantic v1 and v2:</p> <ul> <li>Pydantic v1.x: Uses <code>pydantic.BaseSettings</code></li> <li>Pydantic v2.x: Uses <code>pydantic_settings.BaseSettings</code></li> </ul> <p>This ensures seamless operation across different Pydantic versions.</p>"},{"location":"autodoc_src_backend_app_config_py_2025-06-01T06-19-14/#configuration-behavior","title":"Configuration Behavior","text":""},{"location":"autodoc_src_backend_app_config_py_2025-06-01T06-19-14/#environment-variable-priority","title":"Environment Variable Priority","text":"<p>Settings are resolved in the following order:</p> <ol> <li>Explicitly set environment variables</li> <li>Values from <code>.env</code> file</li> <li>Default values defined in the class</li> </ol>"},{"location":"autodoc_src_backend_app_config_py_2025-06-01T06-19-14/#validation","title":"Validation","text":"<p>All settings undergo Pydantic validation:</p> <ul> <li>Type checking</li> <li>Format validation</li> <li>Required field enforcement</li> </ul>"},{"location":"autodoc_src_backend_app_config_py_2025-06-01T06-19-14/#error-handling","title":"Error Handling","text":"<ul> <li>Missing required environment variables raise validation errors</li> <li>Invalid types are automatically converted when possible</li> <li>Extra fields in environment/config files are ignored</li> </ul>"},{"location":"autodoc_src_backend_app_config_py_2025-06-01T06-19-14/#security-considerations","title":"Security Considerations","text":"<p>\u26a0\ufe0f Security Notice: The default <code>SECRET_KEY</code> is provided for development only. Always set a unique, secure key in production environments.</p> <pre><code># Generate a secure secret key\nexport SECRET_KEY=$(openssl rand -hex 32)\n</code></pre>"},{"location":"autodoc_src_backend_app_config_py_2025-06-01T06-19-14/#global-settings-instance","title":"Global Settings Instance","text":"<p>The module provides a pre-configured settings instance:</p> <pre><code># Global settings instance\nsettings = Settings()\n</code></pre> <p>This instance is immediately available for import and use throughout the application.</p>"},{"location":"autodoc_src_backend_app_database_py_2025-05-31T15-57-58/","title":"autodoc src backend app database py 2025 05 31T15 57 58","text":""},{"location":"autodoc_src_backend_app_database_py_2025-05-31T15-57-58/#database-module-documentation","title":"Database Module Documentation","text":""},{"location":"autodoc_src_backend_app_database_py_2025-05-31T15-57-58/#overview","title":"Overview","text":"<p>This module provides database connection and session management functionality for the Document Management System. It handles asynchronous SQLAlchemy operations with support for both PostgreSQL and SQLite databases.</p>"},{"location":"autodoc_src_backend_app_database_py_2025-05-31T15-57-58/#module-appdatabase","title":"Module: <code>app.database</code>","text":""},{"location":"autodoc_src_backend_app_database_py_2025-05-31T15-57-58/#dependencies","title":"Dependencies","text":"<ul> <li><code>sqlalchemy.ext.asyncio</code>: Async SQLAlchemy components</li> <li><code>sqlalchemy.orm</code>: ORM functionality</li> <li><code>app.config</code>: Application configuration settings</li> </ul>"},{"location":"autodoc_src_backend_app_database_py_2025-05-31T15-57-58/#configuration","title":"Configuration","text":"<p>The module automatically resolves the database URL using the following priority:</p> <ol> <li>Explicit DATABASE_URL: Uses <code>settings.DATABASE_URL</code> if available</li> <li>SQLite Fallback: Constructs SQLite URL using <code>settings.DATABASE_PATH</code></li> </ol>"},{"location":"autodoc_src_backend_app_database_py_2025-05-31T15-57-58/#components","title":"Components","text":""},{"location":"autodoc_src_backend_app_database_py_2025-05-31T15-57-58/#database-engine","title":"Database Engine","text":""},{"location":"autodoc_src_backend_app_database_py_2025-05-31T15-57-58/#async_engine","title":"<code>async_engine</code>","text":"<pre><code>async_engine: AsyncEngine\n</code></pre> <p>Description: Primary asynchronous database engine with connection pooling.</p> <p>Configuration: - URL: Resolved from configuration - pool_pre_ping: <code>True</code> - Validates connections before use</p>"},{"location":"autodoc_src_backend_app_database_py_2025-05-31T15-57-58/#engine","title":"<code>engine</code>","text":"<pre><code>engine: AsyncEngine\n</code></pre> <p>Description: Legacy alias for <code>async_engine</code> to maintain backward compatibility.</p>"},{"location":"autodoc_src_backend_app_database_py_2025-05-31T15-57-58/#session-management","title":"Session Management","text":""},{"location":"autodoc_src_backend_app_database_py_2025-05-31T15-57-58/#async_session","title":"<code>async_session</code>","text":"<pre><code>async_session: sessionmaker[AsyncSession]\n</code></pre> <p>Description: Session factory for creating database sessions.</p> <p>Configuration: - Engine: Uses <code>async_engine</code> - Class: <code>AsyncSession</code> - expire_on_commit: <code>False</code> - Prevents automatic expiration of objects after commit</p>"},{"location":"autodoc_src_backend_app_database_py_2025-05-31T15-57-58/#database-base","title":"Database Base","text":""},{"location":"autodoc_src_backend_app_database_py_2025-05-31T15-57-58/#base","title":"<code>Base</code>","text":"<pre><code>Base: DeclarativeMeta\n</code></pre> <p>Description: Declarative base class for SQLAlchemy models. All database models should inherit from this base.</p> <p>Usage: <pre><code>from app.database import Base\n\nclass MyModel(Base):\n    __tablename__ = 'my_table'\n    # ... model definition\n</code></pre></p>"},{"location":"autodoc_src_backend_app_database_py_2025-05-31T15-57-58/#dependencies_1","title":"Dependencies","text":""},{"location":"autodoc_src_backend_app_database_py_2025-05-31T15-57-58/#get_db","title":"<code>get_db()</code>","text":"<pre><code>async def get_db() -&gt; AsyncGenerator[AsyncSession, None]\n</code></pre> <p>Description: FastAPI dependency function that provides database sessions with automatic cleanup.</p> <p>Behavior: - Creates a new async session - Yields the session for use in route handlers - Automatically closes the session after request completion - Handles cleanup even if exceptions occur</p> <p>Usage in FastAPI: <pre><code>from fastapi import Depends\nfrom app.database import get_db\n\n@app.get(\"/items/\")\nasync def get_items(db: AsyncSession = Depends(get_db)):\n    # Use db session here\n    result = await db.execute(select(Item))\n    return result.scalars().all()\n</code></pre></p>"},{"location":"autodoc_src_backend_app_database_py_2025-05-31T15-57-58/#database-url-resolution","title":"Database URL Resolution","text":"<p>The module supports flexible database configuration:</p>"},{"location":"autodoc_src_backend_app_database_py_2025-05-31T15-57-58/#postgresqlmysql","title":"PostgreSQL/MySQL","text":"<pre><code>DATABASE_URL=postgresql+asyncpg://user:password@localhost/dbname\n</code></pre>"},{"location":"autodoc_src_backend_app_database_py_2025-05-31T15-57-58/#sqlite-fallback","title":"SQLite (Fallback)","text":"<pre><code>DATABASE_PATH=/path/to/database.db\n</code></pre> <p>Note: When using SQLite, the URL is automatically constructed as: <pre><code>sqlite+aiosqlite:///[DATABASE_PATH]\n</code></pre></p>"},{"location":"autodoc_src_backend_app_database_py_2025-05-31T15-57-58/#best-practices","title":"Best Practices","text":""},{"location":"autodoc_src_backend_app_database_py_2025-05-31T15-57-58/#session-usage","title":"Session Usage","text":"<ul> <li>Always use <code>get_db()</code> dependency in FastAPI routes</li> <li>Never create sessions manually in route handlers</li> <li>Rely on automatic session cleanup</li> </ul>"},{"location":"autodoc_src_backend_app_database_py_2025-05-31T15-57-58/#connection-management","title":"Connection Management","text":"<ul> <li>The engine handles connection pooling automatically</li> <li><code>pool_pre_ping=True</code> ensures connection health</li> <li>Sessions are properly closed after each request</li> </ul>"},{"location":"autodoc_src_backend_app_database_py_2025-05-31T15-57-58/#model-definition","title":"Model Definition","text":"<ul> <li>All models must inherit from <code>Base</code></li> <li>Define <code>__tablename__</code> for each model</li> <li>Use async query methods with the provided sessions</li> </ul>"},{"location":"autodoc_src_backend_app_database_py_2025-05-31T15-57-58/#example-usage","title":"Example Usage","text":""},{"location":"autodoc_src_backend_app_database_py_2025-05-31T15-57-58/#route-handler","title":"Route Handler","text":"<pre><code>from fastapi import Depends\nfrom sqlalchemy import select\nfrom app.database import get_db\n\n@router.get(\"/documents/\")\nasync def list_documents(db: AsyncSession = Depends(get_db)):\n    stmt = select(Document)\n    result = await db.execute(stmt)\n    return result.scalars().all()\n</code></pre>"},{"location":"autodoc_src_backend_app_database_py_2025-05-31T15-57-58/#model-definition_1","title":"Model Definition","text":"<pre><code>from sqlalchemy import Column, Integer, String\nfrom app.database import Base\n\nclass Document(Base):\n    __tablename__ = 'documents'\n\n    id = Column(Integer, primary_key=True)\n    title = Column(String(255), nullable=False)\n</code></pre>"},{"location":"autodoc_src_backend_app_database_py_2025-05-31T15-57-58/#error-handling","title":"Error Handling","text":"<p>The <code>get_db()</code> function includes automatic error handling: - Sessions are closed in a <code>finally</code> block - Exceptions in route handlers don't prevent cleanup - Connection issues are handled by the engine's retry logic</p>"},{"location":"autodoc_src_backend_app_database_py_2025-06-01T06-18-25/","title":"autodoc src backend app database py 2025 06 01T06 18 25","text":""},{"location":"autodoc_src_backend_app_database_py_2025-06-01T06-18-25/#database-module-documentation","title":"Database Module Documentation","text":""},{"location":"autodoc_src_backend_app_database_py_2025-06-01T06-18-25/#overview","title":"Overview","text":"<p>This module provides database connection and session management functionality for the Document Management System. It handles asynchronous database operations using SQLAlchemy's async capabilities with support for both PostgreSQL/MySQL (via <code>DATABASE_URL</code>) and SQLite (via local file) backends.</p>"},{"location":"autodoc_src_backend_app_database_py_2025-06-01T06-18-25/#dependencies","title":"Dependencies","text":"<ul> <li><code>sqlalchemy.ext.asyncio</code> - Async SQLAlchemy components</li> <li><code>sqlalchemy.orm</code> - ORM session management and base classes</li> <li><code>app.config.settings</code> - Application configuration settings</li> </ul>"},{"location":"autodoc_src_backend_app_database_py_2025-06-01T06-18-25/#configuration","title":"Configuration","text":"<p>The module automatically configures the database connection based on available settings:</p> Setting Type Description <code>settings.DATABASE_URL</code> str (optional) Full database URL for PostgreSQL/MySQL connections <code>settings.DATABASE_PATH</code> str Local file path for SQLite database (fallback)"},{"location":"autodoc_src_backend_app_database_py_2025-06-01T06-18-25/#database-url-resolution","title":"Database URL Resolution","text":"<pre><code>if settings.DATABASE_URL:\n    ASYNC_DATABASE_URL = settings.DATABASE_URL\nelse:\n    ASYNC_DATABASE_URL = f\"sqlite+aiosqlite:///{settings.DATABASE_PATH}\"\n</code></pre> <p>The module prioritizes explicit <code>DATABASE_URL</code> configuration but gracefully falls back to a local SQLite database using the <code>DATABASE_PATH</code> setting.</p>"},{"location":"autodoc_src_backend_app_database_py_2025-06-01T06-18-25/#components","title":"Components","text":""},{"location":"autodoc_src_backend_app_database_py_2025-06-01T06-18-25/#engine-configuration","title":"Engine Configuration","text":"<pre><code>async_engine = create_async_engine(ASYNC_DATABASE_URL, pool_pre_ping=True)\n</code></pre> <p>Features: - Asynchronous database engine using SQLAlchemy's async capabilities - Connection pool pre-ping enabled for connection health checks - Legacy alias <code>engine</code> provided for backward compatibility</p> <p>Parameters: - <code>pool_pre_ping=True</code> - Enables automatic connection validation before use</p>"},{"location":"autodoc_src_backend_app_database_py_2025-06-01T06-18-25/#session-factory","title":"Session Factory","text":"<pre><code>async_session = sessionmaker(\n    async_engine, \n    class_=AsyncSession, \n    expire_on_commit=False\n)\n</code></pre> <p>Configuration: - <code>class_=AsyncSession</code> - Uses async session class - <code>expire_on_commit=False</code> - Prevents automatic expiration of objects after commit</p>"},{"location":"autodoc_src_backend_app_database_py_2025-06-01T06-18-25/#base-model-class","title":"Base Model Class","text":"<pre><code>Base = declarative_base()\n</code></pre> <p>Provides the declarative base class for all ORM models in the application.</p>"},{"location":"autodoc_src_backend_app_database_py_2025-06-01T06-18-25/#functions","title":"Functions","text":""},{"location":"autodoc_src_backend_app_database_py_2025-06-01T06-18-25/#get_db","title":"get_db()","text":"<pre><code>async def get_db() -&gt; AsyncSession\n</code></pre> <p>Purpose: FastAPI dependency function that provides database session management.</p> <p>Behavior: - Creates a new async database session - Yields the session for use in route handlers - Automatically closes the session after use (cleanup guaranteed)</p> <p>Usage Example: <pre><code>from fastapi import Depends\nfrom app.database import get_db\n\n@app.get(\"/users/\")\nasync def get_users(db: AsyncSession = Depends(get_db)):\n    # Use db session here\n    result = await db.execute(select(User))\n    return result.scalars().all()\n</code></pre></p> <p>Error Handling: - Uses try/finally block to ensure session cleanup - Session is closed even if exceptions occur during request processing</p>"},{"location":"autodoc_src_backend_app_database_py_2025-06-01T06-18-25/#usage-patterns","title":"Usage Patterns","text":""},{"location":"autodoc_src_backend_app_database_py_2025-06-01T06-18-25/#model-definition","title":"Model Definition","text":"<pre><code>from app.database import Base\n\nclass User(Base):\n    __tablename__ = \"users\"\n    # model fields here\n</code></pre>"},{"location":"autodoc_src_backend_app_database_py_2025-06-01T06-18-25/#direct-session-usage","title":"Direct Session Usage","text":"<pre><code>from app.database import async_session\n\nasync def some_function():\n    async with async_session() as session:\n        # database operations\n        await session.commit()\n</code></pre>"},{"location":"autodoc_src_backend_app_database_py_2025-06-01T06-18-25/#fastapi-integration","title":"FastAPI Integration","text":"<pre><code>from fastapi import Depends\nfrom app.database import get_db\n\n@app.post(\"/items/\")\nasync def create_item(item: ItemCreate, db: AsyncSession = Depends(get_db)):\n    # database operations using db session\n    pass\n</code></pre>"},{"location":"autodoc_src_backend_app_database_py_2025-06-01T06-18-25/#notes","title":"Notes","text":"<ul> <li>All database operations should use async/await syntax</li> <li>The module supports connection pooling and automatic connection health checks</li> <li>Session management follows the async context manager pattern</li> <li>Legacy <code>engine</code> alias maintains backward compatibility with existing code</li> </ul>"},{"location":"autodoc_src_backend_app_embeddings_py_2025-05-31T16-03-55/","title":"autodoc src backend app embeddings py 2025 05 31T16 03 55","text":""},{"location":"autodoc_src_backend_app_embeddings_py_2025-05-31T16-03-55/#embedding-service-module","title":"Embedding Service Module","text":""},{"location":"autodoc_src_backend_app_embeddings_py_2025-05-31T16-03-55/#overview","title":"Overview","text":"<p>This module provides text embedding functionality using the Ollama API with a deterministic fallback mechanism for offline development. It generates 1536-dimensional float vectors suitable for use with pgvector databases.</p>"},{"location":"autodoc_src_backend_app_embeddings_py_2025-05-31T16-03-55/#dependencies","title":"Dependencies","text":"<pre><code>import hashlib, math, os, json, logging, httpx\nfrom typing import List\nfrom app.config import settings\n</code></pre>"},{"location":"autodoc_src_backend_app_embeddings_py_2025-05-31T16-03-55/#configuration","title":"Configuration","text":"Variable Default Value Description <code>OLLAMA_BASE_URL</code> <code>http://host.docker.internal:11434</code> Base URL for the Ollama API service"},{"location":"autodoc_src_backend_app_embeddings_py_2025-05-31T16-03-55/#functions","title":"Functions","text":""},{"location":"autodoc_src_backend_app_embeddings_py_2025-05-31T16-03-55/#get_embeddingtext-str-model-str-nomic-embed-text-listfloat","title":"<code>get_embedding(text: str, model: str = \"nomic-embed-text\") -&gt; List[float]</code>","text":"<p>Generates a 1536-dimensional embedding vector for the provided text using the Ollama embeddings API.</p>"},{"location":"autodoc_src_backend_app_embeddings_py_2025-05-31T16-03-55/#parameters","title":"Parameters","text":"<ul> <li>text (<code>str</code>): The input text to generate embeddings for</li> <li>model (<code>str</code>, optional): The embedding model to use. Defaults to <code>\"nomic-embed-text\"</code></li> </ul>"},{"location":"autodoc_src_backend_app_embeddings_py_2025-05-31T16-03-55/#returns","title":"Returns","text":"<ul> <li><code>List[float]</code>: A list of 1536 floating-point values representing the text embedding</li> </ul>"},{"location":"autodoc_src_backend_app_embeddings_py_2025-05-31T16-03-55/#behavior","title":"Behavior","text":"<ol> <li>Primary Operation: Makes an HTTP POST request to the Ollama embeddings endpoint</li> <li>Endpoint: <code>{OLLAMA_BASE}/api/embeddings</code></li> <li>Timeout: 10 seconds</li> <li> <p>Payload: <code>{\"model\": model, \"prompt\": text}</code></p> </li> <li> <p>Fallback Mechanism: If the API call fails for any reason:</p> </li> <li>Logs a warning message with the error details</li> <li>Generates a deterministic pseudo-random embedding using SHA-256 hash</li> <li> <p>Ensures identical input text always produces the same fallback vector</p> </li> <li> <p>Output Processing: </p> </li> <li>Truncates API response to exactly 1536 dimensions for pgvector compatibility</li> <li>Scales fallback values to range [-1.0, 1.0]</li> </ol>"},{"location":"autodoc_src_backend_app_embeddings_py_2025-05-31T16-03-55/#example-usage","title":"Example Usage","text":"<pre><code># Basic usage with default model\nembedding = await get_embedding(\"Hello, world!\")\n\n# Using a specific model\nembedding = await get_embedding(\"Sample text\", model=\"custom-embed-model\")\n</code></pre>"},{"location":"autodoc_src_backend_app_embeddings_py_2025-05-31T16-03-55/#error-handling","title":"Error Handling","text":"<p>The function implements graceful degradation: - Network connectivity issues - API endpoint unavailability - Invalid responses - Timeout errors</p> <p>All exceptions are caught and logged, with the system falling back to hash-based embeddings to maintain pipeline functionality.</p>"},{"location":"autodoc_src_backend_app_embeddings_py_2025-05-31T16-03-55/#fallback-algorithm","title":"Fallback Algorithm","text":"<p>When the API is unavailable, the fallback mechanism:</p> <ol> <li>Computes SHA-256 hash of the input text</li> <li>Repeats the hash bytes to reach the required 1536 dimensions</li> <li>Scales each byte value from [0, 255] to [-1.0, 1.0] using the formula: <code>(value/128.0) - 1.0</code></li> </ol> <p>This ensures consistent, deterministic embeddings for development and testing scenarios.</p>"},{"location":"autodoc_src_backend_app_embeddings_py_2025-05-31T16-03-55/#logging","title":"Logging","text":"<p>The module uses Python's standard logging framework with logger name <code>__name__</code>. Warning-level messages are logged when the embedding endpoint fails and fallback mode is activated.</p>"},{"location":"autodoc_src_backend_app_embeddings_py_2025-06-01T06-24-07/","title":"autodoc src backend app embeddings py 2025 06 01T06 24 07","text":""},{"location":"autodoc_src_backend_app_embeddings_py_2025-06-01T06-24-07/#embedding-service-module","title":"Embedding Service Module","text":""},{"location":"autodoc_src_backend_app_embeddings_py_2025-06-01T06-24-07/#overview","title":"Overview","text":"<p>This module provides text embedding functionality using the Ollama API with a robust fallback mechanism for offline development environments. It generates 1536-dimensional float vectors for text input, which are compatible with pgvector database storage.</p>"},{"location":"autodoc_src_backend_app_embeddings_py_2025-06-01T06-24-07/#dependencies","title":"Dependencies","text":"<pre><code>import hashlib, math, os, json, logging, httpx\nfrom typing import List\nfrom app.config import settings\n</code></pre>"},{"location":"autodoc_src_backend_app_embeddings_py_2025-06-01T06-24-07/#configuration","title":"Configuration","text":"Variable Default Value Description <code>OLLAMA_BASE_URL</code> <code>http://host.docker.internal:11434</code> Base URL for the Ollama API service"},{"location":"autodoc_src_backend_app_embeddings_py_2025-06-01T06-24-07/#functions","title":"Functions","text":""},{"location":"autodoc_src_backend_app_embeddings_py_2025-06-01T06-24-07/#get_embeddingtext-str-model-str-nomic-embed-text-listfloat","title":"<code>get_embedding(text: str, model: str = \"nomic-embed-text\") -&gt; List[float]</code>","text":"<p>Generates a 1536-dimensional embedding vector for the provided text using the Ollama embeddings API.</p>"},{"location":"autodoc_src_backend_app_embeddings_py_2025-06-01T06-24-07/#parameters","title":"Parameters","text":"<ul> <li>text (<code>str</code>): The input text to generate embeddings for</li> <li>model (<code>str</code>, optional): The embedding model to use. Defaults to <code>\"nomic-embed-text\"</code></li> </ul>"},{"location":"autodoc_src_backend_app_embeddings_py_2025-06-01T06-24-07/#returns","title":"Returns","text":"<ul> <li><code>List[float]</code>: A list of 1536 floating-point numbers representing the text embedding</li> </ul>"},{"location":"autodoc_src_backend_app_embeddings_py_2025-06-01T06-24-07/#behavior","title":"Behavior","text":"<ol> <li>Primary Operation: Makes an HTTP POST request to the Ollama embeddings endpoint</li> <li>Fallback Mechanism: If the API is unreachable, generates a deterministic pseudo-random embedding based on the text's SHA-256 hash</li> <li>Dimension Compliance: Ensures output is exactly 1536 dimensions for pgvector compatibility</li> </ol>"},{"location":"autodoc_src_backend_app_embeddings_py_2025-06-01T06-24-07/#error-handling","title":"Error Handling","text":"<ul> <li>Uses a 10-second timeout for HTTP requests</li> <li>Logs warnings when falling back to hash-based embeddings</li> <li>Ensures identical input text produces identical fallback vectors</li> </ul>"},{"location":"autodoc_src_backend_app_embeddings_py_2025-06-01T06-24-07/#example-usage","title":"Example Usage","text":"<pre><code># Basic usage\nembedding = await get_embedding(\"Hello, world!\")\n\n# With custom model\nembedding = await get_embedding(\"Hello, world!\", model=\"custom-model\")\n</code></pre>"},{"location":"autodoc_src_backend_app_embeddings_py_2025-06-01T06-24-07/#implementation-details","title":"Implementation Details","text":""},{"location":"autodoc_src_backend_app_embeddings_py_2025-06-01T06-24-07/#fallback-algorithm","title":"Fallback Algorithm","text":"<p>When the Ollama API is unavailable, the function:</p> <ol> <li>Computes SHA-256 hash of the input text</li> <li>Repeats hash bytes to reach required length (1536 values)</li> <li>Scales byte values from [0, 255] to [-1.0, 1.0] range using formula: <code>(v/128.0) - 1.0</code></li> </ol>"},{"location":"autodoc_src_backend_app_embeddings_py_2025-06-01T06-24-07/#api-integration","title":"API Integration","text":"<ul> <li>Endpoint: <code>{OLLAMA_BASE_URL}/api/embeddings</code></li> <li>Method: POST</li> <li>Payload: <code>{\"model\": model, \"prompt\": text}</code></li> <li>Timeout: 10 seconds</li> </ul>"},{"location":"autodoc_src_backend_app_embeddings_py_2025-06-01T06-24-07/#logging","title":"Logging","text":"<p>The module uses Python's standard logging framework with logger name based on the module's <code>__name__</code>. Warning-level messages are logged when the API fallback is triggered.</p>"},{"location":"autodoc_src_backend_app_embeddings_py_2025-06-01T06-24-07/#error-scenarios","title":"Error Scenarios","text":"Scenario Behavior Network timeout Falls back to hash-based embedding API server down Falls back to hash-based embedding Invalid response Falls back to hash-based embedding Malformed JSON Falls back to hash-based embedding"},{"location":"autodoc_src_backend_app_embeddings_py_2025-06-01T06-24-07/#notes","title":"Notes","text":"<ul> <li>The fallback mechanism ensures the application remains functional during development without requiring a live Ollama instance</li> <li>Embedding dimensions are truncated to 1536 to maintain compatibility with pgvector</li> <li>The deterministic fallback ensures consistent behavior across multiple calls with identical input</li> </ul>"},{"location":"autodoc_src_backend_app_llm_py_2025-05-31T16-00-26/","title":"autodoc src backend app llm py 2025 05 31T16 00 26","text":""},{"location":"autodoc_src_backend_app_llm_py_2025-05-31T16-00-26/#llm-integration-module-documentation","title":"LLM Integration Module Documentation","text":""},{"location":"autodoc_src_backend_app_llm_py_2025-05-31T16-00-26/#overview","title":"Overview","text":"<p>The LLM Integration module provides a comprehensive service for interacting with Large Language Models (LLMs) for document metadata extraction, content analysis, and automated tagging. It supports multiple LLM providers including local Ollama instances, OpenAI, Anthropic, LiteLLM, and custom endpoints.</p>"},{"location":"autodoc_src_backend_app_llm_py_2025-05-31T16-00-26/#key-features","title":"Key Features","text":"<ul> <li>Multi-provider Support: Compatible with Ollama, OpenAI, Anthropic, LiteLLM, and custom API endpoints</li> <li>Intelligent Metadata Extraction: Iterative extraction with heuristic enrichment for improved accuracy</li> <li>Document Analysis: Automated content analysis including sentiment, entities, and key points</li> <li>Auto-tagging: Intelligent document categorization and tag suggestion</li> <li>Configuration Management: Database-backed configuration with environment variable fallbacks</li> <li>Connection Testing: Built-in testing capabilities with detailed debugging</li> <li>Caching: Configuration caching and response caching for improved performance</li> </ul>"},{"location":"autodoc_src_backend_app_llm_py_2025-05-31T16-00-26/#classes","title":"Classes","text":""},{"location":"autodoc_src_backend_app_llm_py_2025-05-31T16-00-26/#llmservice","title":"LLMService","text":"<p>The main service class for LLM interactions with comprehensive configuration support.</p>"},{"location":"autodoc_src_backend_app_llm_py_2025-05-31T16-00-26/#constructor","title":"Constructor","text":"<pre><code>LLMService(db_session: Optional[AsyncSession] = None)\n</code></pre> <p>Parameters: - <code>db_session</code>: Optional database session for configuration management</p>"},{"location":"autodoc_src_backend_app_llm_py_2025-05-31T16-00-26/#core-methods","title":"Core Methods","text":""},{"location":"autodoc_src_backend_app_llm_py_2025-05-31T16-00-26/#configuration-methods","title":"Configuration Methods","text":""},{"location":"autodoc_src_backend_app_llm_py_2025-05-31T16-00-26/#get_config-dictstr-any","title":"<code>get_config() -&gt; Dict[str, Any]</code>","text":"<p>Retrieves LLM configuration from database with 5-minute caching fallback to environment variables.</p> <p>Returns: - Dictionary containing complete LLM configuration</p> <p>Configuration Keys: - <code>provider</code>: LLM provider type ('local', 'openai', 'anthropic', 'litellm', 'custom') - <code>api_url</code>: API endpoint URL - <code>api_key</code>: API authentication key - <code>model_*</code>: Model names for different tasks (tagger, enricher, analytics, responder) - <code>enabled</code>: Whether LLM features are enabled - <code>auto_tagging</code>: Enable automatic tag suggestion - <code>auto_enrichment</code>: Enable automatic content enrichment - <code>max_retries</code>: Maximum retry attempts for failed requests - <code>retry_delay</code>: Delay between retry attempts (seconds) - <code>batch_size</code>: Batch processing size - <code>concurrent_tasks</code>: Maximum concurrent processing tasks - <code>min_confidence_*</code>: Minimum confidence thresholds</p>"},{"location":"autodoc_src_backend_app_llm_py_2025-05-31T16-00-26/#is_enabled-bool","title":"<code>is_enabled() -&gt; bool</code>","text":"<p>Checks if LLM features are globally enabled.</p> <p>Returns: - Boolean indicating if LLM features are active</p>"},{"location":"autodoc_src_backend_app_llm_py_2025-05-31T16-00-26/#is_configured-bool","title":"<code>is_configured() -&gt; bool</code>","text":"<p>Validates if LLM service has proper configuration for the selected provider.</p> <p>Returns: - Boolean indicating if configuration is valid and complete</p>"},{"location":"autodoc_src_backend_app_llm_py_2025-05-31T16-00-26/#document-processing-methods","title":"Document Processing Methods","text":""},{"location":"autodoc_src_backend_app_llm_py_2025-05-31T16-00-26/#extract_metadatatext-str-max_attempts-optionalint-none-target_score-float-06-task_type-str-enricher-dictstr-any","title":"<code>extract_metadata(text: str, *, max_attempts: Optional[int] = None, target_score: float = 0.6, task_type: str = 'enricher') -&gt; Dict[str, Any]</code>","text":"<p>Extracts structured metadata from document text using iterative LLM calls with heuristic enrichment.</p> <p>Parameters: - <code>text</code>: Document text content to analyze - <code>max_attempts</code>: Maximum number of extraction attempts (defaults to config value) - <code>target_score</code>: Target completeness score (0.0-1.0) to achieve - <code>task_type</code>: Type of processing task for model selection</p> <p>Returns: - Dictionary containing extracted metadata fields</p> <p>Extracted Fields: - <code>title</code>: Document title - <code>document_type</code>: Type classification (invoice, contract, letter, etc.) - <code>sender</code>: Document sender/issuer - <code>recipient</code>: Document recipient - <code>document_date</code>: Document date (ISO format: YYYY-MM-DD) - <code>due_date</code>: Due date if applicable (ISO format) - <code>amount</code>: Total amount including VAT - <code>subtotal</code>: Amount excluding VAT - <code>tax_rate</code>: VAT rate percentage - <code>tax_amount</code>: VAT amount - <code>currency</code>: ISO currency code (CHF, EUR, USD) - <code>status</code>: Document status (paid, unpaid, pending) - Address fields: <code>street</code>, <code>address2</code>, <code>zip</code>, <code>town</code>, <code>county</code>, <code>country</code> - Contact fields: <code>sender_email</code>, <code>phone</code> - <code>tags</code>: Relevant document tags</p> <p>Process: 1. Sends extraction prompt to LLM 2. Parses JSON response 3. Applies heuristic enrichment using regex patterns 4. Scores completeness against target 5. Retries with focused prompts for missing fields if needed</p>"},{"location":"autodoc_src_backend_app_llm_py_2025-05-31T16-00-26/#analyze_documenttext-str-dictstr-any","title":"<code>analyze_document(text: str) -&gt; Dict[str, Any]</code>","text":"<p>Performs comprehensive document content analysis.</p> <p>Parameters: - <code>text</code>: Document text content</p> <p>Returns: - Dictionary containing analysis results:   - <code>summary</code>: Brief document summary (max 100 words)   - <code>key_points</code>: List of important information   - <code>entities</code>: Named entities (people, organizations, locations)   - <code>sentiment</code>: Overall sentiment (positive, negative, neutral)   - <code>action_items</code>: Required actions or tasks</p>"},{"location":"autodoc_src_backend_app_llm_py_2025-05-31T16-00-26/#suggest_tagstext-str-liststr","title":"<code>suggest_tags(text: str) -&gt; List[str]</code>","text":"<p>Generates relevant tags for document categorization.</p> <p>Parameters: - <code>text</code>: Document text content</p> <p>Returns: - List of 3-5 suggested tags for the document</p>"},{"location":"autodoc_src_backend_app_llm_py_2025-05-31T16-00-26/#testing-and-diagnostics","title":"Testing and Diagnostics","text":""},{"location":"autodoc_src_backend_app_llm_py_2025-05-31T16-00-26/#test_connectionprovider-str-api_url-optionalstr-none-api_key-optionalstr-none-dictstr-any","title":"<code>test_connection(provider: str, api_url: Optional[str] = None, api_key: Optional[str] = None) -&gt; Dict[str, Any]</code>","text":"<p>Tests connectivity to LLM provider with detailed debugging information.</p> <p>Parameters: - <code>provider</code>: Provider type to test - <code>api_url</code>: Optional API URL override - <code>api_key</code>: Optional API key override</p> <p>Returns: - Dictionary with test results:   - <code>status</code>: 'success' or 'error'   - <code>message</code>: Human-readable result message   - <code>available_models</code>: List of discoverable models   - <code>debug_info</code>: Detailed debugging information</p>"},{"location":"autodoc_src_backend_app_llm_py_2025-05-31T16-00-26/#internal-methods","title":"Internal Methods","text":""},{"location":"autodoc_src_backend_app_llm_py_2025-05-31T16-00-26/#llm-communication","title":"LLM Communication","text":""},{"location":"autodoc_src_backend_app_llm_py_2025-05-31T16-00-26/#_query_llmprompt-str-task_type-str-enricher-str","title":"<code>_query_llm(prompt: str, task_type: str = 'enricher') -&gt; str</code>","text":"<p>Routes LLM queries to appropriate provider endpoint based on configuration.</p>"},{"location":"autodoc_src_backend_app_llm_py_2025-05-31T16-00-26/#_query_ollama_directprompt-str-api_url-str-model-str-str","title":"<code>_query_ollama_direct(prompt: str, api_url: str, model: str) -&gt; str</code>","text":"<p>Direct communication with Ollama API using native format.</p>"},{"location":"autodoc_src_backend_app_llm_py_2025-05-31T16-00-26/#_query_generic_llm_directprompt-str-api_url-str-api_key-optionalstr-model-str-str","title":"`_query_generic_llm_direct(prompt: str, api_url: str, api_key: Optional[str], model: str) -&gt; str","text":""},{"location":"autodoc_src_backend_app_llm_py_2025-06-01T06-20-47/","title":"autodoc src backend app llm py 2025 06 01T06 20 47","text":""},{"location":"autodoc_src_backend_app_llm_py_2025-06-01T06-20-47/#llm-integration-module-documentation","title":"LLM Integration Module Documentation","text":""},{"location":"autodoc_src_backend_app_llm_py_2025-06-01T06-20-47/#overview","title":"Overview","text":"<p>The LLM integration module provides comprehensive services for interacting with various Large Language Model (LLM) APIs to perform document analysis, metadata extraction, and content enrichment. The module supports multiple providers including local Ollama instances, OpenAI, Anthropic, and custom LLM endpoints.</p>"},{"location":"autodoc_src_backend_app_llm_py_2025-06-01T06-20-47/#classes","title":"Classes","text":""},{"location":"autodoc_src_backend_app_llm_py_2025-06-01T06-20-47/#llmservice","title":"LLMService","text":"<p>Main service class for LLM interactions with configuration support and intelligent caching.</p>"},{"location":"autodoc_src_backend_app_llm_py_2025-06-01T06-20-47/#constructor","title":"Constructor","text":"<pre><code>def __init__(self, db_session: Optional[AsyncSession] = None)\n</code></pre> <p>Parameters: - <code>db_session</code> (Optional[AsyncSession]): Database session for configuration management</p>"},{"location":"autodoc_src_backend_app_llm_py_2025-06-01T06-20-47/#core-configuration-methods","title":"Core Configuration Methods","text":""},{"location":"autodoc_src_backend_app_llm_py_2025-06-01T06-20-47/#async-get_config-dictstr-any","title":"<code>async get_config() -&gt; Dict[str, Any]</code>","text":"<p>Retrieves LLM configuration from database with 5-minute caching to optimize performance.</p> <p>Returns: - Dictionary containing configuration parameters including:   - <code>provider</code>: LLM provider ('local', 'openai', 'anthropic', etc.)   - <code>api_url</code>: API endpoint URL   - <code>api_key</code>: Authentication key   - Model configurations for different tasks   - Processing parameters and limits</p> <p>Fallback Behavior: Falls back to environment variables if database configuration is unavailable.</p>"},{"location":"autodoc_src_backend_app_llm_py_2025-06-01T06-20-47/#async-is_enabled-bool","title":"<code>async is_enabled() -&gt; bool</code>","text":"<p>Checks if LLM features are enabled in the configuration.</p>"},{"location":"autodoc_src_backend_app_llm_py_2025-06-01T06-20-47/#async-is_configured-bool","title":"<code>async is_configured() -&gt; bool</code>","text":"<p>Validates if the LLM service has proper configuration for the selected provider.</p>"},{"location":"autodoc_src_backend_app_llm_py_2025-06-01T06-20-47/#document-processing-methods","title":"Document Processing Methods","text":""},{"location":"autodoc_src_backend_app_llm_py_2025-06-01T06-20-47/#async-extract_metadatatext-str-max_attempts-optionalint-none-target_score-float-06-task_type-str-enricher-dictstr-any","title":"<code>async extract_metadata(text: str, *, max_attempts: Optional[int] = None, target_score: float = 0.6, task_type: str = 'enricher') -&gt; Dict[str, Any]</code>","text":"<p>Extracts structured metadata from document text using iterative LLM calls with quality scoring.</p> <p>Parameters: - <code>text</code> (str): Document text content - <code>max_attempts</code> (Optional[int]): Maximum retry attempts (default from config) - <code>target_score</code> (float): Minimum completeness score (0.0-1.0) - <code>task_type</code> (str): Task type for model selection</p> <p>Returns: Dictionary containing extracted metadata fields: - <code>title</code>: Document title - <code>document_type</code>: Type classification - <code>sender</code>/<code>recipient</code>: Parties involved - <code>document_date</code>/<code>due_date</code>: Important dates (ISO format) - <code>amount</code>/<code>currency</code>: Financial information - Address and contact details - Custom tags and classifications</p> <p>Process: 1. Makes LLM API call with structured prompt 2. Parses JSON response 3. Applies heuristic enrichment using regex patterns 4. Scores completeness against target 5. Retries with focused prompts for missing fields if needed</p>"},{"location":"autodoc_src_backend_app_llm_py_2025-06-01T06-20-47/#async-analyze_documenttext-str-dictstr-any","title":"<code>async analyze_document(text: str) -&gt; Dict[str, Any]</code>","text":"<p>Performs comprehensive document analysis using LLM.</p> <p>Parameters: - <code>text</code> (str): Document text content</p> <p>Returns: Dictionary containing: - <code>summary</code>: Brief document summary - <code>key_points</code>: Important information list - <code>entities</code>: Named entities (people, organizations, locations) - <code>sentiment</code>: Overall sentiment analysis - <code>action_items</code>: Required actions or tasks</p>"},{"location":"autodoc_src_backend_app_llm_py_2025-06-01T06-20-47/#async-suggest_tagstext-str-liststr","title":"<code>async suggest_tags(text: str) -&gt; List[str]</code>","text":"<p>Generates contextual tags for document categorization.</p> <p>Parameters: - <code>text</code> (str): Document text content</p> <p>Returns: List of suggested tags (3-5 relevant categories)</p>"},{"location":"autodoc_src_backend_app_llm_py_2025-06-01T06-20-47/#provider-testing-and-discovery","title":"Provider Testing and Discovery","text":""},{"location":"autodoc_src_backend_app_llm_py_2025-06-01T06-20-47/#async-test_connectionprovider-str-api_url-optionalstr-none-api_key-optionalstr-none-dictstr-any","title":"<code>async test_connection(provider: str, api_url: Optional[str] = None, api_key: Optional[str] = None) -&gt; Dict[str, Any]</code>","text":"<p>Tests connectivity to LLM provider with detailed debugging information.</p> <p>Parameters: - <code>provider</code> (str): Provider type ('local', 'openai', etc.) - <code>api_url</code> (Optional[str]): Override API URL - <code>api_key</code> (Optional[str]): Override API key</p> <p>Returns: Dictionary containing: - <code>status</code>: 'success' or 'error' - <code>message</code>: Descriptive result message - <code>available_models</code>: List of discovered models - <code>debug_info</code>: Detailed testing information</p>"},{"location":"autodoc_src_backend_app_llm_py_2025-06-01T06-20-47/#private-implementation-methods","title":"Private Implementation Methods","text":""},{"location":"autodoc_src_backend_app_llm_py_2025-06-01T06-20-47/#async-_get_available_modelsprovider-str-api_url-str-api_key-optionalstr-none-liststr","title":"<code>async _get_available_models(provider: str, api_url: str, api_key: Optional[str] = None) -&gt; List[str]</code>","text":"<p>Discovers available models from the provider's API.</p>"},{"location":"autodoc_src_backend_app_llm_py_2025-06-01T06-20-47/#async-_query_llmprompt-str-task_type-str-enricher-str","title":"<code>async _query_llm(prompt: str, task_type: str = 'enricher') -&gt; str</code>","text":"<p>Routes LLM queries to appropriate provider endpoints based on configuration.</p>"},{"location":"autodoc_src_backend_app_llm_py_2025-06-01T06-20-47/#async-_query_ollama_directprompt-str-api_url-str-model-str-str","title":"<code>async _query_ollama_direct(prompt: str, api_url: str, model: str) -&gt; str</code>","text":"<p>Handles direct communication with Ollama API instances.</p>"},{"location":"autodoc_src_backend_app_llm_py_2025-06-01T06-20-47/#async-_query_generic_llm_directprompt-str-api_url-str-api_key-optionalstr-model-str-str","title":"<code>async _query_generic_llm_direct(prompt: str, api_url: str, api_key: Optional[str], model: str) -&gt; str</code>","text":"<p>Manages OpenAI-compatible API communication for various providers.</p>"},{"location":"autodoc_src_backend_app_llm_py_2025-06-01T06-20-47/#response-processing","title":"Response Processing","text":""},{"location":"autodoc_src_backend_app_llm_py_2025-06-01T06-20-47/#_parse_metadata_responseresponse-str-dictstr-any","title":"<code>_parse_metadata_response(response: str) -&gt; Dict[str, Any]</code>","text":""},{"location":"autodoc_src_backend_app_llm_py_2025-06-01T06-20-47/#_parse_analysis_responseresponse-str-dictstr-any","title":"<code>_parse_analysis_response(response: str) -&gt; Dict[str, Any]</code>","text":""},{"location":"autodoc_src_backend_app_llm_py_2025-06-01T06-20-47/#_parse_tags_responseresponse-str-liststr","title":"<code>_parse_tags_response(response: str) -&gt; List[str]</code>","text":"<p>Parse structured data from LLM responses with JSON5 fallback support.</p>"},{"location":"autodoc_src_backend_app_llm_py_2025-06-01T06-20-47/#prompt-engineering","title":"Prompt Engineering","text":""},{"location":"autodoc_src_backend_app_llm_py_2025-06-01T06-20-47/#_create_metadata_extraction_prompttext-str-missing_fields-liststr-none-str","title":"<code>_create_metadata_extraction_prompt(text: str, missing_fields: List[str] = None) -&gt; str</code>","text":"<p>Generates optimized prompts for metadata extraction with field-specific focus for retries.</p> <p>Key Features: - Enforces ISO date format (YYYY-MM-DD) - Handles Swiss/EU invoice formats - Dynamic field targeting for efficient retries - Text truncation for token management</p>"},{"location":"autodoc_src_backend_app_llm_py_2025-06-01T06-20-47/#_create_document_analysis_prompttext-str-str","title":"<code>_create_document_analysis_prompt(text: str) -&gt; str</code>","text":""},{"location":"autodoc_src_backend_app_llm_py_2025-06-01T06-20-47/#_create_tag_suggestion_prompttext-str-str","title":"<code>_create_tag_suggestion_prompt(text: str) -&gt; str</code>","text":"<p>Generate task-specific prompts for analysis and tagging operations.</p>"},{"location":"autodoc_src_backend_app_llm_py_2025-06-01T06-20-47/#heuristic-enhancement","title":"Heuristic Enhancement","text":""},{"location":"autodoc_src_backend_app_llm_py_2025-06-01T06-20-47/#_heuristic_enrichtext-str-metadata-dictstr-any-dictstr-any","title":"<code>_heuristic_enrich(text: str, metadata: Dict[str, Any]) -&gt; Dict[str, Any]</code>","text":"<p>Applies regex-based post-processing to fill common omissions from LLM responses.</p> <p>Enhanced Fields: - Email addresses and phone numbers - Currency amounts and financial data - Swiss/EU address blocks - VAT information and tax rates - Company identifiers</p>"},{"location":"autodoc_src_backend_app_main_py_2025-05-31T16-06-56/","title":"autodoc src backend app main py 2025 05 31T16 06 56","text":""},{"location":"autodoc_src_backend_app_main_py_2025-05-31T16-06-56/#document-management-system-api-documentation","title":"Document Management System API Documentation","text":""},{"location":"autodoc_src_backend_app_main_py_2025-05-31T16-06-56/#overview","title":"Overview","text":"<p>The Document Management System API is a comprehensive FastAPI-based application that provides document processing, OCR capabilities, LLM integration, and analytics for managing documents, invoices, and business data.</p>"},{"location":"autodoc_src_backend_app_main_py_2025-05-31T16-06-56/#features","title":"Features","text":"<ul> <li>Document Management: Upload, process, and organize documents with OCR</li> <li>LLM Integration: Automated metadata extraction and document analysis</li> <li>Authentication: JWT-based authentication with role-based access control</li> <li>Address Book: Contact and vendor management</li> <li>Analytics: Document and financial analytics with reporting</li> <li>Search: Text, semantic, and vision-based search capabilities</li> <li>Calendar: Export due dates and events to calendar formats</li> <li>Tenant Management: Multi-tenant support for organizations</li> <li>Processing Rules: Automated document processing workflows</li> </ul>"},{"location":"autodoc_src_backend_app_main_py_2025-05-31T16-06-56/#dependencies","title":"Dependencies","text":"<pre><code>from fastapi import FastAPI, Depends, HTTPException, status, File, UploadFile, Form, BackgroundTasks, Query, Request\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom fastapi.staticfiles import StaticFiles\nfrom fastapi.responses import JSONResponse, FileResponse, Response\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy import select, text, update, func, or_\n</code></pre>"},{"location":"autodoc_src_backend_app_main_py_2025-05-31T16-06-56/#application-configuration","title":"Application Configuration","text":""},{"location":"autodoc_src_backend_app_main_py_2025-05-31T16-06-56/#fastapi-app-initialization","title":"FastAPI App Initialization","text":"<pre><code>app = FastAPI(\n    title=\"Document Management System API\",\n    description=\"API for managing documents, OCR processing, and analytics\",\n    version=\"1.0.0\",\n)\n</code></pre>"},{"location":"autodoc_src_backend_app_main_py_2025-05-31T16-06-56/#cors-configuration","title":"CORS Configuration","text":"<p>The application is configured with permissive CORS settings for development. In production, <code>allow_origins</code> should be restricted to specific domains.</p> <pre><code>app.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],  # In production, replace with specific origins\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n</code></pre>"},{"location":"autodoc_src_backend_app_main_py_2025-05-31T16-06-56/#core-services","title":"Core Services","text":""},{"location":"autodoc_src_backend_app_main_py_2025-05-31T16-06-56/#document-processing","title":"Document Processing","text":"<p>The system automatically processes documents through:</p> <ol> <li>OCR Processing: Extract text from PDF and image files</li> <li>LLM Analysis: Extract metadata, entities, and structured data</li> <li>Vector Embeddings: Generate embeddings for semantic search</li> <li>Address Book Integration: Automatically enrich vendor information</li> </ol>"},{"location":"autodoc_src_backend_app_main_py_2025-05-31T16-06-56/#folder-watcher","title":"Folder Watcher","text":"<p>Monitors a specified directory for new documents and processes them automatically:</p> <pre><code>async def process_new_document(file_path: str):\n    \"\"\"Process a new document detected by the folder watcher.\"\"\"\n    # OCR processing\n    text = await ocr_processor.process_document(file_path)\n\n    # LLM metadata extraction\n    metadata = await llm_service.extract_metadata(text)\n\n    # Database storage with deduplication\n    # Vector embedding generation\n    # Address book enrichment\n</code></pre>"},{"location":"autodoc_src_backend_app_main_py_2025-05-31T16-06-56/#api-endpoints","title":"API Endpoints","text":""},{"location":"autodoc_src_backend_app_main_py_2025-05-31T16-06-56/#authentication","title":"Authentication","text":""},{"location":"autodoc_src_backend_app_main_py_2025-05-31T16-06-56/#post-apiauthlogin","title":"POST <code>/api/auth/login</code>","text":"<p>Authenticate user and return JWT token.</p> <p>Parameters: - <code>username</code> (form): Username - <code>password</code> (form): Password</p> <p>Response: <pre><code>{\n    \"access_token\": \"jwt_token\",\n    \"token_type\": \"bearer\"\n}\n</code></pre></p>"},{"location":"autodoc_src_backend_app_main_py_2025-05-31T16-06-56/#get-apiauthme","title":"GET <code>/api/auth/me</code>","text":"<p>Get current user information.</p> <p>Response: <pre><code>{\n    \"id\": 1,\n    \"username\": \"admin\",\n    \"email\": \"admin@example.com\",\n    \"disabled\": false\n}\n</code></pre></p>"},{"location":"autodoc_src_backend_app_main_py_2025-05-31T16-06-56/#post-apiauthchange-password","title":"POST <code>/api/auth/change-password</code>","text":"<p>Change current user's password.</p> <p>Parameters: - <code>old_password</code> (form): Current password - <code>new_password</code> (form): New password</p>"},{"location":"autodoc_src_backend_app_main_py_2025-05-31T16-06-56/#documents","title":"Documents","text":""},{"location":"autodoc_src_backend_app_main_py_2025-05-31T16-06-56/#get-apidocuments","title":"GET <code>/api/documents</code>","text":"<p>Retrieve documents with optional filtering.</p> <p>Query Parameters: - <code>status</code> (optional): Filter by document status - <code>document_type</code> (optional): Filter by document type - <code>search</code> (optional): Text search query</p> <p>Response: <pre><code>[\n    {\n        \"id\": 1,\n        \"title\": \"Invoice 2024-001\",\n        \"document_type\": \"invoice\",\n        \"sender\": \"Company XYZ\",\n        \"amount\": 1500.00,\n        \"currency\": \"CHF\",\n        \"status\": \"pending\"\n    }\n]\n</code></pre></p>"},{"location":"autodoc_src_backend_app_main_py_2025-05-31T16-06-56/#get-apidocumentsdocument_id","title":"GET <code>/api/documents/{document_id}</code>","text":"<p>Get specific document by ID.</p>"},{"location":"autodoc_src_backend_app_main_py_2025-05-31T16-06-56/#put-apidocumentsdocument_id","title":"PUT <code>/api/documents/{document_id}</code>","text":"<p>Update document fields.</p> <p>Parameters: - <code>title</code> (form, optional): Document title - <code>document_type</code> (form, optional): Document type - <code>sender</code> (form, optional): Sender name - <code>recipient</code> (form, optional): Recipient name - <code>document_date</code> (form, optional): Document date (YYYY-MM-DD) - <code>due_date</code> (form, optional): Due date (YYYY-MM-DD) - <code>amount</code> (form, optional): Amount - <code>currency</code> (form, optional): Currency code - <code>status</code> (form, optional): Document status</p>"},{"location":"autodoc_src_backend_app_main_py_2025-05-31T16-06-56/#delete-apidocumentsdocument_id","title":"DELETE <code>/api/documents/{document_id}</code>","text":"<p>Delete a document.</p>"},{"location":"autodoc_src_backend_app_main_py_2025-05-31T16-06-56/#post-apidocumentsupload","title":"POST <code>/api/documents/upload</code>","text":"<p>Upload a new document for processing.</p> <p>Parameters: - <code>file</code> (file): Document file (PDF, image)</p>"},{"location":"autodoc_src_backend_app_main_py_2025-05-31T16-06-56/#get-apidocumentsdocument_idfile","title":"GET <code>/api/documents/{document_id}/file</code>","text":"<p>Download the original document file.</p> <p>Query Parameters: - <code>api_key</code> (optional): API key for token-less access</p>"},{"location":"autodoc_src_backend_app_main_py_2025-05-31T16-06-56/#tags","title":"Tags","text":""},{"location":"autodoc_src_backend_app_main_py_2025-05-31T16-06-56/#get-apidocumentsdocument_idtags","title":"GET <code>/api/documents/{document_id}/tags</code>","text":"<p>Get tags for a specific document.</p>"},{"location":"autodoc_src_backend_app_main_py_2025-05-31T16-06-56/#post-apidocumentsdocument_idtags","title":"POST <code>/api/documents/{document_id}/tags</code>","text":"<p>Add a tag to a document.</p> <p>Parameters: - <code>tag</code> (form): Tag name</p>"},{"location":"autodoc_src_backend_app_main_py_2025-05-31T16-06-56/#delete-apidocumentsdocument_idtagstag_name","title":"DELETE <code>/api/documents/{document_id}/tags/{tag_name}</code>","text":"<p>Remove a tag from a document.</p>"},{"location":"autodoc_src_backend_app_main_py_2025-05-31T16-06-56/#address-book","title":"Address Book","text":""},{"location":"autodoc_src_backend_app_main_py_2025-05-31T16-06-56/#get-apiaddress-book","title":"GET <code>/api/address-book</code>","text":"<p>List all address book entries.</p>"},{"location":"autodoc_src_backend_app_main_py_2025-05-31T16-06-56/#post-apiaddress-book","title":"POST <code>/api/address-book</code>","text":"<p>Create a new address book entry.</p> <p>Parameters: - <code>name</code> (form): Entity name - <code>entity_type</code> (form): Entity type (\"company\", \"person\") - <code>email</code> (form, optional): Email address - <code>phone</code> (form, optional): Phone number - <code>street</code> (form, optional): Street address - <code>town</code> (form, optional): City/town - <code>country</code> (form, optional): Country - <code>vat_id</code> (form, optional): VAT identification number</p>"},{"location":"autodoc_src_backend_app_main_py_2025-05-31T16-06-56/#put-apiaddress-","title":"PUT `/api/address-","text":""},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/","title":"autodoc src backend app main py 2025 06 01T06 27 18","text":""},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#document-management-system-api-documentation","title":"Document Management System API Documentation","text":""},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#overview","title":"Overview","text":"<p>This is the main application module for a comprehensive Document Management System built with FastAPI. The system provides document processing, OCR capabilities, LLM-powered metadata extraction, analytics, and user management features.</p>"},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#features","title":"Features","text":"<ul> <li>Document Management: Upload, process, and manage documents with OCR and metadata extraction</li> <li>Authentication &amp; Authorization: JWT-based authentication with role-based access control</li> <li>LLM Integration: AI-powered document analysis and metadata extraction</li> <li>Search Capabilities: Text, semantic, and vision-based search functionality</li> <li>Analytics: Document statistics and business intelligence features</li> <li>Tenant Management: Multi-tenant support for document organization</li> <li>Address Book: Contact and vendor management</li> <li>Notification System: Automated alerts and reminders</li> <li>Processing Rules: Configurable automation rules for document processing</li> </ul>"},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#api-endpoints","title":"API Endpoints","text":""},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#authentication","title":"Authentication","text":""},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#post-apiauthlogin","title":"<code>POST /api/auth/login</code>","text":"<p>Authenticate user and receive access token.</p> <p>Parameters: - <code>username</code> (form): User's username - <code>password</code> (form): User's password</p> <p>Returns: <pre><code>{\n  \"access_token\": \"string\",\n  \"token_type\": \"bearer\"\n}\n</code></pre></p>"},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#get-apiauthme","title":"<code>GET /api/auth/me</code>","text":"<p>Get current user information.</p> <p>Returns: <pre><code>{\n  \"id\": 1,\n  \"username\": \"string\",\n  \"email\": \"string\",\n  \"disabled\": false\n}\n</code></pre></p>"},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#post-apiauthchange-password","title":"<code>POST /api/auth/change-password</code>","text":"<p>Change current user's password.</p> <p>Parameters: - <code>old_password</code> (form): Current password - <code>new_password</code> (form): New password</p>"},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#post-apiauthregister","title":"<code>POST /api/auth/register</code>","text":"<p>Register initial admin user (only when no users exist).</p> <p>Parameters: - <code>username</code> (form): Admin username - <code>email</code> (form): Admin email - <code>password</code> (form): Admin password</p>"},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#document-management","title":"Document Management","text":""},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#get-apidocuments","title":"<code>GET /api/documents</code>","text":"<p>Retrieve all documents with optional filtering.</p> <p>Query Parameters: - <code>status</code> (optional): Filter by document status - <code>document_type</code> (optional): Filter by document type - <code>search</code> (optional): Search term for content</p>"},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#get-apidocumentsdocument_id","title":"<code>GET /api/documents/{document_id}</code>","text":"<p>Get specific document by ID.</p>"},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#put-apidocumentsdocument_id","title":"<code>PUT /api/documents/{document_id}</code>","text":"<p>Update document information.</p> <p>Parameters: - <code>title</code> (form, optional): Document title - <code>document_type</code> (form, optional): Document type - <code>sender</code> (form, optional): Document sender - <code>recipient</code> (form, optional): Document recipient - <code>document_date</code> (form, optional): Document date (YYYY-MM-DD) - <code>due_date</code> (form, optional): Due date (YYYY-MM-DD) - <code>amount</code> (form, optional): Document amount - <code>currency</code> (form, optional): Currency code - <code>status</code> (form, optional): Document status</p>"},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#delete-apidocumentsdocument_id","title":"<code>DELETE /api/documents/{document_id}</code>","text":"<p>Delete a document.</p>"},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#post-apidocumentsupload","title":"<code>POST /api/documents/upload</code>","text":"<p>Upload and process a new document.</p> <p>Parameters: - <code>file</code> (file): Document file to upload</p>"},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#get-apidocumentsdocument_idfile","title":"<code>GET /api/documents/{document_id}/file</code>","text":"<p>Download the original document file.</p> <p>Query Parameters: - <code>api_key</code> (optional): API key for authentication</p>"},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#document-tags","title":"Document Tags","text":""},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#get-apidocumentsdocument_idtags","title":"<code>GET /api/documents/{document_id}/tags</code>","text":"<p>Get all tags for a specific document.</p>"},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#post-apidocumentsdocument_idtags","title":"<code>POST /api/documents/{document_id}/tags</code>","text":"<p>Add a tag to a document.</p> <p>Parameters: - <code>tag</code> (form): Tag name to add</p>"},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#delete-apidocumentsdocument_idtagstag_name","title":"<code>DELETE /api/documents/{document_id}/tags/{tag_name}</code>","text":"<p>Remove a tag from a document.</p>"},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#search","title":"Search","text":""},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#get-apisearch","title":"<code>GET /api/search</code>","text":"<p>Basic text search across documents.</p> <p>Query Parameters: - <code>query</code>: Search query string</p>"},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#post-apisearchadvanced","title":"<code>POST /api/search/advanced</code>","text":"<p>Advanced search with complex criteria.</p> <p>Body: <pre><code>{\n  \"filters\": {},\n  \"search_terms\": \"string\",\n  \"date_range\": {}\n}\n</code></pre></p>"},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#get-apisearchsemantic","title":"<code>GET /api/search/semantic</code>","text":"<p>Semantic search using embeddings.</p> <p>Query Parameters: - <code>query</code>: Search query string</p>"},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#get-apisearchvision","title":"<code>GET /api/search/vision</code>","text":"<p>Vision-based search using document images.</p> <p>Query Parameters: - <code>query</code>: Search query string</p>"},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#get-apisearchrelateddocument_id","title":"<code>GET /api/search/related/{document_id}</code>","text":"<p>Find documents related to a specific document.</p>"},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#analytics","title":"Analytics","text":""},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#get-apianalyticsdocument-types","title":"<code>GET /api/analytics/document-types</code>","text":"<p>Get distribution of document types.</p>"},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#get-apianalyticspayment-status","title":"<code>GET /api/analytics/payment-status</code>","text":"<p>Get payment status distribution.</p>"},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#get-apianalyticsmonthly-documents","title":"<code>GET /api/analytics/monthly-documents</code>","text":"<p>Get monthly document counts.</p> <p>Query Parameters: - <code>year</code>: Year for analysis</p>"},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#get-apianalyticsmonthly-invoices","title":"<code>GET /api/analytics/monthly-invoices</code>","text":"<p>Get monthly invoice amounts.</p> <p>Query Parameters: - <code>year</code>: Year for analysis</p>"},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#get-apianalyticssummary","title":"<code>GET /api/analytics/summary</code>","text":"<p>Get summary metrics dashboard.</p>"},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#user-management-admin-only","title":"User Management (Admin Only)","text":""},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#get-apiusers","title":"<code>GET /api/users</code>","text":"<p>List all users.</p>"},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#post-apiusers","title":"<code>POST /api/users</code>","text":"<p>Create a new user.</p> <p>Parameters: - <code>username</code> (form): Username - <code>email</code> (form): Email address - <code>password</code> (form): Password - <code>full_name</code> (form, optional): Full name - <code>role</code> (form): User role (admin/viewer) - <code>disabled</code> (form): Whether user is disabled</p>"},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#put-apiusersuser_id","title":"<code>PUT /api/users/{user_id}</code>","text":"<p>Update user information.</p>"},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#delete-apiusersuser_id","title":"<code>DELETE /api/users/{user_id}</code>","text":"<p>Delete a user.</p>"},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#post-apiusersuser_idreset-password","title":"<code>POST /api/users/{user_id}/reset-password</code>","text":"<p>Reset user's password.</p>"},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#tenant-management","title":"Tenant Management","text":""},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#get-apitenants","title":"<code>GET /api/tenants</code>","text":"<p>Get all tenants for current user.</p>"},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#get-apitenantsdefault","title":"<code>GET /api/tenants/default</code>","text":"<p>Get default tenant for current user.</p>"},{"location":"autodoc_src_backend_app_main_py_2025-06-01T06-27-18/#post-apitenants","title":"<code>POST /api/tenants</code>","text":"<p>Create a new tenant.</p> <p>Parameters: - <code>name</code> (form): Tenant name - <code>alias</code> (form): Tenant alias - <code>type</code> (form): Tenant type - <code>street</code> (form, optional): Street address - <code>house_number</code> (form, optional): House number - <code>apartment</code> (form, optional): Apartment number - <code>area_code</code> (form, optional): Area code - <code>county</code> (form, optional): County - <code>country</code> (form</p>"},{"location":"autodoc_src_backend_app_models_py_2025-05-31T16-01-01/","title":"autodoc src backend app models py 2025 05 31T16 01 01","text":""},{"location":"autodoc_src_backend_app_models_py_2025-05-31T16-01-01/#document-management-system-database-models","title":"Document Management System - Database Models","text":""},{"location":"autodoc_src_backend_app_models_py_2025-05-31T16-01-01/#overview","title":"Overview","text":"<p>This module contains the SQLAlchemy ORM models for the Document Management System. The models support multi-tenant document management, vector embeddings, automated processing, and user management.</p>"},{"location":"autodoc_src_backend_app_models_py_2025-05-31T16-01-01/#database-compatibility","title":"Database Compatibility","text":"<p>The system supports both PostgreSQL and SQLite databases: - PostgreSQL: Uses <code>pgvector</code> extension for vector embeddings - SQLite: Falls back to Text fields for vector storage as JSON</p>"},{"location":"autodoc_src_backend_app_models_py_2025-05-31T16-01-01/#models","title":"Models","text":""},{"location":"autodoc_src_backend_app_models_py_2025-05-31T16-01-01/#core-document-models","title":"Core Document Models","text":""},{"location":"autodoc_src_backend_app_models_py_2025-05-31T16-01-01/#document","title":"Document","text":"<p>The primary model representing processed documents in the system.</p> <p>Table: <code>documents</code></p> <p>Key Features: - Document metadata extraction and storage - Vector embeddings for semantic search - Multi-tenant support via entity relationships - File deduplication using SHA-256 hashing - Automated processing workflow support</p> <p>Important Fields: - <code>hash</code>: SHA-256 hash for deduplication (unique, indexed) - <code>embedding</code>: Vector field for semantic search (1536 dimensions) - <code>entity_id</code>: Multi-tenant foreign key - <code>confidence_score</code>: Processing confidence metric - <code>status</code>: Processing status (default: \"pending\")</p> <p>Relationships: - Many-to-many with <code>Tag</code> via association table - One-to-many with <code>Notification</code> - Many-to-one with <code>Entity</code> (tenant)</p>"},{"location":"autodoc_src_backend_app_models_py_2025-05-31T16-01-01/#tag","title":"Tag","text":"<p>Model for document categorization and organization.</p> <p>Table: <code>tags</code></p> <p>Features: - Unique tag names - Many-to-many relationship with documents - Eager loading configured for performance</p>"},{"location":"autodoc_src_backend_app_models_py_2025-05-31T16-01-01/#documenttag","title":"DocumentTag","text":"<p>Association table helper class for document-tag relationships.</p> <p>Table: <code>document_tag</code></p> <p>Provides ORM mapping for the many-to-many relationship between documents and tags.</p>"},{"location":"autodoc_src_backend_app_models_py_2025-05-31T16-01-01/#user-management","title":"User Management","text":""},{"location":"autodoc_src_backend_app_models_py_2025-05-31T16-01-01/#user","title":"User","text":"<p>User authentication and authorization model.</p> <p>Table: <code>users</code></p> <p>Key Features: - Role-based access control - Account status management - Unique username and email constraints</p> <p>Roles: - <code>admin</code>: Full system access - <code>viewer</code>: Read-only access - Custom roles supported</p>"},{"location":"autodoc_src_backend_app_models_py_2025-05-31T16-01-01/#userentity","title":"UserEntity","text":"<p>Multi-tenant access control linking users to entities.</p> <p>Table: <code>user_entities</code></p> <p>Features: - User-entity access mapping - Role assignment per entity - Default tenant selection</p>"},{"location":"autodoc_src_backend_app_models_py_2025-05-31T16-01-01/#multi-tenant-support","title":"Multi-Tenant Support","text":""},{"location":"autodoc_src_backend_app_models_py_2025-05-31T16-01-01/#entity","title":"Entity","text":"<p>Company or personal profile representing billing/ownership context.</p> <p>Table: <code>entities</code></p> <p>Key Features: - Company and individual profile support - Complete address information - Financial details (IBAN, VAT ID) - Alias support for LLM matching - Active/inactive status management</p> <p>Types: - <code>company</code>: Business entity - <code>individual</code>: Personal profile</p>"},{"location":"autodoc_src_backend_app_models_py_2025-05-31T16-01-01/#notifications","title":"Notifications","text":""},{"location":"autodoc_src_backend_app_models_py_2025-05-31T16-01-01/#notification","title":"Notification","text":"<p>User alert and notification system.</p> <p>Table: <code>notifications</code></p> <p>Features: - Document-linked notifications - Type-based categorization - Read/unread status tracking</p> <p>Notification Types: - <code>overdue</code>: Payment or action overdue - <code>reminder</code>: Upcoming deadlines - <code>system</code>: System-generated alerts</p>"},{"location":"autodoc_src_backend_app_models_py_2025-05-31T16-01-01/#address-management","title":"Address Management","text":""},{"location":"autodoc_src_backend_app_models_py_2025-05-31T16-01-01/#addressentry","title":"AddressEntry","text":"<p>Comprehensive address book for contacts and organizations.</p> <p>Table: <code>address_book</code></p> <p>Key Features: - Person and organization support - Complete address breakdown - Transaction history tracking - Group-based organization - Document source tracking</p> <p>Entity Types: - <code>company</code>: Business contact - <code>person</code>: Individual contact - <code>government</code>: Government entity</p>"},{"location":"autodoc_src_backend_app_models_py_2025-05-31T16-01-01/#vector-search","title":"Vector Search","text":""},{"location":"autodoc_src_backend_app_models_py_2025-05-31T16-01-01/#vectorentry","title":"VectorEntry","text":"<p>Mapping between document pages and vector database entries.</p> <p>Table: <code>vectors</code></p> <p>Purpose: - Links internal documents to Qdrant vector database - Stores patch-level vector IDs per page - Supports ColPali vision embeddings</p> <p>Data Format: - <code>vector_ids</code>: JSON array of UUID strings</p>"},{"location":"autodoc_src_backend_app_models_py_2025-05-31T16-01-01/#system-configuration","title":"System Configuration","text":""},{"location":"autodoc_src_backend_app_models_py_2025-05-31T16-01-01/#appsettings","title":"AppSettings","text":"<p>Singleton table for mutable system configuration.</p> <p>Table: <code>settings</code></p> <p>Key Settings: - <code>inbox_path</code>: Document upload directory - <code>storage_root</code>: Document organization root - <code>locked</code>: Prevents accidental path changes - <code>tos_accepted_at</code>: Terms of service acceptance</p>"},{"location":"autodoc_src_backend_app_models_py_2025-05-31T16-01-01/#llmconfig","title":"LLMConfig","text":"<p>Configuration for local-first AI integration.</p> <p>Table: <code>llm_config</code></p> <p>Provider Support: - <code>local</code>: Local model inference - <code>openai</code>: OpenAI API integration - <code>anthropic</code>: Anthropic API integration - <code>custom</code>: Custom endpoint support</p> <p>Model Assignment: - <code>model_tagger</code>: Lightweight tagging model - <code>model_enricher</code>: Field completion model - <code>model_analytics</code>: Analytics summaries - <code>model_responder</code>: Response generation (Pro feature)</p> <p>Processing Controls: - Automatic tagging and enrichment - Retry logic and fallback providers - Confidence thresholds - Batch processing configuration</p>"},{"location":"autodoc_src_backend_app_models_py_2025-05-31T16-01-01/#automated-processing","title":"Automated Processing","text":""},{"location":"autodoc_src_backend_app_models_py_2025-05-31T16-01-01/#processingrule","title":"ProcessingRule","text":"<p>Rules for automated document processing and classification.</p> <p>Table: <code>processing_rules</code></p> <p>Key Features: - Vendor-based matching - JSON-based conditions and actions - Priority-based execution order - Usage statistics tracking - Rule enable/disable control</p> <p>Rule Structure: - <code>conditions</code>: JSON array of matching criteria - <code>actions</code>: JSON array of automated actions - <code>priority</code>: Execution order (lower = higher priority)</p>"},{"location":"autodoc_src_backend_app_models_py_2025-05-31T16-01-01/#database-relationships","title":"Database Relationships","text":""},{"location":"autodoc_src_backend_app_models_py_2025-05-31T16-01-01/#many-to-many","title":"Many-to-Many","text":"<ul> <li><code>Document</code> \u2194 <code>Tag</code> (via <code>document_tag</code>)</li> </ul>"},{"location":"autodoc_src_backend_app_models_py_2025-05-31T16-01-01/#one-to-many","title":"One-to-Many","text":"<ul> <li><code>Document</code> \u2192 <code>Notification</code></li> <li><code>Document</code> \u2192 <code>VectorEntry</code></li> <li><code>Entity</code> \u2192 <code>Document</code></li> <li><code>Entity</code> \u2192 <code>ProcessingRule</code></li> </ul>"},{"location":"autodoc_src_backend_app_models_py_2025-05-31T16-01-01/#many-to-one","title":"Many-to-One","text":"<ul> <li><code>UserEntity</code> \u2192 <code>User</code></li> <li><code>UserEntity</code> \u2192 <code>Entity</code></li> </ul>"},{"location":"autodoc_src_backend_app_models_py_2025-05-31T16-01-01/#indexes","title":"Indexes","text":"<p>Key indexes for performance: - <code>documents.hash</code> (unique) - <code>documents.entity_id</code> - <code>processing_rules.vendor</code> - <code>processing_rules.priority</code> - <code>processing_rules.enabled</code></p>"},{"location":"autodoc_src_backend_app_models_py_2025-05-31T16-01-01/#performance-optimizations","title":"Performance Optimizations","text":""},{"location":"autodoc_src_backend_app_models_py_2025-05-31T16-01-01/#eager-loading","title":"Eager Loading","text":"<ul> <li>Tag relationships use <code>lazy=\"selectin\"</code> to avoid N+1 queries</li> <li>Overlap warnings suppressed for complex relationships</li> </ul>"},{"location":"autodoc_src_backend_app_models_py_2025-05-31T16-01-01/#vector-storage","title":"Vector Storage","text":"<ul> <li>PostgreSQL: Native vector type with pgvector</li> <li>SQLite: JSON serialization in Text fields</li> </ul>"},{"location":"autodoc_src_backend_app_models_py_2025-05-31T16-01-01/#migration-considerations","title":"Migration Considerations","text":""},{"location":"autodoc_src_backend_app_models_py_2025-05-31T16-01-01/#adding-new-fields","title":"Adding New Fields","text":"<ul> <li>Use nullable columns for backward compatibility</li> <li>Consider default values for required fields</li> </ul>"},{"location":"autodoc_src_backend_app_models_py_2025-05-31T16-01-01/#vector-database-changes","title":"Vector Database Changes","text":"<ul> <li>VectorEntry model decouples internal storage from vector database</li> <li>Supports migration between vector database providers</li> </ul>"},{"location":"autodoc_src_backend_app_models_py_2025-05-31T16-01-01/#security-notes","title":"Security Notes","text":""},{"location":"autodoc_src_backend_app_models_py_2025-05-31T16-01-01/#sensitive-data","title":"Sensitive Data","text":""},{"location":"autodoc_src_backend_app_models_py_2025-06-01T06-21-20/","title":"autodoc src backend app models py 2025 06 01T06 21 20","text":""},{"location":"autodoc_src_backend_app_models_py_2025-06-01T06-21-20/#document-management-system-database-models","title":"Document Management System Database Models","text":"<p>This document describes the database models for the Document Management System, implemented using SQLAlchemy ORM.</p>"},{"location":"autodoc_src_backend_app_models_py_2025-06-01T06-21-20/#overview","title":"Overview","text":"<p>The database schema supports document processing, multi-tenant architecture, AI-powered enrichment, and comprehensive document management features.</p>"},{"location":"autodoc_src_backend_app_models_py_2025-06-01T06-21-20/#database-models","title":"Database Models","text":""},{"location":"autodoc_src_backend_app_models_py_2025-06-01T06-21-20/#core-models","title":"Core Models","text":""},{"location":"autodoc_src_backend_app_models_py_2025-06-01T06-21-20/#document","title":"Document","text":"<p>Table: <code>documents</code></p> <p>Represents a processed document in the system with extracted metadata and content.</p> Column Type Description <code>id</code> Integer Primary key <code>title</code> String(255) Document title <code>file_path</code> String(255) Path to the stored file <code>content</code> Text Extracted text content <code>document_type</code> String(50) Type of document (invoice, receipt, etc.) <code>sender</code> String(255) Document sender <code>recipient</code> String(255) Document recipient <code>document_date</code> String(50) Date from document <code>due_date</code> String(50) Payment due date <code>amount</code> Float Total amount <code>subtotal</code> Float Subtotal before tax <code>tax_rate</code> Float Applied tax rate <code>tax_amount</code> Float Tax amount <code>payment_date</code> String(50) Payment date <code>category</code> String(100) Document category <code>recurring</code> Boolean Whether document is recurring <code>frequency</code> String(20) Recurrence frequency <code>parent_id</code> Integer Reference to parent document <code>original_file_name</code> String(255) Original filename <code>summary</code> Text AI-generated summary <code>confidence_score</code> Float Processing confidence score <code>currency</code> String(10) Currency code <code>status</code> String(50) Processing status (default: \"pending\") <code>embedding</code> Vector(1536) Document embedding for similarity search <code>hash</code> String(64) SHA-256 hash for deduplication <code>entity_id</code> Integer Associated entity/tenant ID <code>created_at</code> DateTime Creation timestamp <code>updated_at</code> DateTime Last update timestamp <p>Relationships: - Many-to-many with <code>Tag</code> through <code>document_tag</code> table - One-to-many with <code>Notification</code> - Many-to-one with <code>Entity</code></p>"},{"location":"autodoc_src_backend_app_models_py_2025-06-01T06-21-20/#tag","title":"Tag","text":"<p>Table: <code>tags</code></p> <p>Represents tags for document categorization.</p> Column Type Description <code>id</code> Integer Primary key <code>name</code> String(50) Unique tag name <code>created_at</code> DateTime Creation timestamp <p>Relationships: - Many-to-many with <code>Document</code> through <code>document_tag</code> table</p>"},{"location":"autodoc_src_backend_app_models_py_2025-06-01T06-21-20/#user","title":"User","text":"<p>Table: <code>users</code></p> <p>Represents system users with authentication information.</p> Column Type Description <code>id</code> Integer Primary key <code>username</code> String(50) Unique username <code>email</code> String(100) Unique email address <code>full_name</code> String(100) User's full name <code>role</code> String(20) User role (default: \"viewer\") <code>hashed_password</code> String(255) Encrypted password <code>disabled</code> Boolean Account status <code>created_at</code> DateTime Creation timestamp"},{"location":"autodoc_src_backend_app_models_py_2025-06-01T06-21-20/#notification-system","title":"Notification System","text":""},{"location":"autodoc_src_backend_app_models_py_2025-06-01T06-21-20/#notification","title":"Notification","text":"<p>Table: <code>notifications</code></p> <p>Stores user notifications and alerts.</p> Column Type Description <code>id</code> Integer Primary key <code>title</code> String(255) Notification title <code>message</code> Text Notification message <code>type</code> String(50) Notification type <code>is_read</code> Boolean Read status <code>document_id</code> Integer Associated document ID <code>created_at</code> DateTime Creation timestamp"},{"location":"autodoc_src_backend_app_models_py_2025-06-01T06-21-20/#address-book","title":"Address Book","text":""},{"location":"autodoc_src_backend_app_models_py_2025-06-01T06-21-20/#addressentry","title":"AddressEntry","text":"<p>Table: <code>address_book</code></p> <p>Stores contact information for persons and organizations.</p> Column Type Description <code>id</code> Integer Primary key <code>name</code> String(255) Contact name <code>entity_type</code> String(20) Type: company/person/government <code>email</code> String(255) Email address <code>phone</code> String(50) Phone number <code>street</code> String(255) Street address <code>address2</code> String(255) Additional address info <code>town</code> String(255) City/town <code>zip</code> String(20) Postal code <code>county</code> String(100) County/state <code>country</code> String(100) Country <code>group_name</code> String(100) Contact group <code>last_transaction</code> String(50) Last transaction date <code>address</code> Text Legacy address field <code>vat_id</code> String(50) VAT identification <code>bank_details</code> Text Banking information <code>tags</code> String(255) Comma-separated tags <code>created_from</code> String(255) Source document <code>last_seen_in</code> String(50) Last seen date <code>created_at</code> DateTime Creation timestamp <code>updated_at</code> DateTime Last update timestamp"},{"location":"autodoc_src_backend_app_models_py_2025-06-01T06-21-20/#vector-search","title":"Vector Search","text":""},{"location":"autodoc_src_backend_app_models_py_2025-06-01T06-21-20/#vectorentry","title":"VectorEntry","text":"<p>Table: <code>vectors</code></p> <p>Maps document pages to vector search IDs for ColPali embeddings.</p> Column Type Description <code>id</code> Integer Primary key <code>doc_id</code> Integer Associated document ID <code>page</code> Integer Page number <code>vector_ids</code> Text JSON array of vector UUIDs"},{"location":"autodoc_src_backend_app_models_py_2025-06-01T06-21-20/#configuration","title":"Configuration","text":""},{"location":"autodoc_src_backend_app_models_py_2025-06-01T06-21-20/#appsettings","title":"AppSettings","text":"<p>Table: <code>settings</code></p> <p>Stores application-wide configuration settings.</p> Column Type Description <code>id</code> Integer Primary key <code>inbox_path</code> String(255) Inbox directory path"},{"location":"autodoc_src_backend_app_notifications_py_2025-05-31T16-04-41/","title":"autodoc src backend app notifications py 2025 05 31T16 04 41","text":""},{"location":"autodoc_src_backend_app_notifications_py_2025-05-31T16-04-41/#notification-framework-documentation","title":"Notification Framework Documentation","text":""},{"location":"autodoc_src_backend_app_notifications_py_2025-05-31T16-04-41/#overview","title":"Overview","text":"<p>The <code>app.notifications</code> module provides a modular, asynchronous notification framework designed for the 137docs application. This framework supports multiple notification channels (in-app, email, Slack, SMS, etc.) with a pluggable architecture that allows for runtime registration of new channels.</p>"},{"location":"autodoc_src_backend_app_notifications_py_2025-05-31T16-04-41/#key-features","title":"Key Features","text":"<ul> <li>Asynchronous: Built with SQLAlchemy async for non-blocking database operations</li> <li>Modular Architecture: Channel-based system allows easy extension</li> <li>Persistent Storage: All notifications are recorded in the database</li> <li>Multi-Channel Support: Dispatch notifications to multiple channels simultaneously</li> <li>Graceful Failure Handling: Channel failures are logged but don't stop other channels</li> <li>Business Logic Integration: Built-in support for document due date monitoring</li> </ul>"},{"location":"autodoc_src_backend_app_notifications_py_2025-05-31T16-04-41/#architecture","title":"Architecture","text":""},{"location":"autodoc_src_backend_app_notifications_py_2025-05-31T16-04-41/#core-components","title":"Core Components","text":"<ol> <li>NotificationChannel: Abstract base class for all notification channels</li> <li>NotificationService: Main orchestrator for notification persistence and dispatch</li> <li>InAppChannel: Default channel that stores notifications in the database</li> <li>Helper Functions: Utilities for serialization and data transformation</li> </ol>"},{"location":"autodoc_src_backend_app_notifications_py_2025-05-31T16-04-41/#api-reference","title":"API Reference","text":""},{"location":"autodoc_src_backend_app_notifications_py_2025-05-31T16-04-41/#notificationchannel-abstract-base-class","title":"NotificationChannel (Abstract Base Class)","text":"<pre><code>class NotificationChannel(ABC):\n</code></pre> <p>Abstract base class that all notification channels must implement.</p>"},{"location":"autodoc_src_backend_app_notifications_py_2025-05-31T16-04-41/#methods","title":"Methods","text":""},{"location":"autodoc_src_backend_app_notifications_py_2025-05-31T16-04-41/#sendnotification-notification-db-asyncsession-none","title":"<code>send(notification: Notification, db: AsyncSession) -&gt; None</code>","text":"<p>Abstract method that delivers a notification via the specific channel.</p> <p>Parameters: - <code>notification</code> (Notification): The notification object to send - <code>db</code> (AsyncSession): Database session for additional queries if needed</p> <p>Returns: None</p>"},{"location":"autodoc_src_backend_app_notifications_py_2025-05-31T16-04-41/#inappchannel","title":"InAppChannel","text":"<pre><code>class InAppChannel(NotificationChannel):\n</code></pre> <p>Default notification channel that only persists notifications to the database without external delivery.</p>"},{"location":"autodoc_src_backend_app_notifications_py_2025-05-31T16-04-41/#methods_1","title":"Methods","text":""},{"location":"autodoc_src_backend_app_notifications_py_2025-05-31T16-04-41/#sendnotification-notification-db-asyncsession-none_1","title":"<code>send(notification: Notification, db: AsyncSession) -&gt; None</code>","text":"<p>Implements the abstract send method. Since notifications are already persisted by the service, this method performs no additional operations.</p>"},{"location":"autodoc_src_backend_app_notifications_py_2025-05-31T16-04-41/#notificationservice","title":"NotificationService","text":"<pre><code>class NotificationService:\n</code></pre> <p>Main service class that orchestrates notification creation, persistence, and dispatch to registered channels.</p>"},{"location":"autodoc_src_backend_app_notifications_py_2025-05-31T16-04-41/#constructor","title":"Constructor","text":"<pre><code>def __init__(self, channels: Optional[Sequence[NotificationChannel]] = None)\n</code></pre> <p>Parameters: - <code>channels</code> (Optional[Sequence[NotificationChannel]]): List of notification channels to register</p> <p>Note: An <code>InAppChannel</code> is always added as the first channel to ensure database persistence.</p>"},{"location":"autodoc_src_backend_app_notifications_py_2025-05-31T16-04-41/#crud-methods","title":"CRUD Methods","text":""},{"location":"autodoc_src_backend_app_notifications_py_2025-05-31T16-04-41/#create_notificationdb-title-message-notification_type-document_idnone-dict","title":"<code>create_notification(db, title, message, notification_type, document_id=None) -&gt; dict</code>","text":"<p>Creates and persists a new notification, then dispatches it to all registered channels.</p> <p>Parameters: - <code>db</code> (AsyncSession): Database session - <code>title</code> (str): Notification title - <code>message</code> (str): Notification message content - <code>notification_type</code> (str): Type/category of notification - <code>document_id</code> (Optional[int]): Associated document ID if applicable</p> <p>Returns: Dictionary representation of the created notification</p> <p>Example: <pre><code>service = NotificationService()\nnotification = await service.create_notification(\n    db=db_session,\n    title=\"Document Overdue\",\n    message=\"Invoice #123 is 5 days overdue\",\n    notification_type=\"overdue\",\n    document_id=123\n)\n</code></pre></p>"},{"location":"autodoc_src_backend_app_notifications_py_2025-05-31T16-04-41/#get_all_notificationsdb-limit100-offset0-include_readfalse-listdict","title":"<code>get_all_notifications(db, limit=100, offset=0, include_read=False) -&gt; List[dict]</code>","text":"<p>Retrieves notifications with pagination and filtering options.</p> <p>Parameters: - <code>db</code> (AsyncSession): Database session - <code>limit</code> (int, default=100): Maximum number of notifications to return - <code>offset</code> (int, default=0): Number of notifications to skip - <code>include_read</code> (bool, default=False): Whether to include already-read notifications</p> <p>Returns: List of notification dictionaries</p>"},{"location":"autodoc_src_backend_app_notifications_py_2025-05-31T16-04-41/#mark_as_readdb-notification_id-optionaldict","title":"<code>mark_as_read(db, notification_id) -&gt; Optional[dict]</code>","text":"<p>Marks a specific notification as read.</p> <p>Parameters: - <code>db</code> (AsyncSession): Database session - <code>notification_id</code> (int): ID of the notification to mark as read</p> <p>Returns: Updated notification dictionary or None if not found</p>"},{"location":"autodoc_src_backend_app_notifications_py_2025-05-31T16-04-41/#mark_all_as_readdb-int","title":"<code>mark_all_as_read(db) -&gt; int</code>","text":"<p>Marks all unread notifications as read.</p> <p>Parameters: - <code>db</code> (AsyncSession): Database session</p> <p>Returns: Number of notifications marked as read</p>"},{"location":"autodoc_src_backend_app_notifications_py_2025-05-31T16-04-41/#business-logic-methods","title":"Business Logic Methods","text":""},{"location":"autodoc_src_backend_app_notifications_py_2025-05-31T16-04-41/#check_overdue_documentsdb-listnotification","title":"<code>check_overdue_documents(db) -&gt; List[Notification]</code>","text":"<p>Scans for overdue documents and creates notifications for them.</p> <p>Parameters: - <code>db</code> (AsyncSession): Database session</p> <p>Returns: List of created notification objects</p> <p>Behavior: - Only creates notifications for documents with status != \"paid\" - Skips documents that already have unread overdue notifications - Calculates days overdue and includes in notification message</p>"},{"location":"autodoc_src_backend_app_notifications_py_2025-05-31T16-04-41/#check_upcoming_due_datesdb-days_ahead7-listnotification","title":"<code>check_upcoming_due_dates(db, days_ahead=7) -&gt; List[Notification]</code>","text":"<p>Creates reminder notifications for documents due within a specified timeframe.</p> <p>Parameters: - <code>db</code> (AsyncSession): Database session - <code>days_ahead</code> (int, default=7): Number of days ahead to check for due dates</p> <p>Returns: List of created notification objects</p> <p>Behavior: - Only creates notifications for unpaid documents - Skips documents that already have unread reminder notifications - Includes countdown days in notification message</p>"},{"location":"autodoc_src_backend_app_notifications_py_2025-05-31T16-04-41/#create_due_date_notificationdb-document-optionaldict","title":"<code>create_due_date_notification(db, document) -&gt; Optional[dict]</code>","text":"<p>Creates a due date notification for a specific document.</p> <p>Parameters: - <code>db</code> (AsyncSession): Database session - <code>document</code> (Document): Document object to create notification for</p> <p>Returns: Notification dictionary or None if document has no due date</p>"},{"location":"autodoc_src_backend_app_notifications_py_2025-05-31T16-04-41/#usage-examples","title":"Usage Examples","text":""},{"location":"autodoc_src_backend_app_notifications_py_2025-05-31T16-04-41/#basic-usage","title":"Basic Usage","text":"<pre><code>from app.notifications import NotificationService\n\n# Initialize service with default in-app channel\nservice = NotificationService()\n\n# Create a notification\nnotification = await service.create_notification(\n    db=db_session,\n    title=\"Welcome\",\n    message=\"Welcome to 137docs!\",\n    notification_type=\"info\"\n)\n\n# Get unread notifications\nnotifications = await service.get_all_notifications(db_session)\n\n# Mark notification as read\nawait service.mark_as_read(db_session, notification_id=1)\n</code></pre>"},{"location":"autodoc_src_backend_app_notifications_py_2025-05-31T16-04-41/#custom-channel-implementation","title":"Custom Channel Implementation","text":"<p>```python class EmailChannel(NotificationChannel):     async def send(self, notification: Notification, db: AsyncSession) -&gt; None:         # Get user email from database         user_query = select(</p>"},{"location":"autodoc_src_backend_app_notifications_py_2025-06-01T06-24-55/","title":"autodoc src backend app notifications py 2025 06 01T06 24 55","text":""},{"location":"autodoc_src_backend_app_notifications_py_2025-06-01T06-24-55/#appnotifications","title":"app.notifications","text":"<p>A modular asynchronous notification framework for 137docs that provides flexible notification delivery through configurable channels.</p>"},{"location":"autodoc_src_backend_app_notifications_py_2025-06-01T06-24-55/#overview","title":"Overview","text":"<p>This module implements a backend-only notification system with the following key features:</p> <ul> <li>Modular Channel Architecture: Support for multiple notification channels (in-app, email, Slack, SMS) through a common interface</li> <li>Asynchronous Design: Pure SQLAlchemy async implementation with no blocking database calls</li> <li>Extensible Framework: New channels can be added without modifying core logic</li> <li>Built-in Persistence: All notifications are automatically recorded in the database</li> <li>Document Monitoring: Automated checking for overdue and upcoming due dates</li> </ul>"},{"location":"autodoc_src_backend_app_notifications_py_2025-06-01T06-24-55/#classes","title":"Classes","text":""},{"location":"autodoc_src_backend_app_notifications_py_2025-06-01T06-24-55/#notificationchannel-abstract-base-class","title":"NotificationChannel (Abstract Base Class)","text":"<p>Abstract interface for implementing notification delivery channels.</p>"},{"location":"autodoc_src_backend_app_notifications_py_2025-06-01T06-24-55/#methods","title":"Methods","text":""},{"location":"autodoc_src_backend_app_notifications_py_2025-06-01T06-24-55/#sendnotification-notification-db-asyncsession-none","title":"<code>send(notification: Notification, db: AsyncSession) -&gt; None</code>","text":"<p>Abstract method - Deliver a notification via this channel.</p> <p>Parameters: - <code>notification</code> (Notification): The notification object to deliver - <code>db</code> (AsyncSession): Database session for additional queries if needed</p> <p>Returns: None</p>"},{"location":"autodoc_src_backend_app_notifications_py_2025-06-01T06-24-55/#inappchannel","title":"InAppChannel","text":"<p>Default implementation of <code>NotificationChannel</code> that stores notifications only in the database without external delivery.</p>"},{"location":"autodoc_src_backend_app_notifications_py_2025-06-01T06-24-55/#methods_1","title":"Methods","text":""},{"location":"autodoc_src_backend_app_notifications_py_2025-06-01T06-24-55/#sendnotification-notification-db-asyncsession-none_1","title":"<code>send(notification: Notification, db: AsyncSession) -&gt; None</code>","text":"<p>No-op implementation since notifications are already persisted to the database.</p> <p>Parameters: - <code>notification</code> (Notification): The notification object - <code>db</code> (AsyncSession): Database session (unused)</p> <p>Returns: None</p>"},{"location":"autodoc_src_backend_app_notifications_py_2025-06-01T06-24-55/#notificationservice","title":"NotificationService","text":"<p>Stateless service class providing high-level notification management APIs.</p>"},{"location":"autodoc_src_backend_app_notifications_py_2025-06-01T06-24-55/#constructor","title":"Constructor","text":"<pre><code>NotificationService(channels: Optional[Sequence[NotificationChannel]] = None)\n</code></pre> <p>Parameters: - <code>channels</code> (Optional[Sequence[NotificationChannel]]): List of notification channels. If None, only InAppChannel is used.</p> <p>Note: <code>InAppChannel</code> is automatically added to ensure database persistence.</p>"},{"location":"autodoc_src_backend_app_notifications_py_2025-06-01T06-24-55/#methods_2","title":"Methods","text":""},{"location":"autodoc_src_backend_app_notifications_py_2025-06-01T06-24-55/#create_notificationdb-asyncsession-title-str-message-str-notification_type-str-document_id-optionalint-none-dict","title":"<code>create_notification(db: AsyncSession, title: str, message: str, notification_type: str, document_id: Optional[int] = None) -&gt; dict</code>","text":"<p>Create and persist a new notification, then dispatch it to all configured channels.</p> <p>Parameters: - <code>db</code> (AsyncSession): Database session - <code>title</code> (str): Notification title - <code>message</code> (str): Notification message content - <code>notification_type</code> (str): Type/category of notification - <code>document_id</code> (Optional[int]): Associated document ID, if applicable</p> <p>Returns: <code>dict</code> - Serialized notification object</p> <p>Example: <pre><code>service = NotificationService()\nnotification = await service.create_notification(\n    db=session,\n    title=\"Payment Overdue\",\n    message=\"Invoice #123 is 5 days overdue\",\n    notification_type=\"overdue\",\n    document_id=123\n)\n</code></pre></p>"},{"location":"autodoc_src_backend_app_notifications_py_2025-06-01T06-24-55/#get_all_notificationsdb-asyncsession-limit-int-100-offset-int-0-include_read-bool-false-listdict","title":"<code>get_all_notifications(db: AsyncSession, limit: int = 100, offset: int = 0, include_read: bool = False) -&gt; List[dict]</code>","text":"<p>Retrieve notifications with pagination and filtering options.</p> <p>Parameters: - <code>db</code> (AsyncSession): Database session - <code>limit</code> (int, default=100): Maximum number of notifications to return - <code>offset</code> (int, default=0): Number of notifications to skip - <code>include_read</code> (bool, default=False): Whether to include read notifications</p> <p>Returns: <code>List[dict]</code> - List of serialized notification objects</p>"},{"location":"autodoc_src_backend_app_notifications_py_2025-06-01T06-24-55/#mark_as_readdb-asyncsession-notification_id-int-optionaldict","title":"<code>mark_as_read(db: AsyncSession, notification_id: int) -&gt; Optional[dict]</code>","text":"<p>Mark a specific notification as read.</p> <p>Parameters: - <code>db</code> (AsyncSession): Database session - <code>notification_id</code> (int): ID of the notification to mark as read</p> <p>Returns: <code>Optional[dict]</code> - Updated notification object, or None if not found</p>"},{"location":"autodoc_src_backend_app_notifications_py_2025-06-01T06-24-55/#mark_all_as_readdb-asyncsession-int","title":"<code>mark_all_as_read(db: AsyncSession) -&gt; int</code>","text":"<p>Mark all unread notifications as read.</p> <p>Parameters: - <code>db</code> (AsyncSession): Database session</p> <p>Returns: <code>int</code> - Number of notifications marked as read</p>"},{"location":"autodoc_src_backend_app_notifications_py_2025-06-01T06-24-55/#check_overdue_documentsdb-asyncsession-listnotification","title":"<code>check_overdue_documents(db: AsyncSession) -&gt; List[Notification]</code>","text":"<p>Scan for overdue documents and create notifications for any that don't already have unread overdue notifications.</p> <p>Parameters: - <code>db</code> (AsyncSession): Database session</p> <p>Returns: <code>List[Notification]</code> - List of newly created overdue notifications</p> <p>Behavior: - Only processes documents with status != \"paid\" and non-empty due_date - Skips documents that already have unread overdue notifications - Calculates days overdue and includes in notification message</p>"},{"location":"autodoc_src_backend_app_notifications_py_2025-06-01T06-24-55/#check_upcoming_due_datesdb-asyncsession-days_ahead-int-7-listnotification","title":"<code>check_upcoming_due_dates(db: AsyncSession, days_ahead: int = 7) -&gt; List[Notification]</code>","text":"<p>Scan for documents with upcoming due dates and create reminder notifications.</p> <p>Parameters: - <code>db</code> (AsyncSession): Database session - <code>days_ahead</code> (int, default=7): Number of days ahead to check for due dates</p> <p>Returns: <code>List[Notification]</code> - List of newly created reminder notifications</p> <p>Behavior: - Only processes documents with status != \"paid\" and non-empty due_date - Skips documents that already have unread reminder notifications - Creates notifications for documents due within the specified timeframe</p>"},{"location":"autodoc_src_backend_app_notifications_py_2025-06-01T06-24-55/#create_due_date_notificationdb-asyncsession-document-document-optionaldict","title":"<code>create_due_date_notification(db: AsyncSession, document: Document) -&gt; Optional[dict]</code>","text":"<p>Create a due date notification for a specific document.</p> <p>Parameters: - <code>db</code> (AsyncSession): Database session - <code>document</code> (Document): Document object to create notification for</p> <p>Returns: <code>Optional[dict]</code> - Created notification object, or None if document has no due date</p>"},{"location":"autodoc_src_backend_app_notifications_py_2025-06-01T06-24-55/#utility-functions","title":"Utility Functions","text":""},{"location":"autodoc_src_backend_app_notifications_py_2025-06-01T06-24-55/#_notification_to_dictnotif-notification-dictstr-object","title":"<code>_notification_to_dict(notif: Notification) -&gt; dict[str, object]</code>","text":"<p>Internal function - Convert a Notification model instance to a JSON-serializable dictionary.</p> <p>Parameters: - <code>notif</code> (Notification): Notification model instance</p> <p>Returns: <code>dict[str, object]</code> - Serialized notification data</p> <p>Output Format: <pre><code>{\n    \"id\": int,\n    \"title\": str,\n    \"message\": str,\n    \"type\": str,\n    \"document_id\": Optional[int],\n    \"is_read\": bool,\n    \"created_at\": Optional[str]  # ISO format\n}\n</code></pre></p>"},{"location":"autodoc_src_backend_app_notifications_py_2025-06-01T06-24-55/#usage-examples","title":"Usage Examples","text":""},{"location":"autodoc_src_backend_app_notifications_py_2025-06-01T06-24-55/#basic-setup","title":"Basic Setup","text":"<p>```python from app.notifications import NotificationService</p>"},{"location":"autodoc_src_backend_app_notifications_py_2025-06-01T06-24-55/#use-default-in-","title":"Use default in-","text":""},{"location":"autodoc_src_backend_app_ocr_py_2025-05-31T16-01-37/","title":"autodoc src backend app ocr py 2025 05 31T16 01 37","text":""},{"location":"autodoc_src_backend_app_ocr_py_2025-05-31T16-01-37/#ocr-and-document-processing-module","title":"OCR and Document Processing Module","text":""},{"location":"autodoc_src_backend_app_ocr_py_2025-05-31T16-01-37/#overview","title":"Overview","text":"<p>The OCR and Document Processing module provides asynchronous text extraction capabilities for the Document Management System. This module is designed to efficiently process various document formats including PDFs, images, and text files while minimizing memory overhead and avoiding common stability issues associated with external libraries.</p>"},{"location":"autodoc_src_backend_app_ocr_py_2025-05-31T16-01-37/#features","title":"Features","text":"<ul> <li>Asynchronous Processing: All document processing operations are non-blocking</li> <li>Multi-format Support: Handles PDF, image (JPG, PNG, TIFF), and text files</li> <li>Intelligent PDF Processing: Uses a two-pass approach to optimize performance and stability</li> <li>Lazy Loading: Heavy libraries are imported only when needed to reduce startup costs</li> <li>Error Handling: Comprehensive error handling with detailed logging</li> </ul>"},{"location":"autodoc_src_backend_app_ocr_py_2025-05-31T16-01-37/#architecture","title":"Architecture","text":""},{"location":"autodoc_src_backend_app_ocr_py_2025-05-31T16-01-37/#lazy-import-system","title":"Lazy Import System","text":"<p>The module implements a lazy import system to minimize memory overhead:</p> <pre><code>def _lazy_import(module_name: str)\n</code></pre> <p>Purpose: Imports modules only when first needed and caches them for reuse.</p> <p>Parameters: - <code>module_name</code> (str): Name of the module to import</p> <p>Returns: The imported module</p>"},{"location":"autodoc_src_backend_app_ocr_py_2025-05-31T16-01-37/#ocrprocessor-class","title":"OCRProcessor Class","text":"<p>The main class responsible for document processing operations.</p>"},{"location":"autodoc_src_backend_app_ocr_py_2025-05-31T16-01-37/#api-reference","title":"API Reference","text":""},{"location":"autodoc_src_backend_app_ocr_py_2025-05-31T16-01-37/#ocrprocessorprocess_document","title":"OCRProcessor.process_document()","text":"<pre><code>async def process_document(self, file_path: str) -&gt; str\n</code></pre> <p>Description: Main entry point for document processing. Automatically detects file type and routes to appropriate processing method.</p> <p>Parameters: - <code>file_path</code> (str): Path to the document file to process</p> <p>Returns:  - <code>str</code>: Extracted text content from the document</p> <p>Supported File Types: - PDF: <code>.pdf</code> - Images: <code>.jpg</code>, <code>.jpeg</code>, <code>.png</code>, <code>.tiff</code>, <code>.tif</code> - Text: <code>.txt</code></p> <p>Example Usage: <pre><code>processor = OCRProcessor()\ntext = await processor.process_document(\"/path/to/document.pdf\")\n</code></pre></p>"},{"location":"autodoc_src_backend_app_ocr_py_2025-05-31T16-01-37/#private-methods","title":"Private Methods","text":""},{"location":"autodoc_src_backend_app_ocr_py_2025-05-31T16-01-37/#_process_pdf","title":"_process_pdf()","text":"<pre><code>async def _process_pdf(self, file_path: str) -&gt; str\n</code></pre> <p>Description: Processes PDF files using a two-pass approach for optimal performance and stability.</p> <p>Processing Strategy: 1. Pass 1: Extract embedded text using <code>pdfplumber</code> (pure Python, stable) 2. Pass 2: Apply OCR only to pages without extractable text using <code>PyMuPDF</code></p> <p>Benefits: - Avoids segmentation faults from external poppler libraries - Minimizes expensive OCR operations - Maintains high text quality from digital PDFs</p>"},{"location":"autodoc_src_backend_app_ocr_py_2025-05-31T16-01-37/#_process_image","title":"_process_image()","text":"<pre><code>async def _process_image(self, file_path: str) -&gt; str\n</code></pre> <p>Description: Processes image files using Tesseract OCR.</p> <p>Parameters: - <code>file_path</code> (str): Path to the image file</p> <p>Returns:  - <code>str</code>: Extracted text from the image</p> <p>OCR Configuration: - Language: English (<code>eng</code>) - Processing: Asynchronous using thread pool</p>"},{"location":"autodoc_src_backend_app_ocr_py_2025-05-31T16-01-37/#_process_text","title":"_process_text()","text":"<pre><code>async def _process_text(self, file_path: str) -&gt; str\n</code></pre> <p>Description: Reads and returns content from plain text files.</p> <p>Parameters: - <code>file_path</code> (str): Path to the text file</p> <p>Returns:  - <code>str</code>: File content</p>"},{"location":"autodoc_src_backend_app_ocr_py_2025-05-31T16-01-37/#dependencies","title":"Dependencies","text":""},{"location":"autodoc_src_backend_app_ocr_py_2025-05-31T16-01-37/#required-libraries","title":"Required Libraries","text":"<ul> <li><code>pytesseract</code>: OCR engine interface</li> <li><code>PIL</code> (Pillow): Image processing</li> <li><code>pdfplumber</code>: PDF text extraction (pure Python)</li> <li><code>fitz</code> (PyMuPDF): PDF rendering and manipulation</li> </ul>"},{"location":"autodoc_src_backend_app_ocr_py_2025-05-31T16-01-37/#system-requirements","title":"System Requirements","text":"<ul> <li>Tesseract OCR engine must be installed on the system</li> <li>Python 3.7+ (for asyncio support)</li> </ul>"},{"location":"autodoc_src_backend_app_ocr_py_2025-05-31T16-01-37/#error-handling","title":"Error Handling","text":"<p>The module implements comprehensive error handling:</p> <ul> <li>File Type Errors: Unsupported file types return descriptive error messages</li> <li>Processing Errors: Exceptions are caught and logged with detailed error information</li> <li>Fallback Mechanisms: PDF processing falls back to OCR when text extraction fails</li> </ul>"},{"location":"autodoc_src_backend_app_ocr_py_2025-05-31T16-01-37/#logging","title":"Logging","text":"<p>The module uses Python's built-in logging system:</p> <pre><code>logger = logging.getLogger(__name__)\n</code></pre> <p>Log Levels Used: - <code>INFO</code>: Processing status and progress updates - <code>WARNING</code>: Non-critical issues (unsupported file types, fallback scenarios) - <code>ERROR</code>: Processing failures and exceptions</p>"},{"location":"autodoc_src_backend_app_ocr_py_2025-05-31T16-01-37/#performance-considerations","title":"Performance Considerations","text":"<ol> <li>Memory Efficiency: Lazy imports prevent unnecessary memory usage</li> <li>Processing Optimization: PDF text extraction is prioritized over OCR</li> <li>Async Operations: All I/O operations are non-blocking</li> <li>Selective OCR: Only pages without embedded text undergo OCR processing</li> </ol>"},{"location":"autodoc_src_backend_app_ocr_py_2025-05-31T16-01-37/#usage-examples","title":"Usage Examples","text":""},{"location":"autodoc_src_backend_app_ocr_py_2025-05-31T16-01-37/#basic-document-processing","title":"Basic Document Processing","text":"<pre><code>import asyncio\nfrom ocr_module import OCRProcessor\n\nasync def main():\n    processor = OCRProcessor()\n\n    # Process a PDF\n    pdf_text = await processor.process_document(\"document.pdf\")\n\n    # Process an image\n    image_text = await processor.process_document(\"scan.png\")\n\n    # Process a text file\n    text_content = await processor.process_document(\"notes.txt\")\n\nasyncio.run(main())\n</code></pre>"},{"location":"autodoc_src_backend_app_ocr_py_2025-05-31T16-01-37/#batch-processing","title":"Batch Processing","text":"<pre><code>async def process_multiple_documents(file_paths):\n    processor = OCRProcessor()\n    tasks = [processor.process_document(path) for path in file_paths]\n    results = await asyncio.gather(*tasks)\n    return results\n</code></pre>"},{"location":"autodoc_src_backend_app_ocr_py_2025-05-31T16-01-37/#best-practices","title":"Best Practices","text":"<ol> <li>Error Handling: Always handle potential exceptions when calling document processing methods</li> <li>File Validation: Verify file existence and permissions before processing</li> <li>Memory Management: For large batch operations, consider processing documents in chunks</li> <li>Logging Configuration: Configure appropriate log levels for production environments</li> </ol>"},{"location":"autodoc_src_backend_app_ocr_py_2025-06-01T06-21-49/","title":"autodoc src backend app ocr py 2025 06 01T06 21 49","text":""},{"location":"autodoc_src_backend_app_ocr_py_2025-06-01T06-21-49/#ocr-and-document-processing-module","title":"OCR and Document Processing Module","text":""},{"location":"autodoc_src_backend_app_ocr_py_2025-06-01T06-21-49/#overview","title":"Overview","text":"<p>This module provides OCR (Optical Character Recognition) and document processing capabilities for the Document Management System. It supports multiple document formats including PDFs, images, and text files, with optimized processing strategies to minimize resource usage and avoid common stability issues.</p>"},{"location":"autodoc_src_backend_app_ocr_py_2025-06-01T06-21-49/#key-features","title":"Key Features","text":"<ul> <li>Multi-format support: PDF, image (JPG, PNG, TIFF), and text files</li> <li>Optimized PDF processing: Hybrid approach using embedded text extraction and selective OCR</li> <li>Asynchronous processing: Non-blocking operations for better performance</li> <li>Lazy imports: Reduced startup cost and memory overhead</li> <li>Error handling: Comprehensive logging and graceful error recovery</li> </ul>"},{"location":"autodoc_src_backend_app_ocr_py_2025-06-01T06-21-49/#dependencies","title":"Dependencies","text":"<ul> <li><code>pytesseract</code>: OCR text extraction</li> <li><code>PIL (Pillow)</code>: Image processing</li> <li><code>pdfplumber</code>: PDF text extraction (lightweight, pure Python)</li> <li><code>PyMuPDF (fitz)</code>: PDF rasterization when OCR is needed</li> <li>Standard library: <code>os</code>, <code>logging</code>, <code>asyncio</code>, <code>io</code>, <code>importlib</code></li> </ul>"},{"location":"autodoc_src_backend_app_ocr_py_2025-06-01T06-21-49/#classes","title":"Classes","text":""},{"location":"autodoc_src_backend_app_ocr_py_2025-06-01T06-21-49/#ocrprocessor","title":"OCRProcessor","text":"<p>Main class responsible for processing documents and extracting text content.</p>"},{"location":"autodoc_src_backend_app_ocr_py_2025-06-01T06-21-49/#methods","title":"Methods","text":""},{"location":"autodoc_src_backend_app_ocr_py_2025-06-01T06-21-49/#process_documentfile_path-str-str","title":"<code>process_document(file_path: str) -&gt; str</code>","text":"<p>Description: Main entry point for document processing. Automatically detects file type and applies appropriate processing strategy.</p> <p>Parameters: - <code>file_path</code> (str): Absolute or relative path to the document file</p> <p>Returns:  - <code>str</code>: Extracted text content from the document</p> <p>Supported File Types: - PDF: <code>.pdf</code> - Images: <code>.jpg</code>, <code>.jpeg</code>, <code>.png</code>, <code>.tiff</code>, <code>.tif</code> - Text: <code>.txt</code></p> <p>Example: <pre><code>processor = OCRProcessor()\ntext = await processor.process_document(\"/path/to/document.pdf\")\n</code></pre></p>"},{"location":"autodoc_src_backend_app_ocr_py_2025-06-01T06-21-49/#_process_pdffile_path-str-str-private","title":"<code>_process_pdf(file_path: str) -&gt; str</code> (Private)","text":"<p>Description: Specialized PDF processing using a two-pass approach for optimal performance and stability.</p> <p>Processing Strategy: 1. Pass 1: Extract embedded text using <code>pdfplumber</code> (fast, stable) 2. Pass 2: Apply OCR only to pages without embedded text using <code>PyMuPDF</code> rasterization</p> <p>Parameters: - <code>file_path</code> (str): Path to the PDF file</p> <p>Returns: - <code>str</code>: Complete extracted text from all pages</p> <p>Benefits: - Avoids unnecessary OCR on digital-native PDFs - Eliminates segmentation faults from poppler C-libraries - Significantly faster processing for text-based PDFs</p>"},{"location":"autodoc_src_backend_app_ocr_py_2025-06-01T06-21-49/#_process_imagefile_path-str-str-private","title":"<code>_process_image(file_path: str) -&gt; str</code> (Private)","text":"<p>Description: Processes image files using Tesseract OCR.</p> <p>Parameters: - <code>file_path</code> (str): Path to the image file</p> <p>Returns: - <code>str</code>: Extracted text from the image</p> <p>Configuration: - Language: English (<code>eng</code>) - Asynchronous processing to avoid blocking</p>"},{"location":"autodoc_src_backend_app_ocr_py_2025-06-01T06-21-49/#_process_textfile_path-str-str-private","title":"<code>_process_text(file_path: str) -&gt; str</code> (Private)","text":"<p>Description: Reads and returns content from plain text files.</p> <p>Parameters: - <code>file_path</code> (str): Path to the text file</p> <p>Returns: - <code>str</code>: File content as string</p>"},{"location":"autodoc_src_backend_app_ocr_py_2025-06-01T06-21-49/#utility-functions","title":"Utility Functions","text":""},{"location":"autodoc_src_backend_app_ocr_py_2025-06-01T06-21-49/#_lazy_importmodule_name-str","title":"<code>_lazy_import(module_name: str)</code>","text":"<p>Description: Lazy imports heavy-weight libraries only when needed and caches them for reuse.</p> <p>Parameters: - <code>module_name</code> (str): Name of the module to import</p> <p>Returns: - Module object</p> <p>Purpose: Reduces startup cost and memory overhead by deferring imports of resource-intensive libraries.</p>"},{"location":"autodoc_src_backend_app_ocr_py_2025-06-01T06-21-49/#usage-examples","title":"Usage Examples","text":""},{"location":"autodoc_src_backend_app_ocr_py_2025-06-01T06-21-49/#basic-document-processing","title":"Basic Document Processing","text":"<pre><code>import asyncio\nfrom ocr_processor import OCRProcessor\n\nasync def main():\n    processor = OCRProcessor()\n\n    # Process a PDF\n    pdf_text = await processor.process_document(\"document.pdf\")\n    print(f\"Extracted {len(pdf_text)} characters from PDF\")\n\n    # Process an image\n    image_text = await processor.process_document(\"scanned_doc.png\")\n    print(f\"OCR extracted: {image_text[:100]}...\")\n\n    # Process a text file\n    text_content = await processor.process_document(\"readme.txt\")\n    print(f\"Text file content: {text_content}\")\n\n# Run the async function\nasyncio.run(main())\n</code></pre>"},{"location":"autodoc_src_backend_app_ocr_py_2025-06-01T06-21-49/#error-handling","title":"Error Handling","text":"<pre><code>async def process_with_error_handling():\n    processor = OCRProcessor()\n\n    try:\n        text = await processor.process_document(\"document.pdf\")\n        if text.startswith(\"Error processing document\"):\n            print(\"Processing failed, but application continues\")\n        else:\n            print(f\"Successfully extracted: {len(text)} characters\")\n    except Exception as e:\n        print(f\"Unexpected error: {e}\")\n</code></pre>"},{"location":"autodoc_src_backend_app_ocr_py_2025-06-01T06-21-49/#configuration-requirements","title":"Configuration Requirements","text":""},{"location":"autodoc_src_backend_app_ocr_py_2025-06-01T06-21-49/#tesseract-installation","title":"Tesseract Installation","text":"<p>Ensure Tesseract OCR is installed on your system:</p> <p>Ubuntu/Debian: <pre><code>sudo apt-get install tesseract-ocr tesseract-ocr-eng\n</code></pre></p> <p>macOS: <pre><code>brew install tesseract\n</code></pre></p> <p>Windows: Download and install from the official Tesseract repository.</p>"},{"location":"autodoc_src_backend_app_ocr_py_2025-06-01T06-21-49/#python-dependencies","title":"Python Dependencies","text":"<p>Install required packages: <pre><code>pip install pytesseract Pillow pdfplumber PyMuPDF\n</code></pre></p>"},{"location":"autodoc_src_backend_app_ocr_py_2025-06-01T06-21-49/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>PDF Processing: The hybrid approach significantly reduces processing time for digital PDFs</li> <li>Memory Usage: Lazy imports keep memory footprint low until processing begins</li> <li>Concurrency: Async processing allows handling multiple documents simultaneously</li> <li>OCR Optimization: Only processes pages that actually need OCR, avoiding unnecessary computation</li> </ul>"},{"location":"autodoc_src_backend_app_ocr_py_2025-06-01T06-21-49/#error-handling_1","title":"Error Handling","text":"<p>The module implements comprehensive error handling:</p> <ul> <li>File Type Errors: Unsupported formats return descriptive error messages</li> <li>Processing Errors: Individual document failures are logged and return error descriptions</li> <li>Library Failures: Graceful fallbacks when extraction libraries fail</li> <li>Logging: Detailed logging for debugging and monitoring</li> </ul>"},{"location":"autodoc_src_backend_app_ocr_py_2025-06-01T06-21-49/#logging","title":"Logging","text":"<p>The module uses Python's standard logging framework with the logger name matching the module name. Configure logging levels as needed:</p> <p>```python import logging logging.getLogger('ocr_processor').</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-05-31T16-02-58/","title":"autodoc src backend app repository py 2025 05 31T16 02 58","text":""},{"location":"autodoc_src_backend_app_repository_py_2025-05-31T16-02-58/#document-repository-api-documentation","title":"Document Repository API Documentation","text":"<p>This module provides data access repositories for managing documents, users, LLM configurations, tenants, and processing rules in an async SQLAlchemy-based application.</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-05-31T16-02-58/#table-of-contents","title":"Table of Contents","text":"<ul> <li>DocumentRepository</li> <li>UserRepository</li> <li>LLMConfigRepository</li> <li>TenantRepository</li> <li>ProcessingRuleRepository</li> </ul>"},{"location":"autodoc_src_backend_app_repository_py_2025-05-31T16-02-58/#documentrepository","title":"DocumentRepository","text":"<p>Repository class for document data access operations with support for tagging, filtering, and search functionality.</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-05-31T16-02-58/#methods","title":"Methods","text":""},{"location":"autodoc_src_backend_app_repository_py_2025-05-31T16-02-58/#createdb-asyncsession-document-document-document","title":"<code>create(db: AsyncSession, document: Document) -&gt; Document</code>","text":"<p>Creates a new document in the database.</p> <p>Parameters: - <code>db</code>: Active database session - <code>document</code>: Document model instance to create</p> <p>Returns: - <code>Document</code>: The created document with generated ID</p> <p>Example: <pre><code>doc = Document(title=\"Sample\", content=\"Content\")\ncreated_doc = await repo.create(db, doc)\n</code></pre></p>"},{"location":"autodoc_src_backend_app_repository_py_2025-05-31T16-02-58/#get_by_iddb-asyncsession-document_id-int-as_dict-bool-false-optionaluniondocument-dictstr-any","title":"<code>get_by_id(db: AsyncSession, document_id: int, as_dict: bool = False) -&gt; Optional[Union[Document, Dict[str, Any]]]</code>","text":"<p>Retrieves a document by its ID with associated tags pre-loaded.</p> <p>Parameters: - <code>db</code>: Active database session - <code>document_id</code>: Unique identifier of the document - <code>as_dict</code>: If True, returns dictionary representation instead of model instance</p> <p>Returns: - <code>Document | Dict | None</code>: Document instance/dict if found, None otherwise</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-05-31T16-02-58/#get_alldb-asyncsession-status-optionalstr-none-document_type-optionalstr-none-search-optionalstr-none-listuniondocument-dictstr-any","title":"<code>get_all(db: AsyncSession, status: Optional[str] = None, document_type: Optional[str] = None, search: Optional[str] = None) -&gt; List[Union[Document, Dict[str, Any]]]</code>","text":"<p>Retrieves all documents with optional filtering and search capabilities.</p> <p>Parameters: - <code>db</code>: Active database session - <code>status</code>: Filter by document status (optional) - <code>document_type</code>: Filter by document type (optional) - <code>search</code>: Search term for title, content, or sender (optional)</p> <p>Returns: - <code>List[Dict]</code>: List of document dictionaries ordered by creation date (descending)</p> <p>Example: <pre><code># Get all pending invoices containing \"urgent\"\ndocs = await repo.get_all(db, status=\"pending\", document_type=\"invoice\", search=\"urgent\")\n</code></pre></p>"},{"location":"autodoc_src_backend_app_repository_py_2025-05-31T16-02-58/#updatedb-asyncsession-document-document-document","title":"<code>update(db: AsyncSession, document: Document) -&gt; Document</code>","text":"<p>Updates an existing document in the database.</p> <p>Parameters: - <code>db</code>: Active database session - <code>document</code>: Document instance with updated fields</p> <p>Returns: - <code>Document</code>: The updated document</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-05-31T16-02-58/#deletedb-asyncsession-document_id-int-bool","title":"<code>delete(db: AsyncSession, document_id: int) -&gt; bool</code>","text":"<p>Deletes a document and its tag associations.</p> <p>Parameters: - <code>db</code>: Active database session - <code>document_id</code>: ID of document to delete</p> <p>Returns: - <code>bool</code>: True if deleted successfully, False if document not found</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-05-31T16-02-58/#tag-management-methods","title":"Tag Management Methods","text":""},{"location":"autodoc_src_backend_app_repository_py_2025-05-31T16-02-58/#add_tagdb-asyncsession-document_id-int-tag_name-str-bool","title":"<code>add_tag(db: AsyncSession, document_id: int, tag_name: str) -&gt; bool</code>","text":"<p>Adds a tag to a document, creating the tag if it doesn't exist.</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-05-31T16-02-58/#remove_tagdb-asyncsession-document_id-int-tag_name-str-bool","title":"<code>remove_tag(db: AsyncSession, document_id: int, tag_name: str) -&gt; bool</code>","text":"<p>Removes a tag from a document.</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-05-31T16-02-58/#get_tagsdb-asyncsession-document_id-int-liststr","title":"<code>get_tags(db: AsyncSession, document_id: int) -&gt; List[str]</code>","text":"<p>Retrieves all tag names for a document.</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-05-31T16-02-58/#helper-methods","title":"Helper Methods","text":""},{"location":"autodoc_src_backend_app_repository_py_2025-05-31T16-02-58/#_to_dictdoc-document-include_tags-bool-true-dictstr-any","title":"<code>_to_dict(doc: Document, include_tags: bool = True) -&gt; Dict[str, Any]</code>","text":"<p>Static method that converts a Document model to a JSON-serializable dictionary.</p> <p>Features: - Converts vector embeddings to Python float lists - Handles datetime serialization to ISO format - Flattens tags to list of names - Strips SQLAlchemy state information - Converts numpy types and decimals appropriately</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-05-31T16-02-58/#userrepository","title":"UserRepository","text":"<p>Repository for user account management operations.</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-05-31T16-02-58/#methods_1","title":"Methods","text":""},{"location":"autodoc_src_backend_app_repository_py_2025-05-31T16-02-58/#get_alldb-asyncsession-listdict","title":"<code>get_all(db: AsyncSession) -&gt; List[dict]</code>","text":"<p>Retrieves all users ordered by creation date.</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-05-31T16-02-58/#get_by_iddb-asyncsession-user_id-int-optionaldict","title":"<code>get_by_id(db: AsyncSession, user_id: int) -&gt; Optional[dict]</code>","text":"<p>Retrieves a user by ID, returning dictionary representation.</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-05-31T16-02-58/#get_by_usernamedb-asyncsession-username-str-optionaluserdb","title":"<code>get_by_username(db: AsyncSession, username: str) -&gt; Optional[UserDB]</code>","text":"<p>Retrieves user by username, returning the actual model instance for authentication purposes.</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-05-31T16-02-58/#createdb-asyncsession-data-dict","title":"<code>create(db: AsyncSession, **data) -&gt; dict</code>","text":"<p>Creates a new user with provided data.</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-05-31T16-02-58/#updatedb-asyncsession-user_id-int-data-optionaldict","title":"<code>update(db: AsyncSession, user_id: int, **data) -&gt; Optional[dict]</code>","text":"<p>Updates user information.</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-05-31T16-02-58/#deletedb-asyncsession-user_id-int-bool","title":"<code>delete(db: AsyncSession, user_id: int) -&gt; bool</code>","text":"<p>Deletes a user account.</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-05-31T16-02-58/#llmconfigrepository","title":"LLMConfigRepository","text":"<p>Repository for managing Large Language Model configuration settings.</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-05-31T16-02-58/#methods_2","title":"Methods","text":""},{"location":"autodoc_src_backend_app_repository_py_2025-05-31T16-02-58/#get_configdb-asyncsession-optionaldict","title":"<code>get_config(db: AsyncSession) -&gt; Optional[dict]</code>","text":"<p>Retrieves the current LLM configuration (singleton pattern).</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-05-31T16-02-58/#create_default_configdb-asyncsession-dict","title":"<code>create_default_config(db: AsyncSession) -&gt; dict</code>","text":"<p>Creates a default LLM configuration with model defaults.</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-05-31T16-02-58/#update_configdb-asyncsession-data-dict","title":"<code>update_config(db: AsyncSession, **data) -&gt; dict</code>","text":"<p>Updates LLM configuration, creating new config if none exists.</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-05-31T16-02-58/#test_connectiondb-asyncsession-provider-str-api_url-str-none-api_key-str-none-dict","title":"<code>test_connection(db: AsyncSession, provider: str, api_url: str = None, api_key: str = None) -&gt; dict</code>","text":"<p>Tests connection to LLM provider.</p> <p>Returns: <pre><code>{\n    \"status\": \"success\" | \"error\",\n    \"message\": \"Connection status message\",\n    \"available_models\": [\"model1\", \"model2\", ...]\n}\n</code></pre></p>"},{"location":"autodoc_src_backend_app_repository_py_2025-05-31T16-02-58/#tenantrepository","title":"TenantRepository","text":"<p>Repository for managing tenant (Entity) profiles and user-tenant relationships.</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-05-31T16-02-58/#methods_3","title":"Methods","text":""},{"location":"autodoc_src_backend_app_repository_py_2025-05-31T16-02-58/#get_user_tenantsdb-asyncsession-user_id-int-listdict","title":"<code>get_user_tenants(db: AsyncSession, user_id: int) -&gt; List[dict]</code>","text":"<p>Retrieves all active tenants for a user, ordered by default status and alias.</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-05-31T16-02-58/#get_default_tenantdb-asyncsession-user_id-int-optionaldict","title":"<code>get_default_tenant(db: AsyncSession, user_id: int) -&gt; Optional[dict]</code>","text":"<p>Gets the default tenant for a user.</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-05-31T16-02-58/#get_tenant_by_iddb-asyncsession-user_id-int-tenant_id-int-optionaldict","title":"<code>get_tenant_by_id(db: AsyncSession, user_id: int, tenant_id: int) -&gt; Optional[dict]</code>","text":"<p>Retrieves a specific tenant by ID for a user.</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-05-31T16-02-58/#create_tenantdb-asyncsession-user_id-int","title":"`create_tenant(db: AsyncSession, user_id: int, **","text":""},{"location":"autodoc_src_backend_app_repository_py_2025-06-01T06-23-11/","title":"autodoc src backend app repository py 2025 06 01T06 23 11","text":""},{"location":"autodoc_src_backend_app_repository_py_2025-06-01T06-23-11/#document-repository-documentation","title":"Document Repository Documentation","text":""},{"location":"autodoc_src_backend_app_repository_py_2025-06-01T06-23-11/#overview","title":"Overview","text":"<p>This module provides data access layer (repository pattern) implementations for document management operations. It includes repositories for documents, users, LLM configurations, tenants (entities), and processing rules.</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-06-01T06-23-11/#classes","title":"Classes","text":""},{"location":"autodoc_src_backend_app_repository_py_2025-06-01T06-23-11/#documentrepository","title":"DocumentRepository","text":"<p>Repository class for managing document-related database operations.</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-06-01T06-23-11/#methods","title":"Methods","text":""},{"location":"autodoc_src_backend_app_repository_py_2025-06-01T06-23-11/#createdb-asyncsession-document-document-document","title":"<code>create(db: AsyncSession, document: Document) -&gt; Document</code>","text":"<p>Creates a new document in the database.</p> <p>Parameters: - <code>db</code> (AsyncSession): Database session for the operation - <code>document</code> (Document): Document instance to create</p> <p>Returns: - <code>Document</code>: The created document with populated database fields</p> <p>Example: <pre><code>repo = DocumentRepository()\nnew_doc = Document(title=\"Sample\", content=\"Content\")\ncreated = await repo.create(db, new_doc)\n</code></pre></p>"},{"location":"autodoc_src_backend_app_repository_py_2025-06-01T06-23-11/#get_by_iddb-asyncsession-document_id-int-as_dict-bool-false-optionaluniondocument-dictstr-any","title":"<code>get_by_id(db: AsyncSession, document_id: int, as_dict: bool = False) -&gt; Optional[Union[Document, Dict[str, Any]]]</code>","text":"<p>Retrieves a document by its ID with associated tags loaded.</p> <p>Parameters: - <code>db</code> (AsyncSession): Database session - <code>document_id</code> (int): ID of the document to retrieve - <code>as_dict</code> (bool, optional): Return as dictionary instead of model instance. Defaults to False</p> <p>Returns: - <code>Optional[Union[Document, Dict[str, Any]]]</code>: Document instance/dict if found, None otherwise</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-06-01T06-23-11/#get_alldb-asyncsession-status-optionalstr-none-document_type-optionalstr-none-search-optionalstr-none-listuniondocument-dictstr-any","title":"<code>get_all(db: AsyncSession, status: Optional[str] = None, document_type: Optional[str] = None, search: Optional[str] = None) -&gt; List[Union[Document, Dict[str, Any]]]</code>","text":"<p>Retrieves all documents with optional filtering and searching capabilities.</p> <p>Parameters: - <code>db</code> (AsyncSession): Database session - <code>status</code> (Optional[str]): Filter by document status - <code>document_type</code> (Optional[str]): Filter by document type - <code>search</code> (Optional[str]): Search term for title, content, or sender</p> <p>Returns: - <code>List[Union[Document, Dict[str, Any]]]</code>: List of documents as dictionaries, ordered by creation date (descending)</p> <p>Search Behavior: - Performs case-insensitive search across title, content, and sender fields - Multiple filters are combined with AND logic</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-06-01T06-23-11/#updatedb-asyncsession-document-document-document","title":"<code>update(db: AsyncSession, document: Document) -&gt; Document</code>","text":"<p>Updates an existing document in the database.</p> <p>Parameters: - <code>db</code> (AsyncSession): Database session - <code>document</code> (Document): Document instance with updated values</p> <p>Returns: - <code>Document</code>: The updated document with refreshed database state</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-06-01T06-23-11/#deletedb-asyncsession-document_id-int-bool","title":"<code>delete(db: AsyncSession, document_id: int) -&gt; bool</code>","text":"<p>Deletes a document and its tag associations.</p> <p>Parameters: - <code>db</code> (AsyncSession): Database session - <code>document_id</code> (int): ID of the document to delete</p> <p>Returns: - <code>bool</code>: True if document was deleted, False if document not found</p> <p>Note: This method safely removes tag associations first to avoid async lazy-loading issues, then deletes the document.</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-06-01T06-23-11/#add_tagdb-asyncsession-document_id-int-tag_name-str-bool","title":"<code>add_tag(db: AsyncSession, document_id: int, tag_name: str) -&gt; bool</code>","text":"<p>Adds a tag to a document, creating the tag if it doesn't exist.</p> <p>Parameters: - <code>db</code> (AsyncSession): Database session - <code>document_id</code> (int): ID of the target document - <code>tag_name</code> (str): Name of the tag to add</p> <p>Returns: - <code>bool</code>: True if tag was added, False if document not found</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-06-01T06-23-11/#remove_tagdb-asyncsession-document_id-int-tag_name-str-bool","title":"<code>remove_tag(db: AsyncSession, document_id: int, tag_name: str) -&gt; bool</code>","text":"<p>Removes a tag from a document.</p> <p>Parameters: - <code>db</code> (AsyncSession): Database session - <code>document_id</code> (int): ID of the target document - <code>tag_name</code> (str): Name of the tag to remove</p> <p>Returns: - <code>bool</code>: True if tag was removed, False if document or tag not found</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-06-01T06-23-11/#get_tagsdb-asyncsession-document_id-int-liststr","title":"<code>get_tags(db: AsyncSession, document_id: int) -&gt; List[str]</code>","text":"<p>Retrieves all tag names associated with a document.</p> <p>Parameters: - <code>db</code> (AsyncSession): Database session - <code>document_id</code> (int): ID of the target document</p> <p>Returns: - <code>List[str]</code>: List of tag names, empty list if document not found</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-06-01T06-23-11/#static-methods","title":"Static Methods","text":""},{"location":"autodoc_src_backend_app_repository_py_2025-06-01T06-23-11/#_to_dictdoc-document-include_tags-bool-true-dictstr-any","title":"<code>_to_dict(doc: Document, include_tags: bool = True) -&gt; Dict[str, Any]</code>","text":"<p>Converts a Document model instance to a JSON-serializable dictionary.</p> <p>Parameters: - <code>doc</code> (Document): Document instance to convert - <code>include_tags</code> (bool): Whether to include tags in the output. Defaults to True</p> <p>Returns: - <code>Dict[str, Any]</code>: Serializable dictionary representation</p> <p>Features: - Converts vector embeddings to float lists - Handles datetime serialization to ISO format - Converts numpy types and decimals to JSON-compatible types - Flattens tag relationships to simple name lists - Strips SQLAlchemy internal state</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-06-01T06-23-11/#userrepository","title":"UserRepository","text":"<p>Repository for user management operations.</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-06-01T06-23-11/#methods_1","title":"Methods","text":""},{"location":"autodoc_src_backend_app_repository_py_2025-06-01T06-23-11/#get_alldb-asyncsession-listdict","title":"<code>get_all(db: AsyncSession) -&gt; List[dict]</code>","text":"<p>Retrieves all users ordered by creation date.</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-06-01T06-23-11/#get_by_iddb-asyncsession-user_id-int-optionaldict","title":"<code>get_by_id(db: AsyncSession, user_id: int) -&gt; Optional[dict]</code>","text":"<p>Retrieves a user by ID as a dictionary.</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-06-01T06-23-11/#get_by_usernamedb-asyncsession-username-str-optionaluserdb","title":"<code>get_by_username(db: AsyncSession, username: str) -&gt; Optional[UserDB]</code>","text":"<p>Retrieves a user by username, returning the actual model instance for authentication.</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-06-01T06-23-11/#createdb-asyncsession-data-dict","title":"<code>create(db: AsyncSession, **data) -&gt; dict</code>","text":"<p>Creates a new user with the provided data.</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-06-01T06-23-11/#updatedb-asyncsession-user_id-int-data-optionaldict","title":"<code>update(db: AsyncSession, user_id: int, **data) -&gt; Optional[dict]</code>","text":"<p>Updates user information by ID.</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-06-01T06-23-11/#deletedb-asyncsession-user_id-int-bool","title":"<code>delete(db: AsyncSession, user_id: int) -&gt; bool</code>","text":"<p>Deletes a user by ID, returns True if successful.</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-06-01T06-23-11/#llmconfigrepository","title":"LLMConfigRepository","text":"<p>Repository for managing Large Language Model configuration settings.</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-06-01T06-23-11/#methods_2","title":"Methods","text":""},{"location":"autodoc_src_backend_app_repository_py_2025-06-01T06-23-11/#get_configdb-asyncsession-optionaldict","title":"<code>get_config(db: AsyncSession) -&gt; Optional[dict]</code>","text":"<p>Retrieves the current LLM configuration (singleton pattern).</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-06-01T06-23-11/#create_default_configdb-asyncsession-dict","title":"<code>create_default_config(db: AsyncSession) -&gt; dict</code>","text":"<p>Creates a default LLM configuration with model defaults.</p>"},{"location":"autodoc_src_backend_app_repository_py_2025-06-01T06-23-11/#update_configdb-asyncsession-data-dict","title":"<code>update_config(db: AsyncSession, **data) -&gt; dict</code>","text":"<p>Updates or creates LLM configuration</p>"},{"location":"autodoc_src_backend_app_rule_engine_py_2025-05-31T15-58-21/","title":"autodoc src backend app rule engine py 2025 05 31T15 58 21","text":""},{"location":"autodoc_src_backend_app_rule_engine_py_2025-05-31T15-58-21/#rule-engine-documentation","title":"Rule Engine Documentation","text":""},{"location":"autodoc_src_backend_app_rule_engine_py_2025-05-31T15-58-21/#overview","title":"Overview","text":"<p>The Rule Engine module provides automated document processing and classification functionality. It evaluates processing rules against documents and executes actions when rules match, enabling dynamic document workflow automation.</p>"},{"location":"autodoc_src_backend_app_rule_engine_py_2025-05-31T15-58-21/#module-structure","title":"Module Structure","text":"<pre><code>from app.rule_engine import RuleEvaluator, RuleActionExecutor, DocumentRuleProcessor\n</code></pre>"},{"location":"autodoc_src_backend_app_rule_engine_py_2025-05-31T15-58-21/#classes","title":"Classes","text":""},{"location":"autodoc_src_backend_app_rule_engine_py_2025-05-31T15-58-21/#ruleevaluator","title":"RuleEvaluator","text":"<p>Evaluates processing rules against documents to determine which actions should be executed.</p>"},{"location":"autodoc_src_backend_app_rule_engine_py_2025-05-31T15-58-21/#constructor","title":"Constructor","text":"<pre><code>RuleEvaluator()\n</code></pre> <p>Creates a new rule evaluator instance with an initialized <code>ProcessingRuleRepository</code>.</p>"},{"location":"autodoc_src_backend_app_rule_engine_py_2025-05-31T15-58-21/#methods","title":"Methods","text":""},{"location":"autodoc_src_backend_app_rule_engine_py_2025-05-31T15-58-21/#evaluate_documentdb-document","title":"<code>evaluate_document(db, document)</code>","text":"<p>Evaluates all enabled rules against a document and returns matching actions.</p> <p>Parameters: - <code>db</code> (AsyncSession): Database session - <code>document</code> (Document): Document to evaluate</p> <p>Returns: - <code>List[Dict[str, Any]]</code>: List of actions to execute</p> <p>Example: <pre><code>evaluator = RuleEvaluator()\nactions = await evaluator.evaluate_document(db_session, document)\n</code></pre></p>"},{"location":"autodoc_src_backend_app_rule_engine_py_2025-05-31T15-58-21/#_evaluate_ruledocument-rule-private","title":"<code>_evaluate_rule(document, rule)</code> (Private)","text":"<p>Evaluates a single rule against a document using Boolean AND logic for all conditions.</p> <p>Parameters: - <code>document</code> (Document): Document to evaluate - <code>rule</code> (Dict[str, Any]): Rule configuration</p> <p>Returns: - <code>bool</code>: True if rule matches, False otherwise</p>"},{"location":"autodoc_src_backend_app_rule_engine_py_2025-05-31T15-58-21/#_matches_vendordocument_sender-rule_vendor-private","title":"<code>_matches_vendor(document_sender, rule_vendor)</code> (Private)","text":"<p>Performs case-insensitive partial matching between document sender and rule vendor.</p> <p>Parameters: - <code>document_sender</code> (str): Document sender field - <code>rule_vendor</code> (str): Rule vendor constraint</p> <p>Returns: - <code>bool</code>: True if vendor matches</p>"},{"location":"autodoc_src_backend_app_rule_engine_py_2025-05-31T15-58-21/#_evaluate_conditiondocument-condition-private","title":"<code>_evaluate_condition(document, condition)</code> (Private)","text":"<p>Evaluates a single condition against a document using various operators.</p> <p>Supported Operators: - <code>equals</code>: Exact match - <code>contains</code>: Substring match - <code>starts_with</code>: Prefix match - <code>ends_with</code>: Suffix match - <code>not_equals</code>: Negated exact match - <code>not_contains</code>: Negated substring match</p> <p>Parameters: - <code>document</code> (Document): Document to evaluate - <code>condition</code> (Dict[str, Any]): Condition configuration</p> <p>Returns: - <code>bool</code>: True if condition matches</p>"},{"location":"autodoc_src_backend_app_rule_engine_py_2025-05-31T15-58-21/#_get_document_field_valuedocument-field-private","title":"<code>_get_document_field_value(document, field)</code> (Private)","text":"<p>Extracts field values from document objects.</p> <p>Supported Fields: - <code>title</code>: Document title - <code>content</code>/<code>text</code>: Document content - <code>sender</code>: Document sender - <code>recipient</code>: Document recipient - <code>document_type</code>: Document type - <code>category</code>: Document category - <code>amount</code>: Document amount - <code>currency</code>: Document currency - <code>status</code>: Document status - <code>filename</code>: Original file name - <code>file_path</code>: File storage path</p>"},{"location":"autodoc_src_backend_app_rule_engine_py_2025-05-31T15-58-21/#ruleactionexecutor","title":"RuleActionExecutor","text":"<p>Executes actions on documents when rules match.</p>"},{"location":"autodoc_src_backend_app_rule_engine_py_2025-05-31T15-58-21/#methods_1","title":"Methods","text":""},{"location":"autodoc_src_backend_app_rule_engine_py_2025-05-31T15-58-21/#execute_actionsdb-document-actions","title":"<code>execute_actions(db, document, actions)</code>","text":"<p>Executes a list of actions on a document with error handling and result tracking.</p> <p>Parameters: - <code>db</code> (AsyncSession): Database session - <code>document</code> (Document): Document to modify - <code>actions</code> (List[Dict[str, Any]]): Actions to execute</p> <p>Returns: - <code>Dict[str, Any]</code>: Execution summary with format:   <pre><code>{\n    'executed': List[Dict],    # Successfully executed actions\n    'failed': List[Dict],      # Failed actions with errors\n    'total': int              # Total number of actions\n}\n</code></pre></p>"},{"location":"autodoc_src_backend_app_rule_engine_py_2025-05-31T15-58-21/#_execute_actiondb-document-action-private","title":"<code>_execute_action(db, document, action)</code> (Private)","text":"<p>Executes a single action on a document.</p> <p>Supported Action Types: - <code>assign_tenant</code>: Assigns document to a tenant - <code>set_category</code>: Sets document category - <code>add_tag</code>: Adds a tag to the document - <code>set_status</code>: Sets document status - <code>set_document_type</code>: Sets document type</p> <p>Parameters: - <code>db</code> (AsyncSession): Database session - <code>document</code> (Document): Document to modify - <code>action</code> (Dict[str, Any]): Action configuration</p> <p>Returns: - <code>bool</code>: True if action executed successfully</p>"},{"location":"autodoc_src_backend_app_rule_engine_py_2025-05-31T15-58-21/#documentruleprocessor","title":"DocumentRuleProcessor","text":"<p>Main orchestration class that combines rule evaluation and action execution.</p>"},{"location":"autodoc_src_backend_app_rule_engine_py_2025-05-31T15-58-21/#constructor_1","title":"Constructor","text":"<pre><code>DocumentRuleProcessor()\n</code></pre> <p>Creates a processor with initialized <code>RuleEvaluator</code> and <code>RuleActionExecutor</code> instances.</p>"},{"location":"autodoc_src_backend_app_rule_engine_py_2025-05-31T15-58-21/#methods_2","title":"Methods","text":""},{"location":"autodoc_src_backend_app_rule_engine_py_2025-05-31T15-58-21/#process_documentdb-document","title":"<code>process_document(db, document)</code>","text":"<p>Processes a document through the complete rule engine pipeline.</p> <p>Parameters: - <code>db</code> (AsyncSession): Database session - <code>document</code> (Document): Document to process</p> <p>Returns: - <code>Dict[str, Any]</code>: Processing results with format:   <pre><code>{\n    'document_id': int,           # Document ID\n    'rules_matched': int,         # Number of unique rules matched\n    'actions_executed': int,      # Number of successful actions\n    'actions_failed': int,        # Number of failed actions\n    'results': Dict,             # Detailed execution results\n    'error': str                 # Error message (if applicable)\n}\n</code></pre></p> <p>Example: <pre><code>processor = DocumentRuleProcessor()\nresult = await processor.process_document(db_session, document)\n\nprint(f\"Processed document {result['document_id']}\")\nprint(f\"Rules matched: {result['rules_matched']}\")\nprint(f\"Actions executed: {result['actions_executed']}\")\n</code></pre></p>"},{"location":"autodoc_src_backend_app_rule_engine_py_2025-05-31T15-58-21/#usage-examples","title":"Usage Examples","text":""},{"location":"autodoc_src_backend_app_rule_engine_py_2025-05-31T15-58-21/#basic-document-processing","title":"Basic Document Processing","text":"<pre><code>from app.rule_engine import DocumentRuleProcessor\nfrom app.models import Document\n\nasync def process_uploaded_document(db_session, document_id):\n    # Get document from database\n    document = await get_document_by_id(db_session, document_id)\n\n    # Process through rule engine\n    processor = DocumentRuleProcessor()\n    result = await processor.process_document(db_session, document)\n\n    if result.get('error'):\n        print(f\"Error processing document: {result['error']}\")\n    else:\n        print(f\"Successfully processed document with {result['actions_executed']} actions\")\n\n    return result\n</code></pre>"},{"location":"autodoc_src_backend_app_rule_engine_py_2025-05-31T15-58-21/#custom-rule-evaluation","title":"Custom Rule Evaluation","text":"<p>```python from app.rule_engine import RuleEvaluator</p>"},{"location":"autodoc_src_backend_app_rule_engine_py_2025-06-01T06-18-45/","title":"autodoc src backend app rule engine py 2025 06 01T06 18 45","text":""},{"location":"autodoc_src_backend_app_rule_engine_py_2025-06-01T06-18-45/#rule-engine-documentation","title":"Rule Engine Documentation","text":"<p>A comprehensive rule engine for automated document processing and classification that evaluates processing rules against documents and executes actions when rules match.</p>"},{"location":"autodoc_src_backend_app_rule_engine_py_2025-06-01T06-18-45/#overview","title":"Overview","text":"<p>The Rule Engine consists of three main components: - RuleEvaluator: Evaluates processing rules against documents - RuleActionExecutor: Executes actions from matched rules - DocumentRuleProcessor: Main orchestrator for rule-based document processing</p>"},{"location":"autodoc_src_backend_app_rule_engine_py_2025-06-01T06-18-45/#classes","title":"Classes","text":""},{"location":"autodoc_src_backend_app_rule_engine_py_2025-06-01T06-18-45/#ruleevaluator","title":"RuleEvaluator","text":"<p>Evaluates processing rules against documents to determine which rules match and what actions should be executed.</p>"},{"location":"autodoc_src_backend_app_rule_engine_py_2025-06-01T06-18-45/#constructor","title":"Constructor","text":"<pre><code>def __init__(self)\n</code></pre> <p>Creates a new RuleEvaluator instance with an initialized ProcessingRuleRepository.</p>"},{"location":"autodoc_src_backend_app_rule_engine_py_2025-06-01T06-18-45/#methods","title":"Methods","text":""},{"location":"autodoc_src_backend_app_rule_engine_py_2025-06-01T06-18-45/#evaluate_document","title":"evaluate_document","text":"<pre><code>async def evaluate_document(db: AsyncSession, document: Document) -&gt; List[Dict[str, Any]]\n</code></pre> <p>Evaluates all enabled rules against a document and returns matching actions.</p> <p>Parameters: - <code>db</code> (AsyncSession): Database session for rule retrieval - <code>document</code> (Document): Document to evaluate against rules</p> <p>Returns: - <code>List[Dict[str, Any]]</code>: List of actions to execute, each containing rule metadata</p> <p>Example: <pre><code>evaluator = RuleEvaluator()\nactions = await evaluator.evaluate_document(db_session, document)\n# Returns: [{'type': 'set_category', 'value': 'Invoice', 'rule_id': 1, 'rule_name': 'Invoice Classification'}]\n</code></pre></p>"},{"location":"autodoc_src_backend_app_rule_engine_py_2025-06-01T06-18-45/#_evaluate_rule","title":"_evaluate_rule","text":"<pre><code>async def _evaluate_rule(document: Document, rule: Dict[str, Any]) -&gt; bool\n</code></pre> <p>Evaluates a single rule against a document using AND logic for all conditions.</p> <p>Parameters: - <code>document</code> (Document): Document to evaluate - <code>rule</code> (Dict[str, Any]): Rule configuration containing conditions and metadata</p> <p>Returns: - <code>bool</code>: True if all rule conditions match, False otherwise</p>"},{"location":"autodoc_src_backend_app_rule_engine_py_2025-06-01T06-18-45/#_matches_vendor","title":"_matches_vendor","text":"<pre><code>def _matches_vendor(document_sender: str, rule_vendor: str) -&gt; bool\n</code></pre> <p>Performs case-insensitive partial matching between document sender and rule vendor.</p> <p>Parameters: - <code>document_sender</code> (str): Sender information from document - <code>rule_vendor</code> (str): Vendor pattern from rule</p> <p>Returns: - <code>bool</code>: True if vendor matches, False otherwise</p>"},{"location":"autodoc_src_backend_app_rule_engine_py_2025-06-01T06-18-45/#_evaluate_condition","title":"_evaluate_condition","text":"<pre><code>def _evaluate_condition(document: Document, condition: Dict[str, Any]) -&gt; bool\n</code></pre> <p>Evaluates a single condition against a document field.</p> <p>Supported Operators: - <code>equals</code>: Exact match (case-insensitive) - <code>contains</code>: Substring search - <code>starts_with</code>: Prefix match - <code>ends_with</code>: Suffix match - <code>not_equals</code>: Negated exact match - <code>not_contains</code>: Negated substring search</p> <p>Parameters: - <code>document</code> (Document): Document to evaluate - <code>condition</code> (Dict[str, Any]): Condition with field, operator, and value</p> <p>Returns: - <code>bool</code>: True if condition matches, False otherwise</p>"},{"location":"autodoc_src_backend_app_rule_engine_py_2025-06-01T06-18-45/#_get_document_field_value","title":"_get_document_field_value","text":"<pre><code>def _get_document_field_value(document: Document, field: str) -&gt; Any\n</code></pre> <p>Retrieves the value of a specified document field.</p> <p>Supported Fields: - <code>title</code>: Document title - <code>content</code>/<code>text</code>: Document content - <code>sender</code>: Document sender - <code>recipient</code>: Document recipient - <code>document_type</code>: Document type classification - <code>category</code>: Document category - <code>amount</code>: Financial amount - <code>currency</code>: Currency code - <code>status</code>: Processing status - <code>filename</code>: Original filename - <code>file_path</code>: Storage path</p> <p>Parameters: - <code>document</code> (Document): Source document - <code>field</code> (str): Field name to retrieve</p> <p>Returns: - <code>Any</code>: Field value or None if field doesn't exist</p>"},{"location":"autodoc_src_backend_app_rule_engine_py_2025-06-01T06-18-45/#ruleactionexecutor","title":"RuleActionExecutor","text":"<p>Executes actions from matched rules, modifying documents according to rule specifications.</p>"},{"location":"autodoc_src_backend_app_rule_engine_py_2025-06-01T06-18-45/#methods_1","title":"Methods","text":""},{"location":"autodoc_src_backend_app_rule_engine_py_2025-06-01T06-18-45/#execute_actions","title":"execute_actions","text":"<pre><code>async def execute_actions(db: AsyncSession, document: Document, actions: List[Dict[str, Any]]) -&gt; Dict[str, Any]\n</code></pre> <p>Executes a list of actions on a document with error handling and result tracking.</p> <p>Parameters: - <code>db</code> (AsyncSession): Database session for persistence - <code>document</code> (Document): Target document for modifications - <code>actions</code> (List[Dict[str, Any]]): Actions to execute</p> <p>Returns: - <code>Dict[str, Any]</code>: Execution summary with results and failures</p> <p>Return Structure: <pre><code>{\n    'executed': [{'action': {...}, 'result': True}],\n    'failed': [{'action': {...}, 'error': 'Error message'}],\n    'total': 5\n}\n</code></pre></p>"},{"location":"autodoc_src_backend_app_rule_engine_py_2025-06-01T06-18-45/#_execute_action","title":"_execute_action","text":"<pre><code>async def _execute_action(db: AsyncSession, document: Document, action: Dict[str, Any]) -&gt; bool\n</code></pre> <p>Executes a single action on a document.</p> <p>Supported Action Types: - <code>assign_tenant</code>: Assigns document to a tenant - <code>set_category</code>: Sets document category - <code>add_tag</code>: Adds a tag to the document - <code>set_status</code>: Updates document status - <code>set_document_type</code>: Sets document type</p> <p>Parameters: - <code>db</code> (AsyncSession): Database session - <code>document</code> (Document): Target document - <code>action</code> (Dict[str, Any]): Action configuration</p> <p>Returns: - <code>bool</code>: True if action executed successfully</p>"},{"location":"autodoc_src_backend_app_rule_engine_py_2025-06-01T06-18-45/#action-specific-methods","title":"Action-Specific Methods","text":""},{"location":"autodoc_src_backend_app_rule_engine_py_2025-06-01T06-18-45/#_assign_tenant","title":"_assign_tenant","text":"<p><pre><code>async def _assign_tenant(document: Document, tenant_id: Any) -&gt; bool\n</code></pre> Assigns document to specified tenant with validation.</p>"},{"location":"autodoc_src_backend_app_rule_engine_py_2025-06-01T06-18-45/#_set_category","title":"_set_category","text":"<p><pre><code>async def _set_category(document: Document, category: str) -&gt; bool\n</code></pre> Sets document category with string conversion.</p>"},{"location":"autodoc_src_backend_app_rule_engine_py_2025-06-01T06-18-45/#_add_tag","title":"_add_tag","text":"<p><pre><code>async def _add_tag(db: AsyncSession, document: Document, tag_name: str) -&gt; bool\n</code></pre> Adds tag using DocumentRepository integration.</p>"},{"location":"autodoc_src_backend_app_rule_engine_py_2025-06-01T06-18-45/#_set_status","title":"_set_status","text":"<p><pre><code>async def _set_status(document: Document, status: str) -&gt; bool\n</code></pre> Updates document processing status.</p>"},{"location":"autodoc_src_backend_app_rule_engine_py_2025-06-01T06-18-45/#_set_document_type","title":"_set_document_type","text":"<pre><code>async def _set_document_type(document: Document, doc_type: str) -&gt; bool\n</code></pre>"},{"location":"autodoc_src_backend_app_scheduler_py_2025-05-31T16-00-06/","title":"autodoc src backend app scheduler py 2025 05 31T16 00 06","text":""},{"location":"autodoc_src_backend_app_scheduler_py_2025-05-31T16-00-06/#appscheduler","title":"app.scheduler","text":""},{"location":"autodoc_src_backend_app_scheduler_py_2025-05-31T16-00-06/#overview","title":"Overview","text":"<p>A lightweight background task scheduler that periodically scans invoices and creates reminder notifications before due dates. This module provides a simple alternative to heavyweight task queue systems like Celery or APScheduler by using asyncio tasks with sleep-based scheduling.</p>"},{"location":"autodoc_src_backend_app_scheduler_py_2025-05-31T16-00-06/#key-features","title":"Key Features","text":"<ul> <li>Periodic Invoice Scanning: Automatically checks for upcoming invoice due dates</li> <li>Reminder Notifications: Creates notifications 3 days before invoice due dates</li> <li>Lightweight Implementation: Uses asyncio instead of external task queue dependencies</li> <li>Startup Safety: Performs immediate scan on startup and prevents duplicate tasks</li> <li>Error Resilience: Continues operation even if individual scan cycles fail</li> </ul>"},{"location":"autodoc_src_backend_app_scheduler_py_2025-05-31T16-00-06/#configuration","title":"Configuration","text":""},{"location":"autodoc_src_backend_app_scheduler_py_2025-05-31T16-00-06/#constants","title":"Constants","text":"Constant Default Value Description <code>DAYS_BEFORE_DUE</code> <code>3</code> Number of days before due date when reminders are created <code>SCAN_HOUR_UTC</code> <code>2</code> UTC hour (24-hour format) when daily scans are performed"},{"location":"autodoc_src_backend_app_scheduler_py_2025-05-31T16-00-06/#functions","title":"Functions","text":""},{"location":"autodoc_src_backend_app_scheduler_py_2025-05-31T16-00-06/#scheduler_loop","title":"<code>scheduler_loop()</code>","text":"<pre><code>async def scheduler_loop() -&gt; None\n</code></pre> <p>Purpose: Main background coroutine that runs continuously with a 24-hour cycle.</p> <p>Behavior: - Performs an immediate scan on startup - Calculates sleep duration until next scheduled scan time - Runs daily at the configured UTC hour - Handles exceptions gracefully to maintain continuous operation</p> <p>Usage: Called internally by <code>start_scheduler()</code> - not intended for direct use.</p>"},{"location":"autodoc_src_backend_app_scheduler_py_2025-05-31T16-00-06/#start_scheduler","title":"<code>start_scheduler()</code>","text":"<pre><code>def start_scheduler() -&gt; None\n</code></pre> <p>Purpose: Spawns the background scheduler task safely.</p> <p>Features: - Idempotent: Safe to call multiple times - Duplicate Prevention: Checks for existing scheduler tasks before creating new ones - Hot-reload Safe: Prevents multiple scheduler instances during development</p> <p>Usage: <pre><code># Typically called during application startup\nstart_scheduler()\n</code></pre></p>"},{"location":"autodoc_src_backend_app_scheduler_py_2025-05-31T16-00-06/#_run_once-internal","title":"<code>_run_once()</code> (Internal)","text":"<pre><code>async def _run_once() -&gt; None\n</code></pre> <p>Purpose: Executes a single scan cycle to create missing reminder notifications.</p> <p>Process: 1. Opens database session 2. Calls <code>NotificationService.check_upcoming_due_dates()</code> 3. Commits changes to database 4. Logs results (info level for created notifications, debug level for no results)</p>"},{"location":"autodoc_src_backend_app_scheduler_py_2025-05-31T16-00-06/#dependencies","title":"Dependencies","text":"<ul> <li>Database: <code>app.database.async_session</code> for database operations</li> <li>Notifications: <code>app.notifications.NotificationService</code> for creating reminders</li> <li>Standard Library: <code>asyncio</code>, <code>datetime</code>, <code>logging</code></li> </ul>"},{"location":"autodoc_src_backend_app_scheduler_py_2025-05-31T16-00-06/#integration","title":"Integration","text":""},{"location":"autodoc_src_backend_app_scheduler_py_2025-05-31T16-00-06/#startup-integration","title":"Startup Integration","text":"<p>The scheduler is designed to be started during application initialization:</p> <pre><code># In main.startup()\nfrom app.scheduler import start_scheduler\n\nasync def startup():\n    # ... other startup tasks\n    start_scheduler()\n</code></pre>"},{"location":"autodoc_src_backend_app_scheduler_py_2025-05-31T16-00-06/#database-session-management","title":"Database Session Management","text":"<p>The scheduler uses async database sessions and properly commits transactions after creating notifications.</p>"},{"location":"autodoc_src_backend_app_scheduler_py_2025-05-31T16-00-06/#logging","title":"Logging","text":"<p>The module uses structured logging with different levels:</p> <ul> <li>INFO: Reports successful notification creation with counts</li> <li>DEBUG: Reports scheduling details and empty scan results  </li> <li>ERROR: Logs exceptions during scan execution (via <code>logger.exception()</code>)</li> </ul>"},{"location":"autodoc_src_backend_app_scheduler_py_2025-05-31T16-00-06/#error-handling","title":"Error Handling","text":"<p>The scheduler implements resilient error handling: - Individual scan failures are logged but don't terminate the scheduler - The infinite loop continues even after exceptions - Database sessions are properly managed with async context managers</p>"},{"location":"autodoc_src_backend_app_scheduler_py_2025-05-31T16-00-06/#architecture-notes","title":"Architecture Notes","text":""},{"location":"autodoc_src_backend_app_scheduler_py_2025-05-31T16-00-06/#lightweight-design-philosophy","title":"Lightweight Design Philosophy","text":"<p>This implementation deliberately avoids external task queue dependencies to: - Reduce system complexity - Minimize resource overhead - Simplify deployment and configuration - Maintain direct control over scheduling logic</p>"},{"location":"autodoc_src_backend_app_scheduler_py_2025-05-31T16-00-06/#service-instance-management","title":"Service Instance Management","text":"<p>Uses a dedicated <code>NotificationService</code> instance (<code>_service</code>) to avoid import cycles with the main application module.</p>"},{"location":"autodoc_src_backend_app_scheduler_py_2025-06-01T06-20-27/","title":"autodoc src backend app scheduler py 2025 06 01T06 20 27","text":""},{"location":"autodoc_src_backend_app_scheduler_py_2025-06-01T06-20-27/#appscheduler","title":"app.scheduler","text":""},{"location":"autodoc_src_backend_app_scheduler_py_2025-06-01T06-20-27/#overview","title":"Overview","text":"<p>The <code>app.scheduler</code> module provides a lightweight background task scheduler for invoice reminder notifications. It periodically scans invoices and creates reminder notifications three days before their due dates.</p> <p>This implementation uses asyncio tasks instead of heavyweight dependencies like Celery or APScheduler, making it suitable for containerized deployments with minimal overhead.</p>"},{"location":"autodoc_src_backend_app_scheduler_py_2025-06-01T06-20-27/#features","title":"Features","text":"<ul> <li>Lightweight Design: Uses asyncio for background processing without external dependencies</li> <li>Daily Scanning: Runs at a configurable UTC hour (default: 02:00)</li> <li>Immediate Startup: Performs an initial scan on startup for immediate system readiness</li> <li>Error Handling: Includes exception handling and logging for monitoring</li> <li>Hot-reload Safe: Prevents duplicate tasks during development</li> </ul>"},{"location":"autodoc_src_backend_app_scheduler_py_2025-06-01T06-20-27/#configuration","title":"Configuration","text":""},{"location":"autodoc_src_backend_app_scheduler_py_2025-06-01T06-20-27/#constants","title":"Constants","text":"Constant Default Value Description <code>DAYS_BEFORE_DUE</code> <code>3</code> Number of days before due date when reminder notifications are created <code>SCAN_HOUR_UTC</code> <code>2</code> UTC hour when the daily scan runs (02:00 UTC)"},{"location":"autodoc_src_backend_app_scheduler_py_2025-06-01T06-20-27/#api-reference","title":"API Reference","text":""},{"location":"autodoc_src_backend_app_scheduler_py_2025-06-01T06-20-27/#functions","title":"Functions","text":""},{"location":"autodoc_src_backend_app_scheduler_py_2025-06-01T06-20-27/#start_scheduler","title":"<code>start_scheduler()</code>","text":"<p>Spawns the background scheduler task. Safe to call multiple times as it prevents duplicate tasks.</p> <p>Usage: <pre><code>from app.scheduler import start_scheduler\n\n# In your application startup\nstart_scheduler()\n</code></pre></p> <p>Returns: <code>None</code></p> <p>Note: This function should be called during application initialization (e.g., in <code>main.startup()</code>).</p>"},{"location":"autodoc_src_backend_app_scheduler_py_2025-06-01T06-20-27/#scheduler_loop","title":"<code>scheduler_loop()</code>","text":"<p>Internal Function - Background coroutine that runs the scheduling loop.</p> <ul> <li>Performs an immediate scan on startup</li> <li>Calculates sleep duration until next scheduled run</li> <li>Runs continuously with 24-hour intervals</li> <li>Handles exceptions gracefully with logging</li> </ul> <p>Returns: <code>None</code> (runs indefinitely)</p>"},{"location":"autodoc_src_backend_app_scheduler_py_2025-06-01T06-20-27/#_run_once","title":"<code>_run_once()</code>","text":"<p>Internal Function - Executes a single scan cycle.</p> <ul> <li>Creates database session</li> <li>Checks for upcoming due dates</li> <li>Creates missing reminder notifications</li> <li>Commits changes and logs results</li> </ul> <p>Returns: <code>None</code></p>"},{"location":"autodoc_src_backend_app_scheduler_py_2025-06-01T06-20-27/#implementation-details","title":"Implementation Details","text":""},{"location":"autodoc_src_backend_app_scheduler_py_2025-06-01T06-20-27/#scheduling-logic","title":"Scheduling Logic","text":"<p>The scheduler calculates the next run time based on the current UTC time and the configured <code>SCAN_HOUR_UTC</code>:</p> <ol> <li>If current time is before the scheduled hour today, schedule for today</li> <li>If current time is after the scheduled hour today, schedule for tomorrow</li> <li>Sleep until the calculated next run time</li> </ol>"},{"location":"autodoc_src_backend_app_scheduler_py_2025-06-01T06-20-27/#database-integration","title":"Database Integration","text":"<p>The scheduler uses: - <code>app.database.async_session</code> for database connections - <code>app.notifications.NotificationService</code> for creating notifications - Automatic transaction management with commit/rollback</p>"},{"location":"autodoc_src_backend_app_scheduler_py_2025-06-01T06-20-27/#error-handling","title":"Error Handling","text":"<ul> <li>Exceptions during scheduled runs are caught and logged</li> <li>The scheduler continues running even after errors</li> <li>Database sessions are properly managed with async context managers</li> </ul>"},{"location":"autodoc_src_backend_app_scheduler_py_2025-06-01T06-20-27/#example-usage","title":"Example Usage","text":"<pre><code># In your main application file\nfrom app.scheduler import start_scheduler\n\nasync def startup():\n    \"\"\"Application startup handler.\"\"\"\n    # Start the background scheduler\n    start_scheduler()\n\n    # Other startup tasks...\n</code></pre>"},{"location":"autodoc_src_backend_app_scheduler_py_2025-06-01T06-20-27/#logging","title":"Logging","text":"<p>The module uses structured logging with the logger name <code>app.scheduler</code>:</p> <ul> <li>INFO: When reminder notifications are created</li> <li>DEBUG: Sleep duration and run scheduling details</li> <li>ERROR: Exception details when runs fail</li> </ul> <p>Example log messages: <pre><code>INFO - Scheduler: created 5 upcoming-due notifications\nDEBUG - Scheduler sleeping for 3600 seconds (until 2024-01-15 02:00:00+00:00)\nDEBUG - Scheduler: no upcoming invoices in next 3 days\n</code></pre></p>"},{"location":"autodoc_src_backend_app_scheduler_py_2025-06-01T06-20-27/#dependencies","title":"Dependencies","text":"<ul> <li><code>asyncio</code>: For background task management</li> <li><code>datetime</code>: For time calculations and timezone handling</li> <li><code>app.database</code>: Database session management</li> <li><code>app.notifications.NotificationService</code>: Notification creation logic</li> </ul>"},{"location":"autodoc_src_backend_app_scheduler_py_2025-06-01T06-20-27/#notes","title":"Notes","text":"<ul> <li>The scheduler runs in UTC timezone to ensure consistent behavior across deployments</li> <li>Database sessions are properly closed after each run</li> <li>The implementation avoids import cycles by using a dedicated service instance</li> </ul>"},{"location":"autodoc_src_backend_app_search_py_2025-05-31T16-06-02/","title":"autodoc src backend app search py 2025 05 31T16 06 02","text":""},{"location":"autodoc_src_backend_app_search_py_2025-05-31T16-06-02/#llm-search-service-documentation","title":"LLM Search Service Documentation","text":""},{"location":"autodoc_src_backend_app_search_py_2025-05-31T16-06-02/#overview","title":"Overview","text":"<p>The <code>SearchService</code> class provides LLM-powered search functionality for a Document Management System. It offers multiple search methods including basic keyword search, semantic vector search, advanced intent-based search, and vision-based search using ColPali embeddings.</p>"},{"location":"autodoc_src_backend_app_search_py_2025-05-31T16-06-02/#class-searchservice","title":"Class: SearchService","text":""},{"location":"autodoc_src_backend_app_search_py_2025-05-31T16-06-02/#description","title":"Description","text":"<p>Service class that handles various types of document search operations using machine learning and natural language processing capabilities.</p>"},{"location":"autodoc_src_backend_app_search_py_2025-05-31T16-06-02/#constructor","title":"Constructor","text":"<pre><code>def __init__(self, db: Session)\n</code></pre> <p>Parameters: - <code>db</code> (Session): SQLAlchemy database session for document queries</p> <p>Dependencies: - <code>LLMProcessor</code>: For natural language processing tasks - Database models and embeddings modules - Logging configuration</p>"},{"location":"autodoc_src_backend_app_search_py_2025-05-31T16-06-02/#methods","title":"Methods","text":""},{"location":"autodoc_src_backend_app_search_py_2025-05-31T16-06-02/#basic_search","title":"basic_search","text":"<pre><code>async def basic_search(self, query: str, limit: int = 20) -&gt; List[Dict[str, Any]]\n</code></pre> <p>Performs keyword-based search across document content, titles, and sender information.</p> <p>Parameters: - <code>query</code> (str): Search query string - <code>limit</code> (int, optional): Maximum number of results to return. Default: 20</p> <p>Returns: - <code>List[Dict[str, Any]]</code>: List of matching documents with the following structure:   <pre><code>{\n    \"id\": int,\n    \"title\": str,\n    \"sender\": str,\n    \"document_date\": str,  # ISO format or None\n    \"document_type\": str,\n    \"status\": str,\n    \"relevance\": str  # \"high\" or \"medium\"\n}\n</code></pre></p> <p>Search Fields: - Document content text - Document title - Document sender</p> <p>Relevance Scoring: - \"high\": Query found in document title - \"medium\": Query found in other fields</p>"},{"location":"autodoc_src_backend_app_search_py_2025-05-31T16-06-02/#semantic_search","title":"semantic_search","text":"<pre><code>async def semantic_search(self, query: str, limit: int = 10) -&gt; List[Dict[str, Any]]\n</code></pre> <p>Performs vector-based semantic search using pgvector and cosine distance similarity.</p> <p>Parameters: - <code>query</code> (str): Natural language search query - <code>limit</code> (int, optional): Maximum number of results to return. Default: 10</p> <p>Returns: - <code>List[Dict[str, Any]]</code>: List of semantically similar documents:   <pre><code>{\n    \"id\": int,\n    \"title\": str,\n    \"sender\": str,\n    \"document_type\": str,\n    \"status\": str,\n    \"relevance_score\": float  # 1 - cosine_distance\n}\n</code></pre></p> <p>Requirements: - Documents must have embeddings stored in the database - Uses PostgreSQL pgvector extension - Requires <code>app.embeddings.get_embedding()</code> function</p>"},{"location":"autodoc_src_backend_app_search_py_2025-05-31T16-06-02/#extract_search_intent","title":"extract_search_intent","text":"<pre><code>async def extract_search_intent(self, query: str) -&gt; Dict[str, Any]\n</code></pre> <p>Extracts structured search parameters from natural language queries using LLM processing.</p> <p>Parameters: - <code>query</code> (str): Natural language search query</p> <p>Returns: - <code>Dict[str, Any]</code>: Extracted search parameters with possible fields:   <pre><code>{\n    \"document_type\": str,           # Optional\n    \"sender\": str,                  # Optional\n    \"date_range\": {                 # Optional\n        \"start\": str,               # YYYY-MM-DD format\n        \"end\": str                  # YYYY-MM-DD format\n    },\n    \"amount_range\": {               # Optional\n        \"min\": float,\n        \"max\": float\n    },\n    \"status\": str,                  # Optional\n    \"keywords\": List[str]           # Optional\n}\n</code></pre></p> <p>Error Handling: - Returns <code>{\"keywords\": [query]}</code> if LLM response parsing fails - Logs JSON parsing errors</p>"},{"location":"autodoc_src_backend_app_search_py_2025-05-31T16-06-02/#advanced_search","title":"advanced_search","text":"<pre><code>async def advanced_search(self, params, limit: int = 20) -&gt; List[Dict[str, Any]]\n</code></pre> <p>Performs sophisticated search using either pre-structured parameters or natural language queries with LLM intent extraction.</p> <p>Parameters: - <code>params</code> (Union[Dict, str]): Either a dictionary of search parameters or a natural language query string - <code>limit</code> (int, optional): Maximum number of results to return. Default: 20</p> <p>Returns: - <code>List[Dict[str, Any]]</code>: List of matching documents:   <pre><code>{\n    \"id\": int,\n    \"title\": str,\n    \"sender\": str,\n    \"document_date\": str,      # ISO format or None\n    \"document_type\": str,\n    \"status\": str,\n    \"amount\": float            # Optional\n}\n</code></pre></p> <p>Supported Filters: - Document type (exact match) - Sender (partial match, case-insensitive) - Status (exact match) - Date range (start and/or end dates) - Amount range (min and/or max values) - Keywords (content and title search)</p>"},{"location":"autodoc_src_backend_app_search_py_2025-05-31T16-06-02/#suggest_related_documents","title":"suggest_related_documents","text":"<pre><code>async def suggest_related_documents(self, document_id: int, limit: int = 5) -&gt; List[Dict[str, Any]]\n</code></pre> <p>Finds documents related to a given document using LLM analysis of content similarity and relationships.</p> <p>Parameters: - <code>document_id</code> (int): ID of the source document - <code>limit</code> (int, optional): Maximum number of related documents to return. Default: 5</p> <p>Returns: - <code>List[Dict[str, Any]]</code>: List of related documents:   <pre><code>{\n    \"id\": int,\n    \"title\": str,\n    \"sender\": str,\n    \"document_date\": str,         # ISO format or None\n    \"document_type\": str,\n    \"relationship_type\": str,     # See relationship types below\n    \"confidence\": int             # 0-10 scale\n}\n</code></pre></p> <p>Relationship Types: - <code>\"same_sender\"</code>: Documents from the same sender - <code>\"invoice_payment\"</code>: Invoice and its corresponding payment - <code>\"invoice_reminder\"</code>: Invoice and its reminder - <code>\"related_subject\"</code>: Documents with related subject matter - <code>\"time_sequence\"</code>: Documents that are part of a chronological sequence</p> <p>Filtering: - Only returns documents with confidence score \u2265 5 - Results sorted by confidence (highest first) - Excludes the source</p>"},{"location":"autodoc_src_backend_app_search_py_2025-06-01T06-26-22/","title":"autodoc src backend app search py 2025 06 01T06 26 22","text":""},{"location":"autodoc_src_backend_app_search_py_2025-06-01T06-26-22/#searchservice-documentation","title":"SearchService Documentation","text":""},{"location":"autodoc_src_backend_app_search_py_2025-06-01T06-26-22/#overview","title":"Overview","text":"<p>The <code>SearchService</code> class provides comprehensive LLM-powered search functionality for the Document Management System. It offers multiple search methods including basic keyword search, semantic vector search, advanced intent-based search, document relationship discovery, and visual document search using ColPali embeddings.</p>"},{"location":"autodoc_src_backend_app_search_py_2025-06-01T06-26-22/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Class Overview</li> <li>Initialization</li> <li>Search Methods</li> <li>Helper Methods</li> <li>Usage Examples</li> <li>Error Handling</li> <li>Dependencies</li> </ul>"},{"location":"autodoc_src_backend_app_search_py_2025-06-01T06-26-22/#class-overview","title":"Class Overview","text":"<pre><code>class SearchService:\n    \"\"\"Service for LLM-powered document search.\"\"\"\n</code></pre> <p>The <code>SearchService</code> class integrates multiple search technologies: - Traditional keyword-based search - Semantic vector search using pgvector - LLM-powered intent extraction and advanced search - Document relationship analysis - Visual document search with ColPali embeddings</p>"},{"location":"autodoc_src_backend_app_search_py_2025-06-01T06-26-22/#initialization","title":"Initialization","text":""},{"location":"autodoc_src_backend_app_search_py_2025-06-01T06-26-22/#__init__db-session","title":"<code>__init__(db: Session)</code>","text":"<p>Initializes the search service with a database session.</p> <p>Parameters: - <code>db</code> (Session): SQLAlchemy database session for document queries</p> <p>Example: <pre><code>from sqlalchemy.orm import Session\nfrom app.search import SearchService\n\nsearch_service = SearchService(db_session)\n</code></pre></p>"},{"location":"autodoc_src_backend_app_search_py_2025-06-01T06-26-22/#search-methods","title":"Search Methods","text":""},{"location":"autodoc_src_backend_app_search_py_2025-06-01T06-26-22/#basic-search","title":"Basic Search","text":""},{"location":"autodoc_src_backend_app_search_py_2025-06-01T06-26-22/#async-basic_searchquery-str-limit-int-20-listdictstr-any","title":"<code>async basic_search(query: str, limit: int = 20) -&gt; List[Dict[str, Any]]</code>","text":"<p>Performs basic keyword search across document content, titles, and sender information.</p> <p>Parameters: - <code>query</code> (str): Search query string - <code>limit</code> (int, optional): Maximum number of results to return. Defaults to 20.</p> <p>Returns: - <code>List[Dict[str, Any]]</code>: List of matching documents with metadata</p> <p>Response Format: <pre><code>[\n    {\n        \"id\": 123,\n        \"title\": \"Document Title\",\n        \"sender\": \"Sender Name\",\n        \"document_date\": \"2023-12-01T00:00:00\",\n        \"document_type\": \"invoice\",\n        \"status\": \"paid\",\n        \"relevance\": \"high\"  # or \"medium\"\n    }\n]\n</code></pre></p>"},{"location":"autodoc_src_backend_app_search_py_2025-06-01T06-26-22/#semantic-search","title":"Semantic Search","text":""},{"location":"autodoc_src_backend_app_search_py_2025-06-01T06-26-22/#async-semantic_searchquery-str-limit-int-10-listdictstr-any","title":"<code>async semantic_search(query: str, limit: int = 10) -&gt; List[Dict[str, Any]]</code>","text":"<p>Performs vector-based semantic search using pgvector and document embeddings.</p> <p>Parameters: - <code>query</code> (str): Natural language search query - <code>limit</code> (int, optional): Maximum number of results to return. Defaults to 10.</p> <p>Returns: - <code>List[Dict[str, Any]]</code>: Documents ordered by semantic similarity</p> <p>Response Format: <pre><code>[\n    {\n        \"id\": 123,\n        \"title\": \"Document Title\",\n        \"sender\": \"Sender Name\",\n        \"document_type\": \"invoice\",\n        \"status\": \"paid\",\n        \"relevance_score\": 0.85  # Cosine similarity score\n    }\n]\n</code></pre></p> <p>Note: Requires documents to have pre-computed embeddings stored in the database.</p>"},{"location":"autodoc_src_backend_app_search_py_2025-06-01T06-26-22/#advanced-search","title":"Advanced Search","text":""},{"location":"autodoc_src_backend_app_search_py_2025-06-01T06-26-22/#async-advanced_searchparams-limit-int-20-listdictstr-any","title":"<code>async advanced_search(params, limit: int = 20) -&gt; List[Dict[str, Any]]</code>","text":"<p>Performs intelligent search using LLM-powered intent extraction or structured parameters.</p> <p>Parameters: - <code>params</code> (Dict or str): Either a dictionary of search parameters or a natural language query - <code>limit</code> (int, optional): Maximum number of results to return. Defaults to 20.</p> <p>Supported Search Parameters: - <code>document_type</code>: Document type filter - <code>sender</code>: Sender name filter (partial match) - <code>status</code>: Document status filter - <code>date_range</code>: Object with <code>start</code> and <code>end</code> dates (YYYY-MM-DD format) - <code>amount_range</code>: Object with <code>min</code> and <code>max</code> amounts - <code>keywords</code>: Array of keywords to search for</p> <p>Example Parameters: <pre><code>params = {\n    \"document_type\": \"invoice\",\n    \"sender\": \"Acme Corp\",\n    \"date_range\": {\"start\": \"2023-01-01\", \"end\": \"2023-03-31\"},\n    \"amount_range\": {\"min\": 100, \"max\": 500},\n    \"status\": \"unpaid\",\n    \"keywords\": [\"urgent\", \"electricity\"]\n}\n</code></pre></p> <p>Returns: - <code>List[Dict[str, Any]]</code>: Filtered documents matching the criteria</p>"},{"location":"autodoc_src_backend_app_search_py_2025-06-01T06-26-22/#vision-search","title":"Vision Search","text":""},{"location":"autodoc_src_backend_app_search_py_2025-06-01T06-26-22/#async-vision_searchquery-str-limit-int-10-listdictstr-any","title":"<code>async vision_search(query: str, limit: int = 10) -&gt; List[Dict[str, Any]]</code>","text":"<p>Searches documents using visual content analysis with ColPali multi-vector embeddings.</p> <p>Parameters: - <code>query</code> (str): Text query to search for visually similar content - <code>limit</code> (int, optional): Maximum number of results to return. Defaults to 10.</p> <p>Returns: - <code>List[Dict[str, Any]]</code>: Documents ranked by visual similarity</p> <p>Response Format: <pre><code>[\n    {\n        \"id\": 123,\n        \"title\": \"Document Title\",\n        \"sender\": \"Sender Name\",\n        \"document_type\": \"invoice\",\n        \"status\": \"paid\",\n        \"vision_score\": 0.92  # Visual similarity score\n    }\n]\n</code></pre></p> <p>Note: Requires ColPali embeddings to be pre-computed and stored in Qdrant vector database.</p>"},{"location":"autodoc_src_backend_app_search_py_2025-06-01T06-26-22/#helper-methods","title":"Helper Methods","text":""},{"location":"autodoc_src_backend_app_search_py_2025-06-01T06-26-22/#intent-extraction","title":"Intent Extraction","text":""},{"location":"autodoc_src_backend_app_search_py_2025-06-01T06-26-22/#async-extract_search_intentquery-str-dictstr-any","title":"<code>async extract_search_intent(query: str) -&gt; Dict[str, Any]</code>","text":"<p>Extracts structured search parameters from natural language queries using LLM.</p> <p>Parameters: - <code>query</code> (str): Natural language search query</p> <p>Returns: - <code>Dict[str, Any]</code>: Extracted search parameters</p> <p>Example: <pre><code>query = \"Find all unpaid invoices from Acme Corp in January 2023\"\nintent = await search_service.extract_search_intent(query)\n# Returns: {\n#     \"document_type\": \"invoice\",\n#     \"sender\": \"Acme Corp\",\n#     \"date_range\": {\"start\": \"2023-01-01\", \"end\": \"2023-01-31\"},\n#     \"status\": \"unpaid\"\n# }\n</code></pre></p>"},{"location":"autodoc_src_backend_app_search_py_2025-06-01T06-26-22/#document-relationships","title":"Document Relationships","text":""},{"location":"autodoc_src_backend_app_search_py_2025-06-01T06-26-22/#async-suggest_related_documentsdocument_id-int-limit-int-5-listdict","title":"`async suggest_related_documents(document_id: int, limit: int = 5) -&gt; List[Dict","text":""},{"location":"autodoc_src_backend_app_services_entity_py_2025-05-31T16-09-55/","title":"autodoc src backend app services entity py 2025 05 31T16 09 55","text":""},{"location":"autodoc_src_backend_app_services_entity_py_2025-05-31T16-09-55/#entityservice-documentation","title":"EntityService Documentation","text":""},{"location":"autodoc_src_backend_app_services_entity_py_2025-05-31T16-09-55/#overview","title":"Overview","text":"<p>The <code>EntityService</code> class provides an asynchronous service layer for managing <code>Entity</code> objects in a database using SQLAlchemy's async ORM capabilities. This service implements common CRUD operations with proper database session management.</p>"},{"location":"autodoc_src_backend_app_services_entity_py_2025-05-31T16-09-55/#dependencies","title":"Dependencies","text":"<pre><code>from typing import List, Optional\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy import select\nfrom app.models import Entity\n</code></pre>"},{"location":"autodoc_src_backend_app_services_entity_py_2025-05-31T16-09-55/#class-definition","title":"Class Definition","text":""},{"location":"autodoc_src_backend_app_services_entity_py_2025-05-31T16-09-55/#entityservice","title":"EntityService","text":"<p>A service class that encapsulates database operations for Entity objects.</p>"},{"location":"autodoc_src_backend_app_services_entity_py_2025-05-31T16-09-55/#constructor","title":"Constructor","text":"<pre><code>def __init__(self, db: AsyncSession)\n</code></pre> <p>Parameters: - <code>db</code> (AsyncSession): An active SQLAlchemy async database session</p> <p>Description: Initializes the service with a database session that will be used for all database operations.</p>"},{"location":"autodoc_src_backend_app_services_entity_py_2025-05-31T16-09-55/#methods","title":"Methods","text":""},{"location":"autodoc_src_backend_app_services_entity_py_2025-05-31T16-09-55/#list","title":"list()","text":"<pre><code>async def list() -&gt; List[Entity]\n</code></pre> <p>Returns: - <code>List[Entity]</code>: A list of all Entity objects in the database</p> <p>Description: Retrieves all Entity records from the database asynchronously.</p> <p>Example: <pre><code>entities = await entity_service.list()\n</code></pre></p>"},{"location":"autodoc_src_backend_app_services_entity_py_2025-05-31T16-09-55/#create","title":"create()","text":"<pre><code>async def create(**kwargs) -&gt; Entity\n</code></pre> <p>Parameters: - <code>**kwargs</code>: Keyword arguments representing the Entity attributes to set</p> <p>Returns: - <code>Entity</code>: The newly created Entity object with database-generated fields populated</p> <p>Description: Creates a new Entity record in the database with the provided attributes. The method automatically commits the transaction and refreshes the object to include any database-generated values.</p> <p>Example: <pre><code>new_entity = await entity_service.create(name=\"Example\", status=\"active\")\n</code></pre></p>"},{"location":"autodoc_src_backend_app_services_entity_py_2025-05-31T16-09-55/#update","title":"update()","text":"<pre><code>async def update(entity_id: int, **kwargs) -&gt; Optional[Entity]\n</code></pre> <p>Parameters: - <code>entity_id</code> (int): The unique identifier of the Entity to update - <code>**kwargs</code>: Keyword arguments representing the Entity attributes to update</p> <p>Returns: - <code>Optional[Entity]</code>: The updated Entity object, or <code>None</code> if the entity was not found</p> <p>Description: Updates an existing Entity record with the provided attributes. If the entity with the specified ID doesn't exist, returns <code>None</code>. The method automatically commits the transaction and refreshes the object.</p> <p>Example: <pre><code>updated_entity = await entity_service.update(1, name=\"Updated Name\", status=\"inactive\")\nif updated_entity:\n    print(f\"Updated entity: {updated_entity.name}\")\nelse:\n    print(\"Entity not found\")\n</code></pre></p>"},{"location":"autodoc_src_backend_app_services_entity_py_2025-05-31T16-09-55/#usage-example","title":"Usage Example","text":"<pre><code>from sqlalchemy.ext.asyncio import AsyncSession\n\nasync def example_usage(db_session: AsyncSession):\n    # Initialize the service\n    entity_service = EntityService(db_session)\n\n    # Create a new entity\n    new_entity = await entity_service.create(\n        name=\"Sample Entity\",\n        description=\"This is a sample entity\"\n    )\n\n    # List all entities\n    all_entities = await entity_service.list()\n\n    # Update an entity\n    updated_entity = await entity_service.update(\n        new_entity.id,\n        description=\"Updated description\"\n    )\n</code></pre>"},{"location":"autodoc_src_backend_app_services_entity_py_2025-05-31T16-09-55/#notes","title":"Notes","text":"<ul> <li>All methods are asynchronous and should be called with <code>await</code></li> <li>The service assumes that the provided <code>AsyncSession</code> is properly configured and active</li> <li>Database transactions are automatically committed for create and update operations</li> <li>The service relies on the <code>Entity</code> model being properly defined with SQLAlchemy ORM mappings</li> </ul>"},{"location":"autodoc_src_backend_app_services_entity_py_2025-06-01T06-30-19/","title":"autodoc src backend app services entity py 2025 06 01T06 30 19","text":""},{"location":"autodoc_src_backend_app_services_entity_py_2025-06-01T06-30-19/#entityservice-documentation","title":"EntityService Documentation","text":""},{"location":"autodoc_src_backend_app_services_entity_py_2025-06-01T06-30-19/#overview","title":"Overview","text":"<p>The <code>EntityService</code> class provides asynchronous database operations for managing <code>Entity</code> objects using SQLAlchemy with async sessions. This service implements basic CRUD (Create, Read, Update) operations with a clean, async/await interface.</p>"},{"location":"autodoc_src_backend_app_services_entity_py_2025-06-01T06-30-19/#dependencies","title":"Dependencies","text":"<pre><code>from typing import List, Optional\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy import select\nfrom app.models import Entity\n</code></pre>"},{"location":"autodoc_src_backend_app_services_entity_py_2025-06-01T06-30-19/#class-definition","title":"Class Definition","text":""},{"location":"autodoc_src_backend_app_services_entity_py_2025-06-01T06-30-19/#entityservice","title":"EntityService","text":"<p>A service class that encapsulates database operations for Entity objects.</p>"},{"location":"autodoc_src_backend_app_services_entity_py_2025-06-01T06-30-19/#constructor","title":"Constructor","text":"<pre><code>def __init__(self, db: AsyncSession)\n</code></pre> <p>Parameters: - <code>db</code> (<code>AsyncSession</code>): An active SQLAlchemy async database session</p> <p>Description: Initializes the EntityService with a database session that will be used for all database operations.</p>"},{"location":"autodoc_src_backend_app_services_entity_py_2025-06-01T06-30-19/#methods","title":"Methods","text":""},{"location":"autodoc_src_backend_app_services_entity_py_2025-06-01T06-30-19/#list","title":"list()","text":"<pre><code>async def list() -&gt; List[Entity]\n</code></pre> <p>Returns: <code>List[Entity]</code> - A list of all Entity objects in the database</p> <p>Description: Retrieves all Entity records from the database asynchronously.</p> <p>Example: <pre><code>entities = await entity_service.list()\n</code></pre></p>"},{"location":"autodoc_src_backend_app_services_entity_py_2025-06-01T06-30-19/#create","title":"create()","text":"<pre><code>async def create(**kwargs) -&gt; Entity\n</code></pre> <p>Parameters: - <code>**kwargs</code>: Keyword arguments representing the Entity attributes to set</p> <p>Returns: <code>Entity</code> - The newly created Entity object with populated database fields</p> <p>Description: Creates a new Entity record in the database. The entity is automatically committed to the database and refreshed to include any server-generated values (such as auto-increment IDs).</p> <p>Example: <pre><code>new_entity = await entity_service.create(name=\"Example\", status=\"active\")\n</code></pre></p>"},{"location":"autodoc_src_backend_app_services_entity_py_2025-06-01T06-30-19/#update","title":"update()","text":"<pre><code>async def update(entity_id: int, **kwargs) -&gt; Optional[Entity]\n</code></pre> <p>Parameters: - <code>entity_id</code> (<code>int</code>): The primary key ID of the entity to update - <code>**kwargs</code>: Keyword arguments representing the Entity attributes to update</p> <p>Returns: <code>Optional[Entity]</code> - The updated Entity object, or <code>None</code> if the entity was not found</p> <p>Description: Updates an existing Entity record in the database. If the entity with the specified ID doesn't exist, returns <code>None</code>. The updated entity is automatically committed and refreshed.</p> <p>Example: <pre><code>updated_entity = await entity_service.update(1, name=\"Updated Name\", status=\"inactive\")\nif updated_entity is None:\n    print(\"Entity not found\")\n</code></pre></p>"},{"location":"autodoc_src_backend_app_services_entity_py_2025-06-01T06-30-19/#usage-example","title":"Usage Example","text":"<pre><code>from sqlalchemy.ext.asyncio import AsyncSession\n\n# Assuming you have an async database session\nasync def example_usage(db_session: AsyncSession):\n    service = EntityService(db_session)\n\n    # Create a new entity\n    new_entity = await service.create(name=\"Test Entity\", description=\"A test entity\")\n\n    # List all entities\n    all_entities = await service.list()\n\n    # Update an entity\n    updated_entity = await service.update(new_entity.id, name=\"Updated Test Entity\")\n\n    return updated_entity\n</code></pre>"},{"location":"autodoc_src_backend_app_services_entity_py_2025-06-01T06-30-19/#notes","title":"Notes","text":"<ul> <li>All methods are asynchronous and must be awaited</li> <li>Database transactions are automatically committed after create and update operations</li> <li>The service assumes that the provided <code>AsyncSession</code> is properly configured and connected</li> <li>Error handling for database operations should be implemented at the application level</li> <li>The <code>update</code> method uses dynamic attribute setting, so ensure that the provided kwargs correspond to valid Entity attributes</li> </ul>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/","title":"autodoc src backend app services flight check service py 2025 05 31T16 09 19","text":""},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#flightcheckservice-documentation","title":"FlightCheckService Documentation","text":""},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#overview","title":"Overview","text":"<p>The <code>FlightCheckService</code> is a comprehensive platform diagnostics service that provides three levels of system health monitoring for the application platform. It implements diagnostic tests specified in the flight-check documentation and offers quick health checks, comprehensive system analysis, and deep diagnostic capabilities.</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#class-definition","title":"Class Definition","text":"<pre><code>class FlightCheckService:\n    \"\"\"Comprehensive platform diagnostics service.\"\"\"\n</code></pre>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#constructor","title":"Constructor","text":"<pre><code>def __init__(self, db_session: AsyncSession)\n</code></pre> <p>Parameters: - <code>db_session</code> (AsyncSession): Database session for executing queries and checks</p> <p>Attributes: - <code>db_session</code>: The database session instance - <code>start_time</code>: Timestamp when the service was initialized (used for duration calculations)</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#public-methods","title":"Public Methods","text":""},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#quick_health_check","title":"quick_health_check()","text":"<pre><code>async def quick_health_check() -&gt; Dict[str, Any]\n</code></pre> <p>Performs a quick health check (30 seconds) focusing on essential systems only.</p> <p>Returns: - <code>Dict[str, Any]</code>: Health check results containing:   - <code>status</code>: Overall system status (\"healthy\", \"degraded\", or \"unhealthy\")   - <code>timestamp</code>: ISO format timestamp of the check   - <code>duration_seconds</code>: Time taken to complete the check   - <code>tests_passed</code>: Number of successful tests   - <code>tests_failed</code>: Number of failed tests   - <code>tests_total</code>: Total number of tests (4)   - <code>checks</code>: Dictionary of individual check results</p> <p>Checks Performed: 1. Database connectivity 2. Frontend accessibility 3. Authentication system 4. Basic API health</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#comprehensive_check","title":"comprehensive_check()","text":"<pre><code>async def comprehensive_check() -&gt; Dict[str, Any]\n</code></pre> <p>Performs a comprehensive check (5 minutes) covering all major systems.</p> <p>Returns: - <code>Dict[str, Any]</code>: Comprehensive results with categorized checks:   - <code>status</code>: Overall system status   - <code>timestamp</code>: ISO format timestamp   - <code>duration_seconds</code>: Execution time   - <code>tests_passed/failed/total</code>: Test statistics   - <code>categories</code>: Dictionary of check categories</p> <p>Categories Checked: - Critical Systems - AI &amp; LLM Services - File System &amp; Processing - Multi-Tenant System - Analytics &amp; Reporting</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#deep_diagnostic","title":"deep_diagnostic()","text":"<pre><code>async def deep_diagnostic() -&gt; Dict[str, Any]\n</code></pre> <p>Performs a deep diagnostic (15 minutes) with complete system analysis including performance and security checks.</p> <p>Returns: - <code>Dict[str, Any]</code>: Extended comprehensive results including:   - All comprehensive check categories   - Performance metrics   - Security configurations   - Integration status</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#critical-system-checks","title":"Critical System Checks","text":""},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#database-connectivity","title":"Database Connectivity","text":""},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#_check_database_connection","title":"_check_database_connection()","text":"<p>Basic database connectivity verification using a simple <code>SELECT 1</code> query.</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#_check_database_comprehensive","title":"_check_database_comprehensive()","text":"<p>Comprehensive database health check including: - Connection verification - Required table existence validation - Data integrity checks (user and entity counts) - Schema validation</p> <p>Required Tables Checked: - <code>documents</code>, <code>users</code>, <code>entities</code>, <code>user_entities</code> - <code>tags</code>, <code>document_tags</code>, <code>llm_configs</code>, <code>processing_rules</code> - <code>vectors</code>, <code>addresses</code>, <code>notifications</code>, <code>settings</code>, <code>user_sessions</code></p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#authentication-system","title":"Authentication System","text":""},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#_check_authentication","title":"_check_authentication()","text":"<p>Basic authentication system verification checking for admin user existence.</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#_check_authentication_comprehensive","title":"_check_authentication_comprehensive()","text":"<p>Extended authentication checks including: - Admin user verification - Total user count - Active session tracking - JWT configuration status</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#frontend-and-api-health","title":"Frontend and API Health","text":""},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#_check_frontend_health","title":"_check_frontend_health()","text":"<p>Verifies frontend service accessibility (basic implementation for port 3303).</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#_check_api_health","title":"_check_api_health()","text":"<p>Validates API endpoint responsiveness and FastAPI status.</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#document-processing","title":"Document Processing","text":""},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#_check_document_processing","title":"_check_document_processing()","text":"<p>Monitors the document processing pipeline: - Recent document activity (24-hour window) - Documents currently being processed - Failed document count - Pipeline operational status</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#ai-llm-services","title":"AI &amp; LLM Services","text":""},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#llm-configuration","title":"LLM Configuration","text":""},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#_check_llm_configuration","title":"_check_llm_configuration()","text":"<p>Validates LLM service configuration: - Service enablement status - Provider configuration (local/remote) - Model configuration for tagger and enricher - Connection testing</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#vector-database","title":"Vector Database","text":""},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#_check_vector_database","title":"_check_vector_database()","text":"<p>Checks Qdrant vector database connectivity: - Vector storage count - Qdrant availability - Embeddings functionality</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#tenant-extraction","title":"Tenant Extraction","text":""},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#_check_tenant_extraction","title":"_check_tenant_extraction()","text":"<p>Validates tenant extraction system: - Available tenants count - Extraction agent availability - System operational status</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#file-system-processing","title":"File System &amp; Processing","text":""},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#folder-configuration","title":"Folder Configuration","text":""},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#_check_folder_configuration","title":"_check_folder_configuration()","text":"<p>Validates file system setup: - Environment variable configuration - Path accessibility verification - Required directory existence</p> <p>Paths Checked: - <code>HOSTFS_ROOT</code> (default: <code>/hostfs</code>) - <code>WATCH_FOLDER</code> (default: <code>/hostfs/Inbox</code>) - <code>ARCHIVE_FOLDER</code> (default: <code>/hostfs/Archive</code>)</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#processing-rules","title":"Processing Rules","text":""},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#_check_processing_rules","title":"_check_processing_rules()","text":"<p>Monitors the rules engine: - Total processing rules count - Active rules count - Engine availability status</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#multi-tenant-system","title":"Multi-Tenant System","text":""},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#tenant-management","title":"Tenant Management","text":""},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#_check_tenant_management","title":"_check_tenant_management()","text":"<p>Validates multi-tenancy features: - Total entity count - Default tenant configuration - User-entity associations - Multi-tenant system status</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#entity-system","title":"Entity System","text":""},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#_check_entity_system","title":"_check_entity_system()","text":"<p>Checks entity system integrity: - Company entity count - Individual entity count - System data integrity</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#analytics-reporting","title":"Analytics &amp; Reporting","text":""},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#analytics-service","title":"Analytics Service","text":""},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#_check_analytics_service","title":"_check_analytics_service()","text":"<p>Validates analytics functionality: - Document count for analysis - Invoice-specific analytics - Chart and reporting availability</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#performance-security-deep-diagnostic","title":"Performance &amp; Security (Deep Diagnostic)","text":""},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#performance-monitoring","title":"Performance Monitoring","text":""},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#_check_performance","title":"_check_performance()","text":"<p>System resource monitoring: - CPU usage percentage - Memory utilization - Disk space usage - Database query performance timing</p> <p>Performance Thresholds: - CPU &gt; 80%: Degraded - Memory &gt; 85%: Degraded - Disk &gt; 90%: Degraded</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#security-validation","title":"Security Validation","text":""},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#_check_security","title":"_check_security()","text":"<p>Security configuration verification: - Admin user security settings - JWT configuration status - Password hashing validation (bcrypt)</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#integration-status","title":"Integration Status","text":""},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#_check_integrations","title":"_check_integrations()","text":"<p>External integration monitoring: - Calendar integration (ICS export) - Notification system status - Email and in-app notification capabilities</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-05-31T16-09-19/#usage-example","title":"Usage Example","text":"<p>```python from sqlalchemy.ext.async</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-06-01T06-29-46/","title":"autodoc src backend app services flight check service py 2025 06 01T06 29 46","text":""},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-06-01T06-29-46/#flightcheckservice-documentation","title":"FlightCheckService Documentation","text":""},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-06-01T06-29-46/#overview","title":"Overview","text":"<p>The <code>FlightCheckService</code> is a comprehensive platform diagnostics service that implements multi-tiered health checks to monitor system integrity, performance, and functionality across all platform components.</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-06-01T06-29-46/#features","title":"Features","text":"<ul> <li>Multi-tiered Diagnostics: Quick health checks (30s), comprehensive checks (5min), and deep diagnostics (15min)</li> <li>Comprehensive Coverage: Tests critical systems, AI services, file processing, multi-tenant functionality, and more</li> <li>Detailed Reporting: Structured JSON responses with pass/fail counts and detailed error information</li> <li>Async Operations: Built for modern async/await patterns with SQLAlchemy async sessions</li> </ul>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-06-01T06-29-46/#class-definition","title":"Class Definition","text":"<pre><code>class FlightCheckService:\n    \"\"\"Comprehensive platform diagnostics service.\"\"\"\n</code></pre>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-06-01T06-29-46/#constructor","title":"Constructor","text":""},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-06-01T06-29-46/#__init__self-db_session-asyncsession","title":"<code>__init__(self, db_session: AsyncSession)</code>","text":"<p>Initializes the flight check service with a database session.</p> <p>Parameters: - <code>db_session</code> (AsyncSession): SQLAlchemy async database session for running diagnostics</p> <p>Attributes: - <code>db_session</code>: Database session for executing queries - <code>start_time</code>: Timestamp for calculating diagnostic duration</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-06-01T06-29-46/#core-diagnostic-methods","title":"Core Diagnostic Methods","text":""},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-06-01T06-29-46/#async-quick_health_check-dictstr-any","title":"<code>async quick_health_check() -&gt; Dict[str, Any]</code>","text":"<p>Performs essential system checks in under 30 seconds.</p> <p>Returns: - Dictionary containing health check results with the following structure:   <pre><code>{\n  \"status\": \"healthy|degraded\",\n  \"timestamp\": \"ISO timestamp\",\n  \"duration_seconds\": float,\n  \"tests_passed\": int,\n  \"tests_failed\": int,\n  \"tests_total\": 4,\n  \"checks\": {\n    \"database\": {...},\n    \"frontend\": {...},\n    \"authentication\": {...},\n    \"api\": {...}\n  }\n}\n</code></pre></p> <p>Checks Performed: 1. Database connectivity 2. Frontend accessibility 3. Authentication system 4. Basic API health</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-06-01T06-29-46/#async-comprehensive_check-dictstr-any","title":"<code>async comprehensive_check() -&gt; Dict[str, Any]</code>","text":"<p>Performs comprehensive system analysis in approximately 5 minutes.</p> <p>Returns: - Dictionary with categorized health check results:   <pre><code>{\n  \"status\": \"healthy|degraded\",\n  \"timestamp\": \"ISO timestamp\", \n  \"duration_seconds\": float,\n  \"tests_passed\": int,\n  \"tests_failed\": int,\n  \"tests_total\": 15,\n  \"categories\": {\n    \"critical\": {...},\n    \"ai_services\": {...},\n    \"file_system\": {...},\n    \"multi_tenant\": {...},\n    \"analytics\": {...}\n  }\n}\n</code></pre></p> <p>Categories Checked: - Critical System Checks - AI &amp; LLM Services - File System &amp; Processing - Multi-Tenant System - Analytics &amp; Reporting</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-06-01T06-29-46/#async-deep_diagnostic-dictstr-any","title":"<code>async deep_diagnostic() -&gt; Dict[str, Any]</code>","text":"<p>Performs complete system analysis in approximately 15 minutes.</p> <p>Returns: - Extended comprehensive check results with additional categories:   - Performance monitoring   - Security configurations   - External integrations</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-06-01T06-29-46/#critical-system-checks","title":"Critical System Checks","text":""},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-06-01T06-29-46/#async-_check_database_connection-dictstr-any","title":"<code>async _check_database_connection() -&gt; Dict[str, Any]</code>","text":"<p>Tests basic database connectivity with a simple SELECT query.</p> <p>Returns: - Health status with connection details and error information if applicable</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-06-01T06-29-46/#async-_check_database_comprehensive-dictstr-any","title":"<code>async _check_database_comprehensive() -&gt; Dict[str, Any]</code>","text":"<p>Performs thorough database validation including: - Schema validation - Required table verification - Data integrity checks - User and entity counts</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-06-01T06-29-46/#async-_check_authentication-dictstr-any","title":"<code>async _check_authentication() -&gt; Dict[str, Any]</code>","text":"<p>Validates authentication system by checking for admin user existence.</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-06-01T06-29-46/#async-_check_authentication_comprehensive-dictstr-any","title":"<code>async _check_authentication_comprehensive() -&gt; Dict[str, Any]</code>","text":"<p>Extended authentication validation including: - Admin user verification - User count statistics - Active session monitoring - JWT configuration status</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-06-01T06-29-46/#async-_check_document_processing-dictstr-any","title":"<code>async _check_document_processing() -&gt; Dict[str, Any]</code>","text":"<p>Monitors document processing pipeline health: - Recent document activity (24h) - Processing queue status - Failed document counts</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-06-01T06-29-46/#ai-llm-services","title":"AI &amp; LLM Services","text":""},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-06-01T06-29-46/#async-_check_llm_configuration-dictstr-any","title":"<code>async _check_llm_configuration() -&gt; Dict[str, Any]</code>","text":"<p>Validates LLM service configuration and connectivity: - Provider configuration (local/remote) - Model availability - Service enablement status</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-06-01T06-29-46/#async-_check_vector_database-dictstr-any","title":"<code>async _check_vector_database() -&gt; Dict[str, Any]</code>","text":"<p>Tests Qdrant vector database connectivity and data availability.</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-06-01T06-29-46/#async-_check_tenant_extraction-dictstr-any","title":"<code>async _check_tenant_extraction() -&gt; Dict[str, Any]</code>","text":"<p>Verifies tenant extraction functionality and agent availability.</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-06-01T06-29-46/#file-system-processing","title":"File System &amp; Processing","text":""},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-06-01T06-29-46/#async-_check_folder_configuration-dictstr-any","title":"<code>async _check_folder_configuration() -&gt; Dict[str, Any]</code>","text":"<p>Validates file system paths and accessibility: - Host filesystem mount points - Inbox and archive folder access - Environment variable configuration</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-06-01T06-29-46/#async-_check_processing_rules-dictstr-any","title":"<code>async _check_processing_rules() -&gt; Dict[str, Any]</code>","text":"<p>Checks processing rules engine: - Rule count and status - Active rule verification</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-06-01T06-29-46/#multi-tenant-system","title":"Multi-Tenant System","text":""},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-06-01T06-29-46/#async-_check_tenant_management-dictstr-any","title":"<code>async _check_tenant_management() -&gt; Dict[str, Any]</code>","text":"<p>Validates multi-tenant system integrity: - Entity (tenant) counts - Default tenant configuration - User-entity associations</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-06-01T06-29-46/#async-_check_entity_system-dictstr-any","title":"<code>async _check_entity_system() -&gt; Dict[str, Any]</code>","text":"<p>Checks entity system categorization: - Company vs individual entities - System integrity validation</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-06-01T06-29-46/#analytics-reporting","title":"Analytics &amp; Reporting","text":""},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-06-01T06-29-46/#async-_check_analytics_service-dictstr-any","title":"<code>async _check_analytics_service() -&gt; Dict[str, Any]</code>","text":"<p>Validates analytics functionality: - Document analytics availability - Invoice processing statistics - Chart and reporting capabilities</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-06-01T06-29-46/#performance-security-deep-diagnostic","title":"Performance &amp; Security (Deep Diagnostic)","text":""},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-06-01T06-29-46/#async-_check_performance-dictstr-any","title":"<code>async _check_performance() -&gt; Dict[str, Any]</code>","text":"<p>Monitors system performance metrics: - CPU usage percentage - Memory utilization - Disk space usage - Database query performance</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-06-01T06-29-46/#async-_check_security-dictstr-any","title":"<code>async _check_security() -&gt; Dict[str, Any]</code>","text":"<p>Validates security configurations: - Admin user security settings - JWT configuration - Password hashing verification</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-06-01T06-29-46/#async-_check_integrations-dictstr-any","title":"<code>async _check_integrations() -&gt; Dict[str, Any]</code>","text":"<p>Tests external integrations: - Calendar integration (ICS export) - Notification system functionality</p>"},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-06-01T06-29-46/#usage-examples","title":"Usage Examples","text":""},{"location":"autodoc_src_backend_app_services_flight_check_service_py_2025-06-01T06-29-46/#basic-health-check","title":"Basic Health Check","text":"<p>```python from app.services.flight_check import FlightCheckService</p> <p>async def check_system_health(db_session):     flight_check = FlightCheckService(db_session)     results = await flight_check.quick_health_check()</p> <pre><code>if results[\"status\"] == \"healthy\":\n    print(\"\u2705\n</code></pre>"},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-05-31T16-08-52/","title":"autodoc src backend app services llm service py 2025 05 31T16 08 52","text":""},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-05-31T16-08-52/#documentllmservice-api-documentation","title":"DocumentLLMService API Documentation","text":""},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-05-31T16-08-52/#overview","title":"Overview","text":"<p>The DocumentLLMService module provides a high-level interface for integrating Large Language Model (LLM) capabilities with document processing workflows. It enables automated metadata extraction, content analysis, tag suggestion, and batch processing of documents.</p>"},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-05-31T16-08-52/#classes","title":"Classes","text":""},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-05-31T16-08-52/#documentllmservice","title":"DocumentLLMService","text":"<p>High-level LLM service for document processing tasks.</p>"},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-05-31T16-08-52/#constructor","title":"Constructor","text":"<pre><code>def __init__(self, db_session: AsyncSession)\n</code></pre> <p>Parameters: - <code>db_session</code> (AsyncSession): SQLAlchemy async database session for data operations</p> <p>Attributes: - <code>db_session</code>: Database session instance - <code>llm_service</code>: Core LLM service instance - <code>doc_repo</code>: Document repository for database operations</p>"},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-05-31T16-08-52/#methods","title":"Methods","text":""},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-05-31T16-08-52/#process_document","title":"process_document","text":"<pre><code>async def process_document(document_id: int, force: bool = False) -&gt; Dict[str, Any]\n</code></pre> <p>Process a single document with LLM capabilities including metadata extraction, tag suggestion, and content analysis.</p> <p>Parameters: - <code>document_id</code> (int): ID of the document to process - <code>force</code> (bool, optional): Whether to force reprocessing if already processed. Default: <code>False</code></p> <p>Returns: - <code>Dict[str, Any]</code>: Processing results containing:   - <code>document_id</code>: The processed document ID   - <code>status</code>: Processing status (<code>\"success\"</code>, <code>\"error\"</code>, <code>\"skipped\"</code>, <code>\"processing\"</code>)   - <code>message</code>: Descriptive message about the processing result   - <code>metadata</code> (optional): Extracted document metadata   - <code>suggested_tags</code> (optional): AI-generated tags   - <code>analysis</code> (optional): Document content analysis</p> <p>Example: <pre><code>service = DocumentLLMService(db_session)\nresult = await service.process_document(123, force=True)\nprint(result[\"status\"])  # \"success\"\n</code></pre></p>"},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-05-31T16-08-52/#batch_process_documents","title":"batch_process_documents","text":"<pre><code>async def batch_process_documents(document_ids: List[int], force: bool = False) -&gt; Dict[str, Any]\n</code></pre> <p>Process multiple documents concurrently with configurable batch size and concurrency limits.</p> <p>Parameters: - <code>document_ids</code> (List[int]): List of document IDs to process - <code>force</code> (bool, optional): Force processing even if already processed. Default: <code>False</code></p> <p>Returns: - <code>Dict[str, Any]</code>: Batch processing results containing:   - <code>status</code>: Overall batch status   - <code>total</code>: Total number of documents   - <code>processed</code>: Number of successfully processed documents   - <code>skipped</code>: Number of skipped documents   - <code>errors</code>: Number of failed documents   - <code>details</code>: List of individual processing results</p> <p>Example: <pre><code>result = await service.batch_process_documents([1, 2, 3, 4, 5])\nprint(f\"Processed: {result['processed']}/{result['total']}\")\n</code></pre></p>"},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-05-31T16-08-52/#enrich_document_field","title":"enrich_document_field","text":"<pre><code>async def enrich_document_field(document_id: int, field_name: str) -&gt; Dict[str, Any]\n</code></pre> <p>Enrich a specific field of a document using targeted LLM extraction.</p> <p>Parameters: - <code>document_id</code> (int): ID of the document to enrich - <code>field_name</code> (str): Name of the field to extract/enrich</p> <p>Returns: - <code>Dict[str, Any]</code>: Enrichment result containing:   - <code>status</code>: Operation status   - <code>field</code>: The enriched field name   - <code>value</code>: Extracted field value   - <code>message</code>: Result description</p> <p>Example: <pre><code>result = await service.enrich_document_field(123, \"invoice_number\")\nif result[\"status\"] == \"success\":\n    print(f\"Invoice number: {result['value']}\")\n</code></pre></p>"},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-05-31T16-08-52/#private-methods","title":"Private Methods","text":""},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-05-31T16-08-52/#_update_document_metadata","title":"_update_document_metadata","text":"<pre><code>async def _update_document_metadata(document: Document, metadata: Dict[str, Any]) -&gt; None\n</code></pre> <p>Internal method to update document fields with LLM-extracted metadata.</p> <p>Parameters: - <code>document</code> (Document): Document instance to update - <code>metadata</code> (Dict[str, Any]): Extracted metadata dictionary</p> <p>Field Mapping: - <code>title</code> \u2192 document.title - <code>document_type</code> \u2192 document.document_type - <code>sender</code> \u2192 document.sender - <code>recipient</code> \u2192 document.recipient - <code>document_date</code> \u2192 document.document_date - <code>due_date</code> \u2192 document.due_date - <code>amount</code> \u2192 document.amount - <code>currency</code> \u2192 document.currency - <code>status</code> \u2192 document.status</p>"},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-05-31T16-08-52/#_add_tags_to_document","title":"_add_tags_to_document","text":"<pre><code>async def _add_tags_to_document(document_id: int, tags: List[str]) -&gt; None\n</code></pre> <p>Internal method to add AI-suggested tags to a document with validation.</p> <p>Parameters: - <code>document_id</code> (int): Target document ID - <code>tags</code> (List[str]): List of suggested tags to add</p>"},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-05-31T16-08-52/#llmservicefactory","title":"LLMServiceFactory","text":"<p>Factory class for creating LLM service instances.</p>"},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-05-31T16-08-52/#static-methods","title":"Static Methods","text":""},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-05-31T16-08-52/#create_document_service","title":"create_document_service","text":"<pre><code>@staticmethod\ndef create_document_service(db_session: AsyncSession) -&gt; DocumentLLMService\n</code></pre> <p>Create a DocumentLLMService instance.</p> <p>Parameters: - <code>db_session</code> (AsyncSession): Database session</p> <p>Returns: - <code>DocumentLLMService</code>: Configured service instance</p>"},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-05-31T16-08-52/#create_llm_service","title":"create_llm_service","text":"<pre><code>@staticmethod\ndef create_llm_service(db_session: AsyncSession) -&gt; LLMService\n</code></pre> <p>Create a basic LLMService instance.</p> <p>Parameters: - <code>db_session</code> (AsyncSession): Database session</p> <p>Returns: - <code>LLMService</code>: Core LLM service instance</p>"},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-05-31T16-08-52/#configuration","title":"Configuration","text":"<p>The service respects various configuration options retrieved from the LLM service:</p> <ul> <li><code>auto_enrichment</code> (bool): Enable automatic metadata extraction</li> <li><code>auto_tagging</code> (bool): Enable automatic tag suggestion</li> <li><code>batch_size</code> (int): Number of documents per batch (default: 5)</li> <li><code>concurrent_tasks</code> (int): Maximum concurrent processing tasks (default: 2)</li> <li><code>min_confidence_tagging</code> (float): Minimum confidence for tag acceptance (default: 0.7)</li> </ul>"},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-05-31T16-08-52/#error-handling","title":"Error Handling","text":"<p>All methods include comprehensive error handling:</p> <ul> <li>Database errors are logged and rolled back</li> <li>LLM service</li> </ul>"},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-06-01T06-29-16/","title":"autodoc src backend app services llm service py 2025 06 01T06 29 16","text":""},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-06-01T06-29-16/#documentllmservice-module","title":"DocumentLLMService Module","text":""},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-06-01T06-29-16/#overview","title":"Overview","text":"<p>The DocumentLLMService module provides high-level document processing capabilities using Large Language Models (LLM). It serves as an integration layer between document management and AI-powered content analysis, offering features like metadata extraction, tag suggestion, content analysis, and batch processing.</p>"},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-06-01T06-29-16/#classes","title":"Classes","text":""},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-06-01T06-29-16/#documentllmservice","title":"DocumentLLMService","text":"<p>A high-level service class that handles document processing tasks using LLM capabilities.</p>"},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-06-01T06-29-16/#constructor","title":"Constructor","text":"<pre><code>def __init__(self, db_session: AsyncSession)\n</code></pre> <p>Parameters: - <code>db_session</code> (AsyncSession): SQLAlchemy async database session for data operations</p> <p>Description: Initializes the service with a database session and creates instances of the underlying LLM service and document repository.</p>"},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-06-01T06-29-16/#methods","title":"Methods","text":""},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-06-01T06-29-16/#process_document","title":"process_document","text":"<pre><code>async def process_document(document_id: int, force: bool = False) -&gt; Dict[str, Any]\n</code></pre> <p>Parameters: - <code>document_id</code> (int): Unique identifier of the document to process - <code>force</code> (bool, optional): Whether to force reprocessing if document was already processed. Defaults to <code>False</code></p> <p>Returns: - <code>Dict[str, Any]</code>: Processing results containing status, metadata, tags, and analysis</p> <p>Description: Processes a single document with LLM capabilities including: - Metadata extraction (if auto-enrichment is enabled) - Tag suggestion (if auto-tagging is enabled)  - Content analysis - Document status updates</p> <p>Example Response: <pre><code>{\n  \"document_id\": 123,\n  \"status\": \"success\",\n  \"metadata\": {...},\n  \"suggested_tags\": [\"invoice\", \"finance\"],\n  \"analysis\": {...},\n  \"message\": \"Document processed successfully\"\n}\n</code></pre></p>"},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-06-01T06-29-16/#batch_process_documents","title":"batch_process_documents","text":"<pre><code>async def batch_process_documents(document_ids: List[int], force: bool = False) -&gt; Dict[str, Any]\n</code></pre> <p>Parameters: - <code>document_ids</code> (List[int]): List of document IDs to process - <code>force</code> (bool, optional): Force processing even if already processed. Defaults to <code>False</code></p> <p>Returns: - <code>Dict[str, Any]</code>: Batch processing results with aggregated statistics</p> <p>Description: Processes multiple documents in batches with configurable concurrency limits. Provides detailed statistics and per-document results.</p> <p>Example Response: <pre><code>{\n  \"status\": \"success\",\n  \"total\": 10,\n  \"processed\": 8,\n  \"skipped\": 1,\n  \"errors\": 1,\n  \"details\": [...]\n}\n</code></pre></p>"},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-06-01T06-29-16/#enrich_document_field","title":"enrich_document_field","text":"<pre><code>async def enrich_document_field(document_id: int, field_name: str) -&gt; Dict[str, Any]\n</code></pre> <p>Parameters: - <code>document_id</code> (int): ID of the document to enrich - <code>field_name</code> (str): Name of the specific field to enrich</p> <p>Returns: - <code>Dict[str, Any]</code>: Enrichment result with extracted field value</p> <p>Description: Enriches a specific field of a document using targeted LLM prompts. Useful for extracting specific information like dates, amounts, or other structured data.</p> <p>Example Response: <pre><code>{\n  \"status\": \"success\",\n  \"field\": \"due_date\",\n  \"value\": \"2024-01-15\",\n  \"message\": \"Successfully enriched due_date\"\n}\n</code></pre></p>"},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-06-01T06-29-16/#private-methods","title":"Private Methods","text":""},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-06-01T06-29-16/#_update_document_metadata","title":"_update_document_metadata","text":"<pre><code>async def _update_document_metadata(document: Document, metadata: Dict[str, Any]) -&gt; None\n</code></pre> <p>Description: Updates document fields with extracted metadata. Maps LLM-extracted metadata to corresponding document model fields and commits changes to the database.</p> <p>Supported Fields: - title - document_type - sender - recipient - document_date - due_date - amount - currency - status</p>"},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-06-01T06-29-16/#_add_tags_to_document","title":"_add_tags_to_document","text":"<pre><code>async def _add_tags_to_document(document_id: int, tags: List[str]) -&gt; None\n</code></pre> <p>Description: Adds LLM-suggested tags to a document with basic validation and confidence filtering.</p>"},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-06-01T06-29-16/#llmservicefactory","title":"LLMServiceFactory","text":"<p>A factory class for creating LLM service instances.</p>"},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-06-01T06-29-16/#static-methods","title":"Static Methods","text":""},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-06-01T06-29-16/#create_document_service","title":"create_document_service","text":"<pre><code>@staticmethod\ndef create_document_service(db_session: AsyncSession) -&gt; DocumentLLMService\n</code></pre> <p>Parameters: - <code>db_session</code> (AsyncSession): Database session for the service</p> <p>Returns: - <code>DocumentLLMService</code>: Configured document LLM service instance</p>"},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-06-01T06-29-16/#create_llm_service","title":"create_llm_service","text":"<pre><code>@staticmethod\ndef create_llm_service(db_session: AsyncSession) -&gt; LLMService\n</code></pre> <p>Parameters: - <code>db_session</code> (AsyncSession): Database session for the service</p> <p>Returns: - <code>LLMService</code>: Basic LLM service instance</p>"},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-06-01T06-29-16/#configuration","title":"Configuration","text":"<p>The service respects various configuration options retrieved from the LLM service:</p> <ul> <li><code>auto_enrichment</code> (bool): Enable automatic metadata extraction</li> <li><code>auto_tagging</code> (bool): Enable automatic tag suggestion</li> <li><code>batch_size</code> (int): Number of documents to process per batch (default: 5)</li> <li><code>concurrent_tasks</code> (int): Maximum concurrent processing tasks (default: 2)</li> <li><code>min_confidence_tagging</code> (float): Minimum confidence threshold for tag addition (default: 0.7)</li> </ul>"},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-06-01T06-29-16/#error-handling","title":"Error Handling","text":"<p>The service implements comprehensive error handling:</p> <ul> <li>Document Not Found: Returns error status when document ID doesn't exist</li> <li>LLM Service Disabled: Gracefully handles disabled LLM processing</li> <li>Processing Exceptions: Catches and logs processing errors with detailed messages</li> <li>Database Errors: Handles database transaction failures with rollback</li> </ul>"},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-06-01T06-29-16/#logging","title":"Logging","text":"<p>The module uses Python's logging framework with the logger name derived from the module. Key events logged include:</p> <ul> <li>Document processing start/completion</li> <li>Metadata updates</li> <li>Tag additions</li> <li>Error conditions with stack traces</li> </ul>"},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-06-01T06-29-16/#dependencies","title":"Dependencies","text":"<ul> <li><code>sqlalchemy.ext.asyncio</code>: Async database operations</li> <li><code>app.llm.LLMService</code>: Core LLM processing capabilities</li> <li><code>app.models.Document</code>: Document data model</li> <li><code>app.repository.DocumentRepository</code>: Document data access layer</li> <li><code>app.agents.tenant_agent.TenantExtractionAgent</code>: Tenant information extraction</li> </ul>"},{"location":"autodoc_src_backend_app_services_llm_service_py_2025-06-01T06-29-16/#usage-example","title":"Usage Example","text":"<p>```</p>"},{"location":"autodoc_src_backend_app_services_onboarding_py_2025-05-31T16-10-11/","title":"autodoc src backend app services onboarding py 2025 05 31T16 10 11","text":""},{"location":"autodoc_src_backend_app_services_onboarding_py_2025-05-31T16-10-11/#onboardingservice","title":"OnboardingService","text":""},{"location":"autodoc_src_backend_app_services_onboarding_py_2025-05-31T16-10-11/#overview","title":"Overview","text":"<p>The <code>OnboardingService</code> class manages the application's terms of service (TOS) acceptance flow and handles application settings initialization. It provides methods to accept terms of service, check acceptance status, and manage the underlying settings configuration.</p>"},{"location":"autodoc_src_backend_app_services_onboarding_py_2025-05-31T16-10-11/#dependencies","title":"Dependencies","text":"<pre><code>from datetime import datetime\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy import select, update\nfrom app.models import AppSettings\n</code></pre>"},{"location":"autodoc_src_backend_app_services_onboarding_py_2025-05-31T16-10-11/#class-definition","title":"Class Definition","text":""},{"location":"autodoc_src_backend_app_services_onboarding_py_2025-05-31T16-10-11/#onboardingservice_1","title":"OnboardingService","text":"<p>Handles onboarding-related operations including TOS acceptance and settings management.</p>"},{"location":"autodoc_src_backend_app_services_onboarding_py_2025-05-31T16-10-11/#constructor","title":"Constructor","text":"<pre><code>def __init__(self, db: AsyncSession)\n</code></pre> <p>Parameters: - <code>db</code> (AsyncSession): SQLAlchemy async database session for database operations</p> <p>Description: Initializes the service with a database session.</p>"},{"location":"autodoc_src_backend_app_services_onboarding_py_2025-05-31T16-10-11/#public-methods","title":"Public Methods","text":""},{"location":"autodoc_src_backend_app_services_onboarding_py_2025-05-31T16-10-11/#accept_tos","title":"accept_tos()","text":"<pre><code>async def accept_tos() -&gt; datetime\n</code></pre> <p>Returns: - <code>datetime</code>: The timestamp when the terms of service were accepted</p> <p>Description: Records the user's acceptance of the terms of service by setting the current UTC timestamp in the application settings.</p> <p>Example: <pre><code>service = OnboardingService(db_session)\naccepted_time = await service.accept_tos()\nprint(f\"TOS accepted at: {accepted_time}\")\n</code></pre></p>"},{"location":"autodoc_src_backend_app_services_onboarding_py_2025-05-31T16-10-11/#tos_accepted","title":"tos_accepted()","text":"<pre><code>async def tos_accepted() -&gt; bool\n</code></pre> <p>Returns: - <code>bool</code>: <code>True</code> if terms of service have been accepted, <code>False</code> otherwise</p> <p>Description: Checks whether the terms of service have been previously accepted by verifying if the <code>tos_accepted_at</code> field contains a timestamp.</p> <p>Example: <pre><code>service = OnboardingService(db_session)\nif await service.tos_accepted():\n    print(\"User has accepted TOS\")\nelse:\n    print(\"TOS acceptance required\")\n</code></pre></p>"},{"location":"autodoc_src_backend_app_services_onboarding_py_2025-05-31T16-10-11/#private-methods","title":"Private Methods","text":""},{"location":"autodoc_src_backend_app_services_onboarding_py_2025-05-31T16-10-11/#_settings_row","title":"_settings_row()","text":"<pre><code>async def _settings_row() -&gt; AppSettings\n</code></pre> <p>Returns: - <code>AppSettings</code>: The application settings record</p> <p>Description: Retrieves the application settings record from the database. If no settings record exists (ID = 1), creates a new one with default values: - <code>inbox_path</code>: \"/tmp\" - <code>storage_root</code>: \"/tmp\"</p> <p>The method ensures that an application settings record always exists before returning it.</p> <p>Behavior: 1. Attempts to fetch the settings record with ID = 1 2. If no record exists, creates a new <code>AppSettings</code> instance with default paths 3. Adds the new record to the database session 4. Commits the transaction 5. Refreshes the record to reflect any database-generated values 6. Returns the settings record</p>"},{"location":"autodoc_src_backend_app_services_onboarding_py_2025-05-31T16-10-11/#usage-example","title":"Usage Example","text":"<pre><code>from sqlalchemy.ext.asyncio import AsyncSession\nfrom app.services.onboarding import OnboardingService\n\nasync def handle_onboarding(db_session: AsyncSession):\n    onboarding_service = OnboardingService(db_session)\n\n    # Check if TOS is already accepted\n    if not await onboarding_service.tos_accepted():\n        # Accept TOS\n        accepted_at = await onboarding_service.accept_tos()\n        print(f\"TOS accepted at {accepted_at}\")\n    else:\n        print(\"TOS already accepted\")\n</code></pre>"},{"location":"autodoc_src_backend_app_services_onboarding_py_2025-05-31T16-10-11/#notes","title":"Notes","text":"<ul> <li>The service assumes a single application settings record with ID = 1</li> <li>Default paths are set to \"/tmp\" for both inbox and storage locations</li> <li>All database operations are asynchronous and require proper session management</li> <li>The service automatically handles the creation of missing settings records</li> </ul>"},{"location":"autodoc_src_backend_app_services_onboarding_py_2025-06-01T06-30-36/","title":"autodoc src backend app services onboarding py 2025 06 01T06 30 36","text":""},{"location":"autodoc_src_backend_app_services_onboarding_py_2025-06-01T06-30-36/#onboardingservice","title":"OnboardingService","text":""},{"location":"autodoc_src_backend_app_services_onboarding_py_2025-06-01T06-30-36/#overview","title":"Overview","text":"<p>The <code>OnboardingService</code> class manages application onboarding processes, specifically handling Terms of Service (ToS) acceptance tracking through database operations.</p>"},{"location":"autodoc_src_backend_app_services_onboarding_py_2025-06-01T06-30-36/#class-definition","title":"Class Definition","text":"<pre><code>class OnboardingService\n</code></pre>"},{"location":"autodoc_src_backend_app_services_onboarding_py_2025-06-01T06-30-36/#constructor","title":"Constructor","text":"<pre><code>def __init__(self, db: AsyncSession)\n</code></pre> <p>Parameters: - <code>db</code> (AsyncSession): SQLAlchemy async database session for performing database operations</p> <p>Description: Initializes the OnboardingService with a database session.</p>"},{"location":"autodoc_src_backend_app_services_onboarding_py_2025-06-01T06-30-36/#public-methods","title":"Public Methods","text":""},{"location":"autodoc_src_backend_app_services_onboarding_py_2025-06-01T06-30-36/#accept_tos","title":"accept_tos()","text":"<pre><code>async def accept_tos() -&gt; datetime\n</code></pre> <p>Returns: - <code>datetime</code>: Timestamp when the Terms of Service was accepted</p> <p>Description: Records the user's acceptance of Terms of Service by setting the current UTC timestamp in the application settings.</p> <p>Behavior: 1. Retrieves the application settings row 2. Sets <code>tos_accepted_at</code> to the current UTC datetime 3. Commits the changes to the database 4. Returns the acceptance timestamp</p>"},{"location":"autodoc_src_backend_app_services_onboarding_py_2025-06-01T06-30-36/#tos_accepted","title":"tos_accepted()","text":"<pre><code>async def tos_accepted() -&gt; bool\n</code></pre> <p>Returns: - <code>bool</code>: <code>True</code> if Terms of Service has been accepted, <code>False</code> otherwise</p> <p>Description: Checks whether the Terms of Service has been previously accepted by examining the <code>tos_accepted_at</code> field in application settings.</p>"},{"location":"autodoc_src_backend_app_services_onboarding_py_2025-06-01T06-30-36/#private-methods","title":"Private Methods","text":""},{"location":"autodoc_src_backend_app_services_onboarding_py_2025-06-01T06-30-36/#_settings_row","title":"_settings_row()","text":"<pre><code>async def _settings_row() -&gt; AppSettings\n</code></pre> <p>Returns: - <code>AppSettings</code>: The application settings database record</p> <p>Description: Retrieves or creates the application settings row. This method ensures that an <code>AppSettings</code> record always exists in the database.</p> <p>Behavior: 1. Attempts to fetch the <code>AppSettings</code> record with ID 1 2. If no record exists:    - Creates a new <code>AppSettings</code> record with default values:      - <code>inbox_path</code>: \"/tmp\"      - <code>storage_root</code>: \"/tmp\"    - Adds the record to the database session    - Commits the transaction    - Refreshes the record to get the current state 3. Returns the settings record</p>"},{"location":"autodoc_src_backend_app_services_onboarding_py_2025-06-01T06-30-36/#dependencies","title":"Dependencies","text":"<pre><code>from datetime import datetime\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy import select, update\nfrom app.models import AppSettings\n</code></pre> <p>Required Imports: - <code>datetime.datetime</code>: For timestamp operations - <code>sqlalchemy.ext.asyncio.AsyncSession</code>: Async database session handling - <code>sqlalchemy.select</code>, <code>sqlalchemy.update</code>: SQL query operations - <code>app.models.AppSettings</code>: Application settings model</p>"},{"location":"autodoc_src_backend_app_services_onboarding_py_2025-06-01T06-30-36/#usage-example","title":"Usage Example","text":"<pre><code>from sqlalchemy.ext.asyncio import AsyncSession\nfrom app.services.onboarding import OnboardingService\n\nasync def handle_onboarding(db_session: AsyncSession):\n    service = OnboardingService(db_session)\n\n    # Check if ToS is already accepted\n    if not await service.tos_accepted():\n        # Accept ToS\n        accepted_at = await service.accept_tos()\n        print(f\"Terms of Service accepted at: {accepted_at}\")\n    else:\n        print(\"Terms of Service already accepted\")\n</code></pre>"},{"location":"autodoc_src_backend_app_services_onboarding_py_2025-06-01T06-30-36/#notes","title":"Notes","text":"<ul> <li>All database operations are asynchronous and require proper <code>await</code> handling</li> <li>The service assumes a single application settings record with ID 1</li> <li>Default paths (\"/tmp\") are used for new settings records and should be configured appropriately for production environments</li> <li>The service automatically handles database session management through commits and refreshes</li> </ul>"},{"location":"autodoc_src_backend_app_vector_store_py_2025-05-31T16-02-07/","title":"autodoc src backend app vector store py 2025 05 31T16 02 07","text":""},{"location":"autodoc_src_backend_app_vector_store_py_2025-05-31T16-02-07/#qdrant-helper-module","title":"Qdrant Helper Module","text":"<p>A lightweight Qdrant vector database client designed specifically for ColPali integration with minimal dependencies and lazy initialization.</p>"},{"location":"autodoc_src_backend_app_vector_store_py_2025-05-31T16-02-07/#overview","title":"Overview","text":"<p>This module provides a simple interface to Qdrant for storing and retrieving multi-vector embeddings from document pages. It maintains a single, lazily-initialized client instance and focuses on essential operations needed for ColPali document processing.</p>"},{"location":"autodoc_src_backend_app_vector_store_py_2025-05-31T16-02-07/#configuration","title":"Configuration","text":"<p>The module uses environment variables for configuration:</p> Variable Default Value Description <code>QDRANT_COLLECTION</code> <code>colpali_pages</code> Name of the Qdrant collection <code>VECTOR_DB_HOST</code> <code>qdrant</code> Qdrant server hostname <code>VECTOR_DB_PORT</code> <code>6333</code> Qdrant server port"},{"location":"autodoc_src_backend_app_vector_store_py_2025-05-31T16-02-07/#functions","title":"Functions","text":""},{"location":"autodoc_src_backend_app_vector_store_py_2025-05-31T16-02-07/#ensure_collectionvector_size-int-128","title":"<code>ensure_collection(vector_size: int = 128)</code>","text":"<p>Ensures the Qdrant collection exists with the specified configuration.</p> <p>Parameters: - <code>vector_size</code> (int, optional): Dimension of the vectors to be stored. Defaults to 128.</p> <p>Behavior: - Checks if the collection exists - If not found, creates a new collection with cosine distance metric - Uses <code>recreate_collection()</code> to ensure clean state if collection needs to be created</p> <p>Example: <pre><code>ensure_collection(vector_size=256)\n</code></pre></p>"},{"location":"autodoc_src_backend_app_vector_store_py_2025-05-31T16-02-07/#upsert_pagedoc_id-int-page_idx-int-multi_vectors-sequencesequencefloat-liststr","title":"<code>upsert_page(doc_id: int, page_idx: int, multi_vectors: Sequence[Sequence[float]]) -&gt; List[str]</code>","text":"<p>Inserts multiple vectors for a document page into the collection.</p> <p>Parameters: - <code>doc_id</code> (int): Unique identifier for the document - <code>page_idx</code> (int): Page number within the document (0-indexed) - <code>multi_vectors</code> (Sequence[Sequence[float]]): Collection of vector embeddings for the page</p> <p>Returns: - <code>List[str]</code>: List of generated UUID strings for each inserted vector point</p> <p>Behavior: - Automatically ensures collection exists with appropriate vector size - Generates unique UUID for each vector point - Stores vectors with metadata containing document ID and page index - Performs batch upsert operation</p> <p>Example: <pre><code>vectors = [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]]\npoint_ids = upsert_page(doc_id=123, page_idx=0, multi_vectors=vectors)\nprint(f\"Inserted {len(point_ids)} vectors\")\n</code></pre></p>"},{"location":"autodoc_src_backend_app_vector_store_py_2025-05-31T16-02-07/#searchquery_vector-sequencefloat-top_k-int-20","title":"<code>search(query_vector: Sequence[float], top_k: int = 20)</code>","text":"<p>Performs similarity search against the vector collection.</p> <p>Parameters: - <code>query_vector</code> (Sequence[float]): Query vector for similarity search - <code>top_k</code> (int, optional): Maximum number of results to return. Defaults to 20.</p> <p>Returns: - List of <code>ScoredPoint</code> objects from Qdrant containing matched vectors with scores and metadata</p> <p>Behavior: - Ensures collection exists with appropriate vector size - Performs cosine similarity search - Returns results sorted by similarity score</p> <p>Example: <pre><code>query = [0.1, 0.2, 0.3, 0.4]\nresults = search(query_vector=query, top_k=10)\nfor result in results:\n    print(f\"Score: {result.score}, Doc ID: {result.payload['doc_id']}\")\n</code></pre></p>"},{"location":"autodoc_src_backend_app_vector_store_py_2025-05-31T16-02-07/#implementation-details","title":"Implementation Details","text":""},{"location":"autodoc_src_backend_app_vector_store_py_2025-05-31T16-02-07/#lazy-initialization","title":"Lazy Initialization","text":"<p>The module uses a global <code>_client</code> variable that is initialized only when first accessed through <code>_get_client()</code>. This design minimizes resource usage when the vector database functionality is not needed.</p>"},{"location":"autodoc_src_backend_app_vector_store_py_2025-05-31T16-02-07/#error-handling","title":"Error Handling","text":"<ul> <li>Collection existence is checked using exception handling rather than explicit API calls</li> <li>Uses broad exception catching for collection existence checks to handle various Qdrant error conditions</li> </ul>"},{"location":"autodoc_src_backend_app_vector_store_py_2025-05-31T16-02-07/#data-format","title":"Data Format","text":"<ul> <li>Vectors are converted to plain Python lists to ensure compatibility with Qdrant's JSON serialization</li> <li>Point IDs use compact UUID hex strings for efficient storage</li> <li>Payload includes <code>doc_id</code> and <code>page</code> fields for result filtering and identification</li> </ul>"},{"location":"autodoc_src_backend_app_vector_store_py_2025-05-31T16-02-07/#dependencies","title":"Dependencies","text":"<ul> <li><code>qdrant-client</code>: Official Qdrant Python client</li> <li>Standard library modules: <code>os</code>, <code>uuid</code>, <code>typing</code></li> </ul>"},{"location":"autodoc_src_backend_app_vector_store_py_2025-05-31T16-02-07/#thread-safety","title":"Thread Safety","text":"<p>This module maintains a global client instance and should be used with caution in multi-threaded environments. The Qdrant client itself is thread-safe, but the lazy initialization pattern may create race conditions during first access.</p>"},{"location":"autodoc_src_backend_app_vector_store_py_2025-06-01T06-22-20/","title":"autodoc src backend app vector store py 2025 06 01T06 22 20","text":""},{"location":"autodoc_src_backend_app_vector_store_py_2025-06-01T06-22-20/#qdrant-helper-module","title":"Qdrant Helper Module","text":"<p>A lightweight utility module for integrating with Qdrant vector database, specifically designed for ColPali document processing workflows.</p>"},{"location":"autodoc_src_backend_app_vector_store_py_2025-06-01T06-22-20/#overview","title":"Overview","text":"<p>This module provides a minimal interface to Qdrant operations, featuring lazy client initialization and essential vector storage functionality. It is optimized for use in background tasks where heavy initialization should be avoided when vector database operations are not required.</p>"},{"location":"autodoc_src_backend_app_vector_store_py_2025-06-01T06-22-20/#configuration","title":"Configuration","text":"<p>The module uses environment variables for configuration:</p> Variable Default Value Description <code>QDRANT_COLLECTION</code> <code>colpali_pages</code> Name of the Qdrant collection <code>VECTOR_DB_HOST</code> <code>qdrant</code> Qdrant server hostname <code>VECTOR_DB_PORT</code> <code>6333</code> Qdrant server port"},{"location":"autodoc_src_backend_app_vector_store_py_2025-06-01T06-22-20/#functions","title":"Functions","text":""},{"location":"autodoc_src_backend_app_vector_store_py_2025-06-01T06-22-20/#ensure_collectionvector_size-int-128","title":"<code>ensure_collection(vector_size: int = 128)</code>","text":"<p>Idempotently creates the required Qdrant collection if it doesn't exist.</p> <p>Parameters: - <code>vector_size</code> (int, optional): The dimensionality of vectors to be stored. Defaults to 128.</p> <p>Behavior: - Checks if the collection exists - If not found, creates a new collection with cosine distance metric - Uses <code>recreate_collection</code> to ensure a clean state</p> <p>Example: <pre><code>ensure_collection(vector_size=256)\n</code></pre></p>"},{"location":"autodoc_src_backend_app_vector_store_py_2025-06-01T06-22-20/#upsert_pagedoc_id-int-page_idx-int-multi_vectors-sequencesequencefloat-liststr","title":"<code>upsert_page(doc_id: int, page_idx: int, multi_vectors: Sequence[Sequence[float]]) -&gt; List[str]</code>","text":"<p>Inserts multiple vectors for a document page and returns the generated point IDs.</p> <p>Parameters: - <code>doc_id</code> (int): Unique identifier for the document - <code>page_idx</code> (int): Page number within the document - <code>multi_vectors</code> (Sequence[Sequence[float]]): Collection of vector embeddings for the page</p> <p>Returns: - <code>List[str]</code>: List of generated UUID strings (hexadecimal format) for each inserted point</p> <p>Behavior: - Automatically ensures collection exists with appropriate vector dimensions - Generates unique UUIDs for each vector point - Stores metadata including document ID and page index - Performs batch upsert operation</p> <p>Example: <pre><code>vectors = [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]]\npoint_ids = upsert_page(doc_id=123, page_idx=0, multi_vectors=vectors)\nprint(f\"Inserted {len(point_ids)} vectors\")\n</code></pre></p>"},{"location":"autodoc_src_backend_app_vector_store_py_2025-06-01T06-22-20/#searchquery_vector-sequencefloat-top_k-int-20","title":"<code>search(query_vector: Sequence[float], top_k: int = 20)</code>","text":"<p>Performs similarity search against the stored vectors.</p> <p>Parameters: - <code>query_vector</code> (Sequence[float]): Query vector for similarity search - <code>top_k</code> (int, optional): Maximum number of results to return. Defaults to 20.</p> <p>Returns: - List of <code>ScoredPoint</code> objects from Qdrant containing matching vectors with similarity scores</p> <p>Behavior: - Ensures collection exists with matching vector dimensions - Performs cosine similarity search - Returns results ordered by similarity score</p> <p>Example: <pre><code>query = [0.1, 0.2, 0.3, 0.4]\nresults = search(query_vector=query, top_k=10)\nfor result in results:\n    print(f\"Score: {result.score}, Doc ID: {result.payload['doc_id']}\")\n</code></pre></p>"},{"location":"autodoc_src_backend_app_vector_store_py_2025-06-01T06-22-20/#architecture-notes","title":"Architecture Notes","text":""},{"location":"autodoc_src_backend_app_vector_store_py_2025-06-01T06-22-20/#lazy-initialization","title":"Lazy Initialization","text":"<ul> <li>The <code>QdrantClient</code> instance is created only when first needed</li> <li>Reduces initialization overhead for importing modules</li> <li>Thread-safe singleton pattern using global variable</li> </ul>"},{"location":"autodoc_src_backend_app_vector_store_py_2025-06-01T06-22-20/#minimal-dependencies","title":"Minimal Dependencies","text":"<ul> <li>Designed for lightweight imports in background tasks</li> <li>Focused API surface for specific ColPali use cases</li> <li>Avoids heavy initialization when vector operations aren't required</li> </ul>"},{"location":"autodoc_src_backend_app_vector_store_py_2025-06-01T06-22-20/#data-structure","title":"Data Structure","text":"<p>Each stored point contains: - ID: UUID4 hexadecimal string - Vector: List of float values - Payload:    - <code>doc_id</code>: Document identifier   - <code>page</code>: Page index within document</p>"},{"location":"autodoc_src_backend_app_vector_store_py_2025-06-01T06-22-20/#dependencies","title":"Dependencies","text":"<ul> <li><code>qdrant-client</code>: Official Qdrant Python client</li> <li>Standard library modules: <code>os</code>, <code>uuid</code>, <code>typing</code></li> </ul>"},{"location":"autodoc_src_backend_app_vector_store_py_2025-06-01T06-22-20/#error-handling","title":"Error Handling","text":"<ul> <li>Collection existence checks use broad exception handling</li> <li>Missing collections trigger automatic recreation</li> <li>Vector dimension mismatches are handled by automatic collection setup</li> </ul>"},{"location":"autodoc_src_backend_app_version_py_2025-05-31T15-59-43/","title":"autodoc src backend app version py 2025 05 31T15 59 43","text":""},{"location":"autodoc_src_backend_app_version_py_2025-05-31T15-59-43/#docai-image-version-configuration","title":"DocAI-IMAGE Version Configuration","text":""},{"location":"autodoc_src_backend_app_version_py_2025-05-31T15-59-43/#overview","title":"Overview","text":"<p>The <code>version.py</code> module provides version management and release tracking functionality for the DocAI-IMAGE application. It maintains comprehensive version history, release information, and provides utility functions for accessing version-related data.</p>"},{"location":"autodoc_src_backend_app_version_py_2025-05-31T15-59-43/#module-information","title":"Module Information","text":"<ul> <li>Current Version: 0.92.0</li> <li>Release Date: 2025-05-30</li> <li>Release Name: Document Processing Rule Engine</li> </ul>"},{"location":"autodoc_src_backend_app_version_py_2025-05-31T15-59-43/#constants","title":"Constants","text":""},{"location":"autodoc_src_backend_app_version_py_2025-05-31T15-59-43/#version-information","title":"Version Information","text":"Constant Type Value Description <code>__version__</code> <code>str</code> <code>\"0.92.0\"</code> Current application version <code>__release_date__</code> <code>str</code> <code>\"2025-05-30\"</code> Current release date <code>__release_name__</code> <code>str</code> <code>\"Document Processing Rule Engine\"</code> Current release name"},{"location":"autodoc_src_backend_app_version_py_2025-05-31T15-59-43/#version-history","title":"Version History","text":"<p><code>VERSION_HISTORY</code> is a list containing detailed information about each release, including:</p> <ul> <li>version: Version number string</li> <li>date: Release date in YYYY-MM-DD format</li> <li>name: Human-readable release name</li> <li>description: Brief description of the release</li> <li>features: List of user-facing features added</li> <li>changes: List of technical changes and improvements</li> </ul>"},{"location":"autodoc_src_backend_app_version_py_2025-05-31T15-59-43/#functions","title":"Functions","text":""},{"location":"autodoc_src_backend_app_version_py_2025-05-31T15-59-43/#get_version","title":"<code>get_version()</code>","text":"<p>Returns the current version string.</p> <p>Returns: - <code>str</code>: Current version number</p> <p>Example: <pre><code>version = get_version()\nprint(version)  # Output: \"0.92.0\"\n</code></pre></p>"},{"location":"autodoc_src_backend_app_version_py_2025-05-31T15-59-43/#get_release_info","title":"<code>get_release_info()</code>","text":"<p>Returns comprehensive information about the current release.</p> <p>Returns: - <code>dict</code>: Dictionary containing:   - <code>version</code> (str): Current version number   - <code>date</code> (str): Release date   - <code>name</code> (str): Release name</p> <p>Example: <pre><code>info = get_release_info()\n# Returns: {\n#     \"version\": \"0.92.0\",\n#     \"date\": \"2025-05-30\", \n#     \"name\": \"Document Processing Rule Engine\"\n# }\n</code></pre></p>"},{"location":"autodoc_src_backend_app_version_py_2025-05-31T15-59-43/#get_version_history","title":"<code>get_version_history()</code>","text":"<p>Returns the complete version history of the application.</p> <p>Returns: - <code>list</code>: Complete VERSION_HISTORY list with all release information</p> <p>Example: <pre><code>history = get_version_history()\nfor release in history:\n    print(f\"Version {release['version']}: {release['name']}\")\n</code></pre></p>"},{"location":"autodoc_src_backend_app_version_py_2025-05-31T15-59-43/#get_latest_features","title":"<code>get_latest_features()</code>","text":"<p>Extracts and returns the features list from the most recent release.</p> <p>Returns: - <code>list</code>: List of feature strings from the latest release - <code>list</code>: Empty list if no version history exists</p> <p>Example: <pre><code>features = get_latest_features()\nfor feature in features:\n    print(f\"\u2022 {feature}\")\n</code></pre></p>"},{"location":"autodoc_src_backend_app_version_py_2025-05-31T15-59-43/#get_latest_changes","title":"<code>get_latest_changes()</code>","text":"<p>Extracts and returns the technical changes from the most recent release.</p> <p>Returns: - <code>list</code>: List of technical change strings from the latest release - <code>list</code>: Empty list if no version history exists</p> <p>Example: <pre><code>changes = get_latest_changes()\nfor change in changes:\n    print(f\"\u2022 {change}\")\n</code></pre></p>"},{"location":"autodoc_src_backend_app_version_py_2025-05-31T15-59-43/#recent-release-highlights","title":"Recent Release Highlights","text":""},{"location":"autodoc_src_backend_app_version_py_2025-05-31T15-59-43/#version-0920-document-processing-rule-engine","title":"Version 0.92.0 - Document Processing Rule Engine","text":"<p>Key Features: - Visual Rule Builder with drag-and-drop interface - Smart Automation for document classification and tenant assignment - Real-time Processing Monitor with live dashboard - Priority-based Rule Execution with comprehensive action support - Rule Analytics and usage statistics tracking</p> <p>Technical Changes: - Added processing_rules table with 13-column schema - Implemented RuleEvaluator for condition processing - Created RuleActionExecutor for automated actions - Built DocumentRuleProcessor for document workflow - Added 8 comprehensive API endpoints for rule management</p>"},{"location":"autodoc_src_backend_app_version_py_2025-05-31T15-59-43/#usage-examples","title":"Usage Examples","text":""},{"location":"autodoc_src_backend_app_version_py_2025-05-31T15-59-43/#displaying-current-version-information","title":"Displaying Current Version Information","text":"<pre><code>from version import get_version, get_release_info\n\n# Get just the version\ncurrent_version = get_version()\nprint(f\"DocAI-IMAGE v{current_version}\")\n\n# Get full release information\nrelease_info = get_release_info()\nprint(f\"Version: {release_info['version']}\")\nprint(f\"Released: {release_info['date']}\")\nprint(f\"Codename: {release_info['name']}\")\n</code></pre>"},{"location":"autodoc_src_backend_app_version_py_2025-05-31T15-59-43/#generating-release-notes","title":"Generating Release Notes","text":"<pre><code>from version import get_latest_features, get_latest_changes\n\nprint(\"## Latest Features\")\nfor feature in get_latest_features():\n    print(f\"- {feature}\")\n\nprint(\"\\n## Technical Changes\")  \nfor change in get_latest_changes():\n    print(f\"- {change}\")\n</code></pre>"},{"location":"autodoc_src_backend_app_version_py_2025-05-31T15-59-43/#version-history-report","title":"Version History Report","text":"<pre><code>from version import get_version_history\n\nhistory = get_version_history()\nfor release in history[:3]:  # Show last 3 releases\n    print(f\"\\n### Version {release['version']} - {release['name']}\")\n    print(f\"Released: {release['date']}\")\n    print(f\"Description: {release['description']}\")\n</code></pre>"},{"location":"autodoc_src_backend_app_version_py_2025-05-31T15-59-43/#dependencies","title":"Dependencies","text":"<p>This module has no external dependencies and uses only Python standard library functionality.</p>"},{"location":"autodoc_src_backend_app_version_py_2025-05-31T15-59-43/#notes","title":"Notes","text":"<ul> <li>Version numbers follow semantic versioning principles</li> <li>Release dates are stored in ISO 8601 format (YYYY-MM-DD)</li> <li>The VERSION_HISTORY list is ordered with the most recent release first</li> <li>All functions include error handling for empty version history</li> </ul>"},{"location":"autodoc_src_backend_app_version_py_2025-06-01T06-20-05/","title":"autodoc src backend app version py 2025 06 01T06 20 05","text":""},{"location":"autodoc_src_backend_app_version_py_2025-06-01T06-20-05/#docai-image-version-configuration-module","title":"DocAI-IMAGE Version Configuration Module","text":""},{"location":"autodoc_src_backend_app_version_py_2025-06-01T06-20-05/#overview","title":"Overview","text":"<p>The <code>version.py</code> module provides centralized version management and release information for the DocAI-IMAGE application. It maintains comprehensive version history, release notes, and utility functions for accessing version-related data throughout the application.</p>"},{"location":"autodoc_src_backend_app_version_py_2025-06-01T06-20-05/#module-information","title":"Module Information","text":"<ul> <li>Current Version: 0.92.0</li> <li>Release Date: 2025-05-30</li> <li>Release Name: Document Processing Rule Engine</li> </ul>"},{"location":"autodoc_src_backend_app_version_py_2025-06-01T06-20-05/#constants","title":"Constants","text":""},{"location":"autodoc_src_backend_app_version_py_2025-06-01T06-20-05/#version-information","title":"Version Information","text":"Constant Type Description <code>__version__</code> <code>str</code> Current application version number <code>__release_date__</code> <code>str</code> Current release date in YYYY-MM-DD format <code>__release_name__</code> <code>str</code> Descriptive name for the current release"},{"location":"autodoc_src_backend_app_version_py_2025-06-01T06-20-05/#version-history","title":"Version History","text":"<p>The <code>VERSION_HISTORY</code> constant contains a comprehensive list of all releases, with each version entry including:</p> <ul> <li>version: Version number string</li> <li>date: Release date</li> <li>name: Release name/title</li> <li>description: Brief description of the release</li> <li>features: List of user-facing features added</li> <li>changes: List of technical changes and implementations</li> </ul>"},{"location":"autodoc_src_backend_app_version_py_2025-06-01T06-20-05/#functions","title":"Functions","text":""},{"location":"autodoc_src_backend_app_version_py_2025-06-01T06-20-05/#get_version","title":"<code>get_version()</code>","text":"<p>Returns the current version string.</p> <p>Returns: - <code>str</code>: Current version number</p> <p>Example: <pre><code>version = get_version()\nprint(f\"Current version: {version}\")  # Output: Current version: 0.92.0\n</code></pre></p>"},{"location":"autodoc_src_backend_app_version_py_2025-06-01T06-20-05/#get_release_info","title":"<code>get_release_info()</code>","text":"<p>Returns comprehensive information about the current release.</p> <p>Returns: - <code>dict</code>: Dictionary containing:   - <code>version</code> (str): Current version number   - <code>date</code> (str): Release date   - <code>name</code> (str): Release name</p> <p>Example: <pre><code>release_info = get_release_info()\nprint(f\"Release: {release_info['name']} v{release_info['version']}\")\n</code></pre></p>"},{"location":"autodoc_src_backend_app_version_py_2025-06-01T06-20-05/#get_version_history","title":"<code>get_version_history()</code>","text":"<p>Returns the complete version history of the application.</p> <p>Returns: - <code>list</code>: List of dictionaries containing version history data</p> <p>Example: <pre><code>history = get_version_history()\nfor release in history:\n    print(f\"Version {release['version']}: {release['name']}\")\n</code></pre></p>"},{"location":"autodoc_src_backend_app_version_py_2025-06-01T06-20-05/#get_latest_features","title":"<code>get_latest_features()</code>","text":"<p>Extracts and returns the feature list from the most recent release.</p> <p>Returns: - <code>list</code>: List of strings describing new features, or empty list if no history exists</p> <p>Example: <pre><code>features = get_latest_features()\nfor feature in features:\n    print(f\"\u2022 {feature}\")\n</code></pre></p>"},{"location":"autodoc_src_backend_app_version_py_2025-06-01T06-20-05/#get_latest_changes","title":"<code>get_latest_changes()</code>","text":"<p>Extracts and returns the technical changes from the most recent release.</p> <p>Returns: - <code>list</code>: List of strings describing technical changes, or empty list if no history exists</p> <p>Example: <pre><code>changes = get_latest_changes()\nfor change in changes:\n    print(f\"- {change}\")\n</code></pre></p>"},{"location":"autodoc_src_backend_app_version_py_2025-06-01T06-20-05/#version-history-summary","title":"Version History Summary","text":""},{"location":"autodoc_src_backend_app_version_py_2025-06-01T06-20-05/#v0920-document-processing-rule-engine-2025-05-30","title":"v0.92.0 - Document Processing Rule Engine (2025-05-30)","text":"<ul> <li>Focus: Comprehensive rule-based document automation</li> <li>Key Features: Visual Rule Builder, Smart Automation, Real-time Processing Monitor</li> <li>Technical Changes: Added processing_rules table, implemented rule evaluation engine</li> </ul>"},{"location":"autodoc_src_backend_app_version_py_2025-06-01T06-20-05/#v0910-vendor-analytics-feature-2025-05-27","title":"v0.91.0 - Vendor Analytics Feature (2025-05-27)","text":"<ul> <li>Focus: Advanced vendor analytics and invoice detection</li> <li>Key Features: Dynamic Vendor Insights, AI-powered Missing Invoice Detection</li> </ul>"},{"location":"autodoc_src_backend_app_version_py_2025-06-01T06-20-05/#v0900-llm-integration-multi-provider-support-2025-05-25","title":"v0.90.0 - LLM Integration &amp; Multi-Provider Support (2025-05-25)","text":"<ul> <li>Focus: AI integration with multiple providers</li> <li>Key Features: Multi-Provider AI Support, Privacy-first local processing</li> </ul>"},{"location":"autodoc_src_backend_app_version_py_2025-06-01T06-20-05/#v0890-multi-tenant-system-2025-05-22","title":"v0.89.0 - Multi-Tenant System (2025-05-22)","text":"<ul> <li>Focus: Tenant management and document organization</li> <li>Key Features: Complete Tenant Management, AI Tenant Extraction</li> </ul>"},{"location":"autodoc_src_backend_app_version_py_2025-06-01T06-20-05/#usage-guidelines","title":"Usage Guidelines","text":""},{"location":"autodoc_src_backend_app_version_py_2025-06-01T06-20-05/#integration-with-application","title":"Integration with Application","text":"<p>This module is typically imported at the application level to:</p> <ol> <li>Display version information in user interfaces</li> <li>Log version details for debugging and support</li> <li>Track feature rollouts and changes</li> <li>Provide release notes to users</li> </ol>"},{"location":"autodoc_src_backend_app_version_py_2025-06-01T06-20-05/#best-practices","title":"Best Practices","text":"<ul> <li>Import functions rather than accessing constants directly</li> <li>Use <code>get_release_info()</code> for comprehensive release data</li> <li>Leverage <code>get_latest_features()</code> for user-facing feature announcements</li> <li>Utilize <code>get_version_history()</code> for administrative dashboards</li> </ul>"},{"location":"autodoc_src_backend_app_version_py_2025-06-01T06-20-05/#error-handling","title":"Error Handling","text":"<p>The <code>get_latest_features()</code> and <code>get_latest_changes()</code> functions include built-in error handling, returning empty lists if <code>VERSION_HISTORY</code> is empty or malformed.</p>"},{"location":"autodoc_src_backend_app_version_py_2025-06-01T06-20-05/#dependencies","title":"Dependencies","text":"<p>This module has no external dependencies and uses only Python standard library features.</p>"},{"location":"autodoc_src_backend_app_watcher_py_2025-05-31T16-05-11/","title":"autodoc src backend app watcher py 2025 05 31T16 05 11","text":""},{"location":"autodoc_src_backend_app_watcher_py_2025-05-31T16-05-11/#document-watcher-module","title":"Document Watcher Module","text":"<p>A Python module for monitoring a folder for new documents using both real-time file system events and polling mechanisms. The module provides priority-based processing where new documents are given higher priority over existing ones.</p>"},{"location":"autodoc_src_backend_app_watcher_py_2025-05-31T16-05-11/#features","title":"Features","text":"<ul> <li>Dual Monitoring Mechanisms: Combines watchdog file system events with polling for reliable file detection</li> <li>Priority-based Processing: New/modified files are processed before existing files</li> <li>Asynchronous Processing: Non-blocking document processing using asyncio</li> <li>Multiple File Format Support: Supports PDF, Word documents, and various image formats</li> <li>Robust Error Handling: Comprehensive logging and error recovery</li> </ul>"},{"location":"autodoc_src_backend_app_watcher_py_2025-05-31T16-05-11/#classes","title":"Classes","text":""},{"location":"autodoc_src_backend_app_watcher_py_2025-05-31T16-05-11/#processingtask","title":"ProcessingTask","text":"<p>A data class representing a document processing task with priority information.</p> <pre><code>@dataclass\nclass ProcessingTask:\n    priority: int          # Lower number = higher priority\n    file_path: str         # Path to the file\n    task_type: str         # 'new', 'existing', 'modified'\n    timestamp: float       # Task creation timestamp\n</code></pre> <p>Priority Levels: - <code>1</code>: New or modified files (highest priority) - <code>2</code>: Modified files detected via polling - <code>10</code>: Existing files (lowest priority)</p> <p>Methods: - <code>__lt__(other)</code>: Comparison method for priority queue ordering</p>"},{"location":"autodoc_src_backend_app_watcher_py_2025-05-31T16-05-11/#documenteventhandler","title":"DocumentEventHandler","text":"<p>File system event handler that responds to document creation, modification, and movement events.</p> <pre><code>class DocumentEventHandler(FileSystemEventHandler):\n    def __init__(self, callback: Callable[[str], Awaitable[None]], task_queue: asyncio.Queue)\n</code></pre> <p>Parameters: - <code>callback</code>: Async function to process detected documents - <code>task_queue</code>: Queue for managing processing tasks</p> <p>Methods:</p>"},{"location":"autodoc_src_backend_app_watcher_py_2025-05-31T16-05-11/#_handle_eventpath-str-task_type-str-new","title":"<code>_handle_event(path: str, task_type: str = 'new')</code>","text":"<p>Internal method that processes file system events for supported document types.</p>"},{"location":"autodoc_src_backend_app_watcher_py_2025-05-31T16-05-11/#_is_documentfile_path-str-bool","title":"<code>_is_document(file_path: str) -&gt; bool</code>","text":"<p>Checks if a file has a supported document extension.</p> <p>Supported Extensions: - Documents: <code>.pdf</code>, <code>.docx</code>, <code>.doc</code> - Images: <code>.jpg</code>, <code>.jpeg</code>, <code>.png</code>, <code>.tiff</code>, <code>.tif</code></p>"},{"location":"autodoc_src_backend_app_watcher_py_2025-05-31T16-05-11/#event-handlers","title":"Event Handlers","text":"<ul> <li><code>on_created(event)</code>: Handles file creation events</li> <li><code>on_moved(event)</code>: Handles file move/rename events  </li> <li><code>on_modified(event)</code>: Handles file modification events</li> </ul>"},{"location":"autodoc_src_backend_app_watcher_py_2025-05-31T16-05-11/#folderwatcher","title":"FolderWatcher","text":"<p>Main class that orchestrates document monitoring using multiple detection mechanisms.</p> <pre><code>class FolderWatcher:\n    def __init__(self, folder_path: str, callback: Callable[[str], Awaitable[None]], poll_interval: int = 30)\n</code></pre> <p>Parameters: - <code>folder_path</code>: Directory path to monitor - <code>callback</code>: Async function to process detected documents - <code>poll_interval</code>: Polling interval in seconds (default: 30)</p> <p>Attributes: - <code>known_files</code>: Dictionary tracking file modification times - <code>processed_files</code>: Set of files that have been processed - <code>task_queue</code>: Priority queue for processing tasks - <code>processing_active</code>: Flag indicating if processing is active</p>"},{"location":"autodoc_src_backend_app_watcher_py_2025-05-31T16-05-11/#methods","title":"Methods","text":""},{"location":"autodoc_src_backend_app_watcher_py_2025-05-31T16-05-11/#start_watching-none","title":"<code>start_watching() -&gt; None</code>","text":"<p>Starts the document monitoring system with all mechanisms:</p> <ol> <li>Watchdog Observer: Real-time file system event monitoring</li> <li>Task Processor: Handles priority-based task execution</li> <li>Polling Loop: Fallback mechanism for missed events</li> <li>Existing Files Processing: Background processing of pre-existing files</li> </ol> <p>Example: <pre><code>async def process_document(file_path: str):\n    print(f\"Processing: {file_path}\")\n\nwatcher = FolderWatcher(\"/path/to/documents\", process_document)\nawait watcher.start_watching()\n</code></pre></p>"},{"location":"autodoc_src_backend_app_watcher_py_2025-05-31T16-05-11/#_process_task_queue-none","title":"<code>_process_task_queue() -&gt; None</code>","text":"<p>Internal coroutine that processes tasks from the priority queue sequentially.</p>"},{"location":"autodoc_src_backend_app_watcher_py_2025-05-31T16-05-11/#_polling_loop-none","title":"<code>_polling_loop() -&gt; None</code>","text":"<p>Internal coroutine that periodically scans the folder for new or modified files.</p>"},{"location":"autodoc_src_backend_app_watcher_py_2025-05-31T16-05-11/#_check_for_new_files-none","title":"<code>_check_for_new_files() -&gt; None</code>","text":"<p>Scans the directory and identifies new or modified documents for processing.</p>"},{"location":"autodoc_src_backend_app_watcher_py_2025-05-31T16-05-11/#_queue_existing_files-none","title":"<code>_queue_existing_files() -&gt; None</code>","text":"<p>Queues all existing documents in the folder with low priority for background processing.</p>"},{"location":"autodoc_src_backend_app_watcher_py_2025-05-31T16-05-11/#_is_documentfile_path-str-bool_1","title":"<code>_is_document(file_path: str) -&gt; bool</code>","text":"<p>Utility method to check if a file is a supported document type.</p>"},{"location":"autodoc_src_backend_app_watcher_py_2025-05-31T16-05-11/#usage-example","title":"Usage Example","text":"<pre><code>import asyncio\nimport logging\nfrom document_watcher import FolderWatcher\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\n\nasync def process_document(file_path: str):\n    \"\"\"Your document processing logic here\"\"\"\n    print(f\"Processing document: {file_path}\")\n    # Add your processing logic (OCR, indexing, etc.)\n    await asyncio.sleep(1)  # Simulate processing time\n\nasync def main():\n    # Create watcher instance\n    watcher = FolderWatcher(\n        folder_path=\"/path/to/watch\",\n        callback=process_document,\n        poll_interval=30  # Check every 30 seconds\n    )\n\n    # Start monitoring (runs indefinitely)\n    await watcher.start_watching()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"autodoc_src_backend_app_watcher_py_2025-05-31T16-05-11/#error-handling","title":"Error Handling","text":"<p>The module includes comprehensive error handling:</p> <ul> <li>File Access Errors: Handles permission issues and file locks</li> <li>Processing Errors: Continues operation even if individual files fail to process</li> <li>Cancellation: Graceful shutdown when tasks are cancelled</li> <li>Logging: Detailed logging for debugging and monitoring</li> </ul>"},{"location":"autodoc_src_backend_app_watcher_py_2025-05-31T16-05-11/#dependencies","title":"Dependencies","text":"<ul> <li><code>watchdog</code>: File system event monitoring</li> <li><code>asyncio</code>: Asynchronous programming support</li> <li><code>logging</code>: Application logging</li> <li><code>typing</code>: Type hints support</li> <li><code>dataclasses</code>: Data class support</li> </ul>"},{"location":"autodoc_src_backend_app_watcher_py_2025-05-31T16-05-11/#installation","title":"Installation","text":"<pre><code>pip install watchdog\n</code></pre> <p>The module uses only standard library modules except for <code>watchdog</code>.</p>"},{"location":"autodoc_src_backend_app_watcher_py_2025-05-31T16-05-11/#notes","title":"Notes","text":"<ul> <li>The folder is created automatically if it doesn't exist</li> <li>Files are processed only once to avoid duplicate processing</li> <li>New documents always have priority over existing ones</li> <li>The system is designed to be fault-tolerant with multiple detection mechanisms</li> </ul>"},{"location":"autodoc_src_backend_app_watcher_py_2025-06-01T06-25-25/","title":"autodoc src backend app watcher py 2025 06 01T06 25 25","text":""},{"location":"autodoc_src_backend_app_watcher_py_2025-06-01T06-25-25/#document-watcher-module","title":"Document Watcher Module","text":"<p>A comprehensive document monitoring system that watches a folder for new documents using multiple detection mechanisms including file system events and polling.</p>"},{"location":"autodoc_src_backend_app_watcher_py_2025-06-01T06-25-25/#overview","title":"Overview","text":"<p>The Document Watcher module provides robust file monitoring capabilities with priority-based processing, ensuring new documents are processed before existing ones. It combines real-time file system event monitoring with polling fallback mechanisms for maximum reliability.</p>"},{"location":"autodoc_src_backend_app_watcher_py_2025-06-01T06-25-25/#classes","title":"Classes","text":""},{"location":"autodoc_src_backend_app_watcher_py_2025-06-01T06-25-25/#processingtask","title":"ProcessingTask","text":"<p>A data class representing a document processing task with priority handling.</p>"},{"location":"autodoc_src_backend_app_watcher_py_2025-06-01T06-25-25/#attributes","title":"Attributes","text":"<ul> <li><code>priority</code> (int): Task priority (lower number = higher priority)</li> <li><code>file_path</code> (str): Path to the document file</li> <li><code>task_type</code> (str): Type of task ('new', 'existing', 'modified')</li> <li><code>timestamp</code> (float): Task creation timestamp (defaults to current time)</li> </ul>"},{"location":"autodoc_src_backend_app_watcher_py_2025-06-01T06-25-25/#methods","title":"Methods","text":""},{"location":"autodoc_src_backend_app_watcher_py_2025-06-01T06-25-25/#__lt__self-other-bool","title":"<code>__lt__(self, other) -&gt; bool</code>","text":"<p>Comparison method for priority queue ordering. Tasks are ordered by priority first, then by timestamp (newer files first for same priority).</p>"},{"location":"autodoc_src_backend_app_watcher_py_2025-06-01T06-25-25/#documenteventhandler","title":"DocumentEventHandler","text":"<p>File system event handler that monitors document-related file events.</p>"},{"location":"autodoc_src_backend_app_watcher_py_2025-06-01T06-25-25/#constructor","title":"Constructor","text":"<pre><code>DocumentEventHandler(callback: Callable[[str], Awaitable[None]], task_queue: asyncio.Queue)\n</code></pre> <p>Parameters: - <code>callback</code>: Async function to call when a document event occurs - <code>task_queue</code>: Queue for managing processing tasks</p>"},{"location":"autodoc_src_backend_app_watcher_py_2025-06-01T06-25-25/#methods_1","title":"Methods","text":""},{"location":"autodoc_src_backend_app_watcher_py_2025-06-01T06-25-25/#on_createdself-event-filecreatedevent","title":"<code>on_created(self, event: FileCreatedEvent)</code>","text":"<p>Handles file creation events. Adds new documents to the processing queue with priority 1.</p>"},{"location":"autodoc_src_backend_app_watcher_py_2025-06-01T06-25-25/#on_movedself-event-filemovedevent","title":"<code>on_moved(self, event: FileMovedEvent)</code>","text":"<p>Handles file move events. Treats moved files as new documents for processing.</p>"},{"location":"autodoc_src_backend_app_watcher_py_2025-06-01T06-25-25/#on_modifiedself-event-filemodifiedevent","title":"<code>on_modified(self, event: FileModifiedEvent)</code>","text":"<p>Handles file modification events. Adds modified documents to the processing queue.</p>"},{"location":"autodoc_src_backend_app_watcher_py_2025-06-01T06-25-25/#_handle_eventself-path-str-task_type-str-new","title":"<code>_handle_event(self, path: str, task_type: str = 'new')</code>","text":"<p>Internal method that processes file system events and queues supported documents for processing.</p> <p>Parameters: - <code>path</code>: File path that triggered the event - <code>task_type</code>: Type of event ('new', 'existing', 'modified')</p>"},{"location":"autodoc_src_backend_app_watcher_py_2025-06-01T06-25-25/#_is_documentself-file_path-str-bool","title":"<code>_is_document(self, file_path: str) -&gt; bool</code>","text":"<p>Checks if a file is a supported document type based on file extension.</p> <p>Supported Extensions: - PDF: <code>.pdf</code> - Word: <code>.docx</code>, <code>.doc</code> - Images: <code>.jpg</code>, <code>.jpeg</code>, <code>.png</code>, <code>.tiff</code>, <code>.tif</code></p> <p>Returns: <code>True</code> if the file is a supported document type</p>"},{"location":"autodoc_src_backend_app_watcher_py_2025-06-01T06-25-25/#folderwatcher","title":"FolderWatcher","text":"<p>Main class for monitoring a folder with multiple detection mechanisms.</p>"},{"location":"autodoc_src_backend_app_watcher_py_2025-06-01T06-25-25/#constructor_1","title":"Constructor","text":"<pre><code>FolderWatcher(folder_path: str, callback: Callable[[str], Awaitable[None]], poll_interval: int = 30)\n</code></pre> <p>Parameters: - <code>folder_path</code>: Path to the folder to monitor - <code>callback</code>: Async function to call for each detected document - <code>poll_interval</code>: Polling interval in seconds (default: 30)</p>"},{"location":"autodoc_src_backend_app_watcher_py_2025-06-01T06-25-25/#attributes_1","title":"Attributes","text":"<ul> <li><code>folder_path</code> (str): Monitored folder path</li> <li><code>callback</code>: Document processing callback function</li> <li><code>observer</code>: Watchdog file system observer</li> <li><code>poll_interval</code> (int): Polling frequency in seconds</li> <li><code>known_files</code> (Dict[str, float]): Tracked files with modification times</li> <li><code>processed_files</code> (Set[str]): Set of already processed files</li> <li><code>task_queue</code> (asyncio.Queue): Priority task queue</li> <li><code>processing_active</code> (bool): Flag indicating active processing</li> </ul>"},{"location":"autodoc_src_backend_app_watcher_py_2025-06-01T06-25-25/#methods_2","title":"Methods","text":""},{"location":"autodoc_src_backend_app_watcher_py_2025-06-01T06-25-25/#async-start_watchingself","title":"<code>async start_watching(self)</code>","text":"<p>Starts the complete monitoring system including: - File system event monitoring (watchdog) - Polling fallback mechanism - Priority-based task processing - Existing file queue processing</p> <p>Creates the target folder if it doesn't exist.</p>"},{"location":"autodoc_src_backend_app_watcher_py_2025-06-01T06-25-25/#async-_process_task_queueself","title":"<code>async _process_task_queue(self)</code>","text":"<p>Internal task processor that handles the priority queue. Processes tasks in priority order: 1. Priority 1: New/modified files (highest) 2. Priority 10: Existing files (lowest)</p>"},{"location":"autodoc_src_backend_app_watcher_py_2025-06-01T06-25-25/#async-_polling_loopself","title":"<code>async _polling_loop(self)</code>","text":"<p>Fallback polling mechanism that periodically scans the folder for new or modified files when file system events may be missed.</p>"},{"location":"autodoc_src_backend_app_watcher_py_2025-06-01T06-25-25/#async-_check_for_new_filesself","title":"<code>async _check_for_new_files(self)</code>","text":"<p>Scans the monitored folder for new or modified files and adds them to the processing queue with appropriate priorities.</p>"},{"location":"autodoc_src_backend_app_watcher_py_2025-06-01T06-25-25/#async-_queue_existing_filesself","title":"<code>async _queue_existing_files(self)</code>","text":"<p>Processes existing files in the folder at startup, adding them to the queue with low priority (10) to ensure new files are processed first.</p>"},{"location":"autodoc_src_backend_app_watcher_py_2025-06-01T06-25-25/#_is_documentself-file_path-str-bool_1","title":"<code>_is_document(self, file_path: str) -&gt; bool</code>","text":"<p>Checks if a file is a supported document type. Same implementation as <code>DocumentEventHandler._is_document()</code>.</p>"},{"location":"autodoc_src_backend_app_watcher_py_2025-06-01T06-25-25/#usage-example","title":"Usage Example","text":"<pre><code>import asyncio\nfrom document_watcher import FolderWatcher\n\nasync def process_document(file_path: str):\n    \"\"\"Process a detected document.\"\"\"\n    print(f\"Processing document: {file_path}\")\n    # Add your document processing logic here\n    await asyncio.sleep(1)  # Simulate processing time\n\nasync def main():\n    # Create watcher instance\n    watcher = FolderWatcher(\n        folder_path=\"/path/to/documents\",\n        callback=process_document,\n        poll_interval=30\n    )\n\n    # Start monitoring\n    await watcher.start_watching()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"autodoc_src_backend_app_watcher_py_2025-06-01T06-25-25/#features","title":"Features","text":""},{"location":"autodoc_src_backend_app_watcher_py_2025-06-01T06-25-25/#multi-layer-detection","title":"Multi-Layer Detection","text":"<ul> <li>Real-time Events: Uses watchdog for immediate file system event detection</li> <li>Polling Fallback: Periodic scanning ensures no files are missed</li> <li>Existing File Processing: Handles documents already present in the folder</li> </ul>"},{"location":"autodoc_src_backend_app_watcher_py_2025-06-01T06-25-25/#priority-processing","title":"Priority Processing","text":"<ul> <li>Priority 1: New and modified files (immediate processing)</li> <li>Priority 10: Existing files (background processing)</li> <li>Timestamp Ordering: Newer files processed first within same priority</li> </ul>"},{"location":"autodoc_src_backend_app_watcher_py_2025-06-01T06-25-25/#supported-file-types","title":"Supported File Types","text":"<ul> <li>PDF documents (<code>.pdf</code>)</li> <li>Microsoft Word documents (<code>.docx</code>, <code>.doc</code>)</li> <li>Image files (<code>.jpg</code>, <code>.jpeg</code>, <code>.png</code>, <code>.tiff</code>, <code>.tif</code>)</li> </ul>"},{"location":"autodoc_src_backend_app_watcher_py_2025-06-01T06-25-25/#error-handling","title":"Error Handling","text":"<ul> <li>Graceful handling of file system errors</li> <li>Automatic retry mechanisms</li> <li>Comprehensive logging for debugging</li> </ul>"},{"location":"autodoc_src_backend_app_watcher_py_2025-06-01T06-25-25/#asyncawait-support","title":"Async/Await Support","text":"<ul> <li>Fully asynchronous operation</li> <li>Non-blocking file processing</li> <li>Concurrent task handling</li> </ul>"},{"location":"autodoc_src_backend_app_watcher_py_2025-06-01T06-25-25/#dependencies","title":"Dependencies","text":"<ul> <li><code>watchdog</code>: File</li> </ul>"},{"location":"autodoc_src_backend_check_documents_py_2025-05-31T15-53-58/","title":"autodoc src backend check documents py 2025 05 31T15 53 58","text":""},{"location":"autodoc_src_backend_check_documents_py_2025-05-31T15-53-58/#document-recipient-assignment-checker","title":"Document Recipient Assignment Checker","text":""},{"location":"autodoc_src_backend_check_documents_py_2025-05-31T15-53-58/#overview","title":"Overview","text":"<p>A diagnostic script that analyzes document recipient assignments in the database and identifies potential issues with document processing and tenant assignment.</p>"},{"location":"autodoc_src_backend_check_documents_py_2025-05-31T15-53-58/#purpose","title":"Purpose","text":"<p>This script helps administrators: - Identify documents with missing or invalid recipient assignments - Analyze document assignment statistics - Review available tenant entities - Check LLM configuration status - Validate the document processing pipeline</p>"},{"location":"autodoc_src_backend_check_documents_py_2025-05-31T15-53-58/#requirements","title":"Requirements","text":""},{"location":"autodoc_src_backend_check_documents_py_2025-05-31T15-53-58/#dependencies","title":"Dependencies","text":"<ul> <li>Python 3.7+</li> <li>SQLAlchemy (async support)</li> <li>aiosqlite</li> <li>Custom application models (<code>Document</code>, <code>Entity</code>, <code>LLMConfig</code>)</li> </ul>"},{"location":"autodoc_src_backend_check_documents_py_2025-05-31T15-53-58/#environment","title":"Environment","text":"<ul> <li>Database file: <code>src/backend/documents.db</code></li> <li>Application path: <code>/app</code></li> </ul>"},{"location":"autodoc_src_backend_check_documents_py_2025-05-31T15-53-58/#usage","title":"Usage","text":"<pre><code>python3 document_checker.py\n</code></pre> <p>The script runs asynchronously and provides a comprehensive report of document recipient assignments.</p>"},{"location":"autodoc_src_backend_check_documents_py_2025-05-31T15-53-58/#output-sections","title":"Output Sections","text":""},{"location":"autodoc_src_backend_check_documents_py_2025-05-31T15-53-58/#1-problematic-documents","title":"1. Problematic Documents","text":"<p>Lists up to 15 documents with recipient assignment issues: - <code>None</code> or empty recipients - Generic placeholders (\"Your Company\", \"Unknown\")</p> <p>Format: <pre><code>ID: 123 | Document Title                        | Recipient: 'Unknown'    | Sender: Company ABC\n</code></pre></p>"},{"location":"autodoc_src_backend_check_documents_py_2025-05-31T15-53-58/#2-document-statistics","title":"2. Document Statistics","text":"<p>Provides numerical analysis: - Total document count - Number of problematic assignments - Properly assigned documents - Assignment success rate percentage</p>"},{"location":"autodoc_src_backend_check_documents_py_2025-05-31T15-53-58/#3-available-tenants","title":"3. Available Tenants","text":"<p>Lists all entities that could serve as document recipients: - Entity ID, alias, type, and full name - Helps identify valid assignment targets</p>"},{"location":"autodoc_src_backend_check_documents_py_2025-05-31T15-53-58/#4-llm-configuration","title":"4. LLM Configuration","text":"<p>Shows current AI processing settings: - Enable/disable status - Provider information - Auto-tagging and auto-enrichment flags</p>"},{"location":"autodoc_src_backend_check_documents_py_2025-05-31T15-53-58/#5-properly-assigned-examples","title":"5. Properly Assigned Examples","text":"<p>Displays up to 5 documents with correct recipient assignments as positive examples.</p>"},{"location":"autodoc_src_backend_check_documents_py_2025-05-31T15-53-58/#database-schema-dependencies","title":"Database Schema Dependencies","text":""},{"location":"autodoc_src_backend_check_documents_py_2025-05-31T15-53-58/#document-model","title":"Document Model","text":"<pre><code>- id: Primary key\n- title: Document title\n- recipient: Target entity (focus of analysis)\n- sender: Source entity\n</code></pre>"},{"location":"autodoc_src_backend_check_documents_py_2025-05-31T15-53-58/#entity-model","title":"Entity Model","text":"<pre><code>- id: Primary key\n- name: Full entity name\n- alias: Short identifier\n- type: Entity classification\n</code></pre>"},{"location":"autodoc_src_backend_check_documents_py_2025-05-31T15-53-58/#llmconfig-model","title":"LLMConfig Model","text":"<pre><code>- enabled: Boolean flag\n- provider: AI service provider\n- auto_tagging: Automatic tag assignment\n- auto_enrichment: Automatic data enhancement\n</code></pre>"},{"location":"autodoc_src_backend_check_documents_py_2025-05-31T15-53-58/#error-handling","title":"Error Handling","text":"<ul> <li>Database Connection: Uses async SQLAlchemy with automatic session management</li> <li>Missing LLM Config: Gracefully handles absent configuration records</li> <li>Empty Result Sets: Provides appropriate success messages for clean data</li> </ul>"},{"location":"autodoc_src_backend_check_documents_py_2025-05-31T15-53-58/#configuration","title":"Configuration","text":""},{"location":"autodoc_src_backend_check_documents_py_2025-05-31T15-53-58/#database-url","title":"Database URL","text":"<pre><code>DATABASE_URL = \"sqlite+aiosqlite:///src/backend/documents.db\"\n</code></pre>"},{"location":"autodoc_src_backend_check_documents_py_2025-05-31T15-53-58/#query-limits","title":"Query Limits","text":"<ul> <li>Problematic documents: 15 records</li> <li>Good examples: 5 records</li> <li>No limit on statistics or entity queries</li> </ul>"},{"location":"autodoc_src_backend_check_documents_py_2025-05-31T15-53-58/#troubleshooting","title":"Troubleshooting","text":""},{"location":"autodoc_src_backend_check_documents_py_2025-05-31T15-53-58/#common-issues","title":"Common Issues","text":"<ol> <li>Database Not Found</li> <li>Verify <code>src/backend/documents.db</code> exists</li> <li> <p>Check file permissions</p> </li> <li> <p>Import Errors</p> </li> <li>Ensure <code>/app</code> path contains required models</li> <li> <p>Verify SQLAlchemy async dependencies installed</p> </li> <li> <p>No Output</p> </li> <li>Check database contains document records</li> <li>Verify async event loop compatibility</li> </ol>"},{"location":"autodoc_src_backend_check_documents_py_2025-05-31T15-53-58/#exit-codes","title":"Exit Codes","text":"<ul> <li><code>0</code>: Successful execution</li> <li>Non-zero: Runtime errors (database connection, import failures)</li> </ul>"},{"location":"autodoc_src_backend_check_documents_py_2025-05-31T15-53-58/#performance-notes","title":"Performance Notes","text":"<ul> <li>Uses async database operations for efficiency</li> <li>Limits result sets to prevent memory issues with large datasets</li> <li>Single session context for all operations</li> <li>Echo disabled for cleaner output</li> </ul>"},{"location":"autodoc_src_backend_check_documents_py_2025-06-01T06-14-23/","title":"autodoc src backend check documents py 2025 06 01T06 14 23","text":""},{"location":"autodoc_src_backend_check_documents_py_2025-06-01T06-14-23/#document-recipients-checker","title":"Document Recipients Checker","text":"<p>A Python script for analyzing and validating document recipient assignments in a database, helping identify and troubleshoot assignment issues.</p>"},{"location":"autodoc_src_backend_check_documents_py_2025-06-01T06-14-23/#overview","title":"Overview","text":"<p>This script provides comprehensive analysis of document recipient assignments, identifying problematic entries and providing statistics on assignment quality. It's designed to help maintain data quality in document management systems.</p>"},{"location":"autodoc_src_backend_check_documents_py_2025-06-01T06-14-23/#features","title":"Features","text":"<ul> <li>Problematic Document Detection: Identifies documents with missing, empty, or placeholder recipient values</li> <li>Statistical Analysis: Provides comprehensive statistics on assignment rates and data quality</li> <li>Entity Verification: Lists available tenant entities for reference</li> <li>LLM Configuration Check: Validates machine learning configuration settings</li> <li>Sample Data Display: Shows examples of both problematic and properly assigned documents</li> </ul>"},{"location":"autodoc_src_backend_check_documents_py_2025-06-01T06-14-23/#requirements","title":"Requirements","text":"<ul> <li>Python 3.7+</li> <li>SQLAlchemy with async support</li> <li>SQLite database with aiosqlite driver</li> </ul>"},{"location":"autodoc_src_backend_check_documents_py_2025-06-01T06-14-23/#dependencies","title":"Dependencies","text":"<pre><code>sqlalchemy[asyncio]\naiosqlite\n</code></pre>"},{"location":"autodoc_src_backend_check_documents_py_2025-06-01T06-14-23/#database-schema","title":"Database Schema","text":"<p>The script expects the following database models:</p> <ul> <li>Document: Contains <code>id</code>, <code>title</code>, <code>recipient</code>, <code>sender</code> fields</li> <li>Entity: Contains <code>id</code>, <code>name</code>, <code>alias</code>, <code>type</code> fields  </li> <li>LLMConfig: Contains configuration for machine learning features</li> </ul>"},{"location":"autodoc_src_backend_check_documents_py_2025-06-01T06-14-23/#usage","title":"Usage","text":""},{"location":"autodoc_src_backend_check_documents_py_2025-06-01T06-14-23/#basic-execution","title":"Basic Execution","text":"<pre><code>python3 document_recipients_checker.py\n</code></pre>"},{"location":"autodoc_src_backend_check_documents_py_2025-06-01T06-14-23/#expected-output","title":"Expected Output","text":"<p>The script provides structured output with emoji indicators:</p> <pre><code>\ud83d\udd0d Checking Document Recipient Assignments\n============================================================\n\u274c Documents with problematic recipients:\n  ID: 123 | Example Document Title               | Recipient: None     | Sender: Company A\n\n\ud83d\udcca Document Statistics:\n  Total documents: 1000\n  Problematic recipients: 150\n  Properly assigned: 850\n  Assignment rate: 85.0%\n\n\ud83d\udc65 Available Tenants (5):\n  ID:   1 | tenant_alias        | Type: company    | Name: Example Company\n\n\ud83e\udde0 LLM Configuration:\n  Enabled: True\n  Provider: openai\n  Auto-tagging: True\n  Auto-enrichment: False\n\n\u2705 Examples of properly assigned documents:\n  ID: 456 | Another Document                     | Recipient: 'Client Corp' | Sender: Vendor Inc\n</code></pre>"},{"location":"autodoc_src_backend_check_documents_py_2025-06-01T06-14-23/#configuration","title":"Configuration","text":""},{"location":"autodoc_src_backend_check_documents_py_2025-06-01T06-14-23/#database-connection","title":"Database Connection","text":"<p>The script automatically configures the database connection:</p> <pre><code>os.environ[\"DATABASE_URL\"] = f\"sqlite+aiosqlite:///src/backend/documents.db\"\n</code></pre>"},{"location":"autodoc_src_backend_check_documents_py_2025-06-01T06-14-23/#path-configuration","title":"Path Configuration","text":"<p>The script adds necessary paths to the Python path:</p> <pre><code>sys.path.append('/app')\nsys.path.append(os.path.dirname(os.path.abspath(__file__)))\n</code></pre>"},{"location":"autodoc_src_backend_check_documents_py_2025-06-01T06-14-23/#functions","title":"Functions","text":""},{"location":"autodoc_src_backend_check_documents_py_2025-06-01T06-14-23/#check_documents","title":"<code>check_documents()</code>","text":"<p>Purpose: Main analysis function that performs comprehensive document recipient validation.</p> <p>Functionality: 1. Problematic Document Detection: Queries documents with:    - <code>NULL</code> recipient values    - Empty string recipients    - Placeholder values ('Your Company', 'Unknown')</p> <ol> <li>Statistical Analysis: Calculates:</li> <li>Total document count</li> <li>Problematic assignment count</li> <li> <p>Assignment success rate</p> </li> <li> <p>Entity Verification: Lists all available tenant entities with their details</p> </li> <li> <p>Configuration Validation: Checks LLM configuration status and settings</p> </li> <li> <p>Quality Examples: Displays samples of properly assigned documents</p> </li> </ol> <p>Parameters: None</p> <p>Returns: None (outputs results to console)</p> <p>Error Handling: Gracefully handles LLM configuration errors and missing data</p>"},{"location":"autodoc_src_backend_check_documents_py_2025-06-01T06-14-23/#data-quality-checks","title":"Data Quality Checks","text":""},{"location":"autodoc_src_backend_check_documents_py_2025-06-01T06-14-23/#problematic-recipients-identified","title":"Problematic Recipients Identified","text":"<ul> <li><code>NULL</code> values</li> <li>Empty strings (<code>''</code>)</li> <li>Generic placeholders (<code>'Your Company'</code>)</li> <li>Unknown values (<code>'Unknown'</code>)</li> </ul>"},{"location":"autodoc_src_backend_check_documents_py_2025-06-01T06-14-23/#quality-metrics","title":"Quality Metrics","text":"<ul> <li>Assignment Rate: Percentage of documents with valid recipients</li> <li>Total Coverage: Overall document processing statistics</li> <li>Entity Availability: Verification that target entities exist</li> </ul>"},{"location":"autodoc_src_backend_check_documents_py_2025-06-01T06-14-23/#output-interpretation","title":"Output Interpretation","text":""},{"location":"autodoc_src_backend_check_documents_py_2025-06-01T06-14-23/#status-indicators","title":"Status Indicators","text":"<ul> <li>\u2705 Green Check: Successful validation or good examples</li> <li>\u274c Red X: Problems detected</li> <li>\ud83d\udd0d Magnifying Glass: Analysis in progress</li> <li>\ud83d\udcca Chart: Statistical information  </li> <li>\ud83d\udc65 People: Entity/tenant information</li> <li>\ud83e\udde0 Brain: AI/ML configuration status</li> </ul>"},{"location":"autodoc_src_backend_check_documents_py_2025-06-01T06-14-23/#statistical-thresholds","title":"Statistical Thresholds","text":"<p>Monitor assignment rates to maintain data quality: - 90%+: Excellent assignment rate - 80-90%: Good assignment rate - 70-80%: Needs attention - &lt;70%: Requires immediate action</p>"},{"location":"autodoc_src_backend_check_documents_py_2025-06-01T06-14-23/#troubleshooting","title":"Troubleshooting","text":""},{"location":"autodoc_src_backend_check_documents_py_2025-06-01T06-14-23/#common-issues","title":"Common Issues","text":"<ol> <li>Database Connection Errors</li> <li>Verify database file path exists</li> <li>Check file permissions</li> <li> <p>Ensure SQLite database is not corrupted</p> </li> <li> <p>Missing Models</p> </li> <li>Verify <code>app.models</code> imports correctly</li> <li> <p>Check database schema matches model definitions</p> </li> <li> <p>Path Resolution Issues</p> </li> <li>Adjust <code>sys.path.append()</code> statements for your environment</li> <li>Verify script execution location</li> </ol>"},{"location":"autodoc_src_backend_check_documents_py_2025-06-01T06-14-23/#error-messages","title":"Error Messages","text":"<ul> <li>\"LLM Configuration: Error loading\": Database schema mismatch or missing LLM config table</li> <li>\"No documents with problematic recipients found\": All documents properly assigned (ideal state)</li> </ul>"},{"location":"autodoc_src_backend_check_documents_py_2025-06-01T06-14-23/#integration","title":"Integration","text":"<p>This script can be integrated into:</p> <ul> <li>Data Quality Pipelines: Regular validation workflows</li> <li>CI/CD Processes: Pre-deployment data verification</li> <li>Monitoring Systems: Automated quality checking</li> <li>Manual Audits: On-demand data analysis</li> </ul>"},{"location":"autodoc_src_backend_check_documents_py_2025-06-01T06-14-23/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Query Limits: Results limited to prevent overwhelming output (15 problematic, 5 good examples)</li> <li>Async Operations: Uses async/await for efficient database operations</li> <li>Memory Efficient: Processes results in batches rather than loading all data</li> </ul>"},{"location":"autodoc_src_backend_check_processing_py_2025-05-31T15-55-28/","title":"autodoc src backend check processing py 2025 05 31T15 55 28","text":""},{"location":"autodoc_src_backend_check_processing_py_2025-05-31T15-55-28/#document-processing-status-checker","title":"Document Processing Status Checker","text":"<p>A diagnostic utility script for monitoring document processing status in the application database.</p>"},{"location":"autodoc_src_backend_check_processing_py_2025-05-31T15-55-28/#overview","title":"Overview","text":"<p>This script provides a command-line interface to check the current status of document processing operations. It connects to the application database and displays information about documents currently being processed and recently created documents.</p>"},{"location":"autodoc_src_backend_check_processing_py_2025-05-31T15-55-28/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.7+ (required for asyncio support)</li> <li>SQLAlchemy with async support</li> <li>Access to the application database</li> <li>Application models and database configuration</li> </ul>"},{"location":"autodoc_src_backend_check_processing_py_2025-05-31T15-55-28/#dependencies","title":"Dependencies","text":"<pre><code>import asyncio\nimport sys\nimport os\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy import select, text\nfrom app.database import engine\nfrom app.models import Document\n</code></pre>"},{"location":"autodoc_src_backend_check_processing_py_2025-05-31T15-55-28/#usage","title":"Usage","text":"<p>Run the script directly from the command line:</p> <pre><code>python check_processing.py\n</code></pre>"},{"location":"autodoc_src_backend_check_processing_py_2025-05-31T15-55-28/#functions","title":"Functions","text":""},{"location":"autodoc_src_backend_check_processing_py_2025-05-31T15-55-28/#check_processing","title":"<code>check_processing()</code>","text":"<p>Description: Asynchronously queries the database to retrieve and display document processing information.</p> <p>Parameters: None</p> <p>Returns: None (prints output to console)</p> <p>Behavior: 1. Establishes an async database session 2. Queries for documents with 'processing' status 3. Displays count and details of processing documents 4. Retrieves the 5 most recently created documents 5. Displays recent document information with metadata</p>"},{"location":"autodoc_src_backend_check_processing_py_2025-05-31T15-55-28/#output-format","title":"Output Format","text":"<p>The script produces two sections of output:</p>"},{"location":"autodoc_src_backend_check_processing_py_2025-05-31T15-55-28/#processing-documents-section","title":"Processing Documents Section","text":"<pre><code>Documents with processing status: &lt;count&gt;\n  - &lt;document_title&gt; (ID: &lt;document_id&gt;)\n  - ...\n</code></pre>"},{"location":"autodoc_src_backend_check_processing_py_2025-05-31T15-55-28/#recent-documents-section","title":"Recent Documents Section","text":"<pre><code>Recent documents:\n  - &lt;document_title&gt; (ID: &lt;document_id&gt;, Status: &lt;status&gt;, Created: &lt;timestamp&gt;)\n  - ...\n</code></pre>"},{"location":"autodoc_src_backend_check_processing_py_2025-05-31T15-55-28/#database-queries","title":"Database Queries","text":"<p>The script executes two main database operations:</p> <ol> <li> <p>Processing Status Query: Uses SQLAlchemy ORM to filter documents by status    <pre><code>SELECT * FROM documents WHERE status = 'processing'\n</code></pre></p> </li> <li> <p>Recent Documents Query: Uses raw SQL to get recent documents with metadata    <pre><code>SELECT id, title, status, created_at FROM documents ORDER BY created_at DESC LIMIT 5\n</code></pre></p> </li> </ol>"},{"location":"autodoc_src_backend_check_processing_py_2025-05-31T15-55-28/#configuration","title":"Configuration","text":""},{"location":"autodoc_src_backend_check_processing_py_2025-05-31T15-55-28/#path-configuration","title":"Path Configuration","text":"<p>The script adds <code>/app</code> to the Python path to access application modules: <pre><code>sys.path.append('/app')\n</code></pre></p>"},{"location":"autodoc_src_backend_check_processing_py_2025-05-31T15-55-28/#database-connection","title":"Database Connection","text":"<p>Uses the application's configured database engine from <code>app.database.engine</code>.</p>"},{"location":"autodoc_src_backend_check_processing_py_2025-05-31T15-55-28/#error-handling","title":"Error Handling","text":"<ul> <li>Database connection errors will propagate and terminate the script</li> <li>Async session management is handled with context managers for proper cleanup</li> <li>No explicit error handling for missing documents or empty results</li> </ul>"},{"location":"autodoc_src_backend_check_processing_py_2025-05-31T15-55-28/#use-cases","title":"Use Cases","text":"<ul> <li>Development: Quick status check during development and testing</li> <li>Debugging: Identify stuck or long-running document processing operations</li> <li>Monitoring: Regular checks of recent document creation and processing flow</li> <li>Troubleshooting: Investigate document processing bottlenecks</li> </ul>"},{"location":"autodoc_src_backend_check_processing_py_2025-05-31T15-55-28/#limitations","title":"Limitations","text":"<ul> <li>Limited to 5 most recent documents</li> <li>No filtering options for date ranges or specific statuses</li> <li>Output is console-only (no logging or file output)</li> <li>Requires direct database access</li> </ul>"},{"location":"autodoc_src_backend_check_processing_py_2025-05-31T15-55-28/#example-output","title":"Example Output","text":"<pre><code>Documents with processing status: 2\n  - User Manual v2.1 (ID: 1001)\n  - API Documentation (ID: 1005)\n\nRecent documents:\n  - Installation Guide (ID: 1010, Status: completed, Created: 2024-01-15 14:30:22)\n  - API Documentation (ID: 1005, Status: processing, Created: 2024-01-15 14:25:18)\n  - User Manual v2.1 (ID: 1001, Status: processing, Created: 2024-01-15 14:20:45)\n  - Release Notes (ID: 998, Status: completed, Created: 2024-01-15 14:15:30)\n  - Quick Start Guide (ID: 995, Status: failed, Created: 2024-01-15 14:10:12)\n</code></pre>"},{"location":"autodoc_src_backend_check_processing_py_2025-06-01T06-16-03/","title":"autodoc src backend check processing py 2025 06 01T06 16 03","text":""},{"location":"autodoc_src_backend_check_processing_py_2025-06-01T06-16-03/#document-processing-status-checker","title":"Document Processing Status Checker","text":"<p>A utility script for monitoring document processing status and displaying recent document activity in the system.</p>"},{"location":"autodoc_src_backend_check_processing_py_2025-06-01T06-16-03/#overview","title":"Overview","text":"<p>This script provides administrators with a quick way to check the current state of document processing operations and view recently created documents. It connects to the application database and queries document status information asynchronously.</p>"},{"location":"autodoc_src_backend_check_processing_py_2025-06-01T06-16-03/#dependencies","title":"Dependencies","text":"<ul> <li><code>asyncio</code> - For asynchronous execution</li> <li><code>sqlalchemy</code> - Database ORM and async session management</li> <li><code>app.database</code> - Application database engine configuration</li> <li><code>app.models</code> - Document model definitions</li> </ul>"},{"location":"autodoc_src_backend_check_processing_py_2025-06-01T06-16-03/#functions","title":"Functions","text":""},{"location":"autodoc_src_backend_check_processing_py_2025-06-01T06-16-03/#check_processing","title":"<code>check_processing()</code>","text":"<p>An asynchronous function that performs two main operations:</p> <ol> <li>Processing Status Check: Queries and displays all documents currently in 'processing' status</li> <li>Recent Documents Review: Shows the 5 most recently created documents with their metadata</li> </ol>"},{"location":"autodoc_src_backend_check_processing_py_2025-06-01T06-16-03/#behavior","title":"Behavior","text":"<ul> <li>Creates an async database session using the application's configured engine</li> <li>Executes two separate queries:</li> <li>ORM query to find documents with <code>status = 'processing'</code></li> <li>Raw SQL query to retrieve the 5 most recent documents ordered by creation date</li> <li>Outputs results to console with formatted display</li> </ul>"},{"location":"autodoc_src_backend_check_processing_py_2025-06-01T06-16-03/#output-format","title":"Output Format","text":"<pre><code>Documents with processing status: X\n  - Document Title (ID: 123)\n  - Another Document (ID: 456)\n\nRecent documents:\n  - Recent Doc Title (ID: 789, Status: completed, Created: 2024-01-15 10:30:00)\n  - Previous Doc (ID: 788, Status: processing, Created: 2024-01-15 09:15:00)\n</code></pre>"},{"location":"autodoc_src_backend_check_processing_py_2025-06-01T06-16-03/#usage","title":"Usage","text":""},{"location":"autodoc_src_backend_check_processing_py_2025-06-01T06-16-03/#command-line-execution","title":"Command Line Execution","text":"<pre><code>python check_processing.py\n</code></pre>"},{"location":"autodoc_src_backend_check_processing_py_2025-06-01T06-16-03/#programmatic-usage","title":"Programmatic Usage","text":"<pre><code>import asyncio\nfrom check_processing import check_processing\n\n# Run the status check\nawait check_processing()\n\n# Or use asyncio.run() if not in an async context\nasyncio.run(check_processing())\n</code></pre>"},{"location":"autodoc_src_backend_check_processing_py_2025-06-01T06-16-03/#requirements","title":"Requirements","text":"<ul> <li>Python 3.7+ (for asyncio support)</li> <li>SQLAlchemy with async support</li> <li>Access to the application's database configuration</li> <li>Proper database connection credentials</li> </ul>"},{"location":"autodoc_src_backend_check_processing_py_2025-06-01T06-16-03/#database-schema-assumptions","title":"Database Schema Assumptions","text":"<p>The script assumes the following database structure:</p> <p>documents table: - <code>id</code> - Primary key identifier - <code>title</code> - Document title/name - <code>status</code> - Processing status (expects 'processing' as a valid value) - <code>created_at</code> - Timestamp of document creation</p>"},{"location":"autodoc_src_backend_check_processing_py_2025-06-01T06-16-03/#error-handling","title":"Error Handling","text":"<p>The script uses SQLAlchemy's async session context manager, which automatically handles: - Database connection cleanup - Transaction rollback on errors - Resource disposal</p>"},{"location":"autodoc_src_backend_check_processing_py_2025-06-01T06-16-03/#security-considerations","title":"Security Considerations","text":"<ul> <li>Ensure database credentials are properly secured</li> <li>Consider implementing query limits for large datasets</li> <li>Validate database connection permissions before deployment</li> </ul>"},{"location":"autodoc_src_backend_check_processing_py_2025-06-01T06-16-03/#maintenance-notes","title":"Maintenance Notes","text":"<ul> <li>Monitor performance with large document collections</li> <li>Consider adding pagination for processing document lists</li> <li>Raw SQL query may need adjustment if database schema changes</li> </ul>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-05-31T15-56-15/","title":"autodoc src backend create sample data py 2025 05 31T15 56 15","text":""},{"location":"autodoc_src_backend_create_sample_data_py_2025-05-31T15-56-15/#sample-data-generator-for-tenant-automation-testing","title":"Sample Data Generator for Tenant Automation Testing","text":""},{"location":"autodoc_src_backend_create_sample_data_py_2025-05-31T15-56-15/#overview","title":"Overview","text":"<p>This script creates sample data for testing tenant automation functionality in a document management system. It generates test users, entities (tenants), LLM configurations, and documents with various recipient assignment scenarios to validate automatic tenant assignment capabilities.</p>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-05-31T15-56-15/#purpose","title":"Purpose","text":"<p>The script is designed to: - Create a controlled testing environment for tenant automation features - Generate documents with problematic recipient data that require automatic assignment - Set up proper database relationships between entities and documents - Provide baseline data for testing LLM-based document processing</p>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-05-31T15-56-15/#requirements","title":"Requirements","text":""},{"location":"autodoc_src_backend_create_sample_data_py_2025-05-31T15-56-15/#dependencies","title":"Dependencies","text":"<pre><code>asyncio\nsys\nos\nhashlib\ndatetime\nsqlalchemy.ext.asyncio\npasslib.context\n</code></pre>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-05-31T15-56-15/#database-models","title":"Database Models","text":"<p>The script requires the following database models: - <code>User</code> - User account management - <code>Entity</code> - Tenant/organization entities - <code>Document</code> - Document storage and metadata - <code>LLMConfig</code> - Language model configuration</p>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-05-31T15-56-15/#database-configuration","title":"Database Configuration","text":"<ul> <li>Database: SQLite with async support (<code>aiosqlite</code>)</li> <li>File: <code>./documents.db</code></li> <li>Engine: Async SQLAlchemy engine</li> </ul>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-05-31T15-56-15/#usage","title":"Usage","text":""},{"location":"autodoc_src_backend_create_sample_data_py_2025-05-31T15-56-15/#command-line-execution","title":"Command Line Execution","text":"<pre><code>python3 create_sample_data.py\n</code></pre>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-05-31T15-56-15/#programmatic-usage","title":"Programmatic Usage","text":"<pre><code>import asyncio\nfrom create_sample_data import create_sample_data\n\n# Run the sample data creation\nasyncio.run(create_sample_data())\n</code></pre>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-05-31T15-56-15/#generated-data-structure","title":"Generated Data Structure","text":""},{"location":"autodoc_src_backend_create_sample_data_py_2025-05-31T15-56-15/#1-users","title":"1. Users","text":"Field Value Description Username <code>admin</code> Administrator account Email <code>admin@example.com</code> Contact email Password <code>admin123</code> (hashed) Login credentials Role <code>admin</code> Administrative privileges"},{"location":"autodoc_src_backend_create_sample_data_py_2025-05-31T15-56-15/#2-entities-tenants","title":"2. Entities (Tenants)","text":""},{"location":"autodoc_src_backend_create_sample_data_py_2025-05-31T15-56-15/#personal-entity","title":"Personal Entity","text":"<ul> <li>Name: Personal Entity</li> <li>Type: Individual</li> <li>Location: Zurich, Switzerland</li> <li>Aliases: Andr\u00e9 Wolke, A. Wolke, Personal</li> </ul>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-05-31T15-56-15/#test-company-ltd","title":"Test Company Ltd.","text":"<ul> <li>Name: Test Company Ltd.</li> <li>Type: Company</li> <li>Location: Zurich, Switzerland</li> <li>VAT ID: CHE-123.456.789</li> <li>IBAN: CH93 0076 2011 6238 5295 7</li> </ul>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-05-31T15-56-15/#google-llc","title":"Google LLC","text":"<ul> <li>Name: Google LLC</li> <li>Type: Company</li> <li>Location: Mountain View, United States</li> <li>Aliases: Google, Google Cloud, Alphabet Inc</li> </ul>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-05-31T15-56-15/#3-llm-configuration","title":"3. LLM Configuration","text":"<pre><code>Provider: local\nAPI URL: http://localhost:11434\nTagger Model: phi3\nEnricher Model: llama3\nAuto-tagging: enabled\nAuto-enrichment: enabled\nConfidence Thresholds:\n  - Tagging: 0.7\n  - Entity: 0.8\n</code></pre>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-05-31T15-56-15/#4-sample-documents","title":"4. Sample Documents","text":""},{"location":"autodoc_src_backend_create_sample_data_py_2025-05-31T15-56-15/#problematic-recipients-for-testing-auto-assignment","title":"Problematic Recipients (For Testing Auto-Assignment)","text":"<ol> <li>Google Cloud Invoice</li> <li>Recipient: \"Your Company\" \u2190 Problematic</li> <li> <p>Expected Assignment: Google LLC entity</p> </li> <li> <p>Medical Insurance Bill</p> </li> <li>Recipient: \"\" \u2190 Empty</li> <li> <p>Expected Assignment: Personal Entity</p> </li> <li> <p>Office Rent Invoice</p> </li> <li>Recipient: <code>null</code> \u2190 NULL value</li> <li> <p>Expected Assignment: Test Company Ltd.</p> </li> <li> <p>Google Workspace Subscription</p> </li> <li>Recipient: \"Unknown\" \u2190 Generic</li> <li>Expected Assignment: Auto-determined</li> </ol>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-05-31T15-56-15/#properly-assigned-document","title":"Properly Assigned Document","text":"<ol> <li>Control Document</li> <li>Recipient: \"Test Company Ltd.\" \u2190 Correct</li> <li>Assignment: Already linked to Test Corp entity</li> </ol>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-05-31T15-56-15/#testing-scenarios","title":"Testing Scenarios","text":""},{"location":"autodoc_src_backend_create_sample_data_py_2025-05-31T15-56-15/#recipient-assignment-patterns","title":"Recipient Assignment Patterns","text":"<p>The script creates documents with various problematic recipient patterns commonly found in real-world scenarios:</p> Pattern Example Test Case Generic placeholder \"Your Company\" Should be auto-assigned based on content analysis Empty string <code>\"\"</code> Should trigger entity matching algorithm NULL value <code>null</code> Should use sender/content context for assignment Vague identifier \"Unknown\" Should use LLM analysis for proper assignment"},{"location":"autodoc_src_backend_create_sample_data_py_2025-05-31T15-56-15/#expected-automation-behavior","title":"Expected Automation Behavior","text":"<ol> <li>Content Analysis: Documents should be analyzed for entity references</li> <li>Sender Matching: Known senders should help determine recipient entity</li> <li>Alias Resolution: Entity aliases should be matched against document content</li> <li>Confidence Scoring: Assignments should meet minimum confidence thresholds</li> </ol>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-05-31T15-56-15/#error-handling","title":"Error Handling","text":"<p>The script includes comprehensive error handling:</p> <pre><code>try:\n    # Data creation logic\n    await session.commit()\n    print(\"\u2705 Sample data created successfully!\")\nexcept Exception as e:\n    print(f\"\u274c Error creating sample data: {e}\")\n    await session.rollback()\nfinally:\n    await session.close()\n</code></pre>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-05-31T15-56-15/#output","title":"Output","text":"<p>Upon successful execution, the script provides a summary:</p> <pre><code>\ud83d\udcdd Creating Sample Data for Tenant Automation Testing\n============================================================\n\u2705 Sample data created successfully!\n\ud83d\udcca Created:\n  - 1 admin user\n  - 3 entities (tenants)\n  - 1 LLM configuration (enabled)\n  - 5 sample documents\n    \u2022 4 with problematic recipients\n    \u2022 1 properly assigned\n</code></pre>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-05-31T15-56-15/#security-considerations","title":"Security Considerations","text":"<ul> <li>Password Hashing: Uses bcrypt for secure password storage</li> <li>Database Isolation: Uses separate test database</li> <li>Input Validation: Includes proper data validation for all entities</li> </ul>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-05-31T15-56-15/#customization","title":"Customization","text":""},{"location":"autodoc_src_backend_create_sample_data_py_2025-05-31T15-56-15/#adding-new-entities","title":"Adding New Entities","text":"<pre><code>new_entity = Entity(\n    name=\"Custom Entity\",\n    alias=\"Custom\",\n    type=\"company\",\n    # ... additional fields\n)\nentities.append(new_entity)\n</code></pre>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-05-31T15-56-15/#modifying-llm-configuration","title":"Modifying LLM Configuration","text":"<pre><code>llm_config.model_tagger = \"custom-model\"\nllm_config.min_confidence_tagging = 0.8\n</code></pre>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-05-31T15-56-15/#adding-document-scenarios","title":"Adding Document Scenarios","text":"<pre><code>new_document = Document(\n    title=\"Custom Test Document\",\n    recipient=\"Problematic Recipient Pattern\",\n    # ... additional fields\n)\ndocuments.append(new_document)\n</code></pre>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-05-31T15-56-15/#validation","title":"Validation","text":"<p>After running the script, verify the data creation by checking:</p> <ol> <li>Database table row counts</li> <li>Entity relationship integrity</li> <li>Document hash uniqueness</li> <li>LLM configuration activation status</li> </ol>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-06-01T06-16-39/","title":"autodoc src backend create sample data py 2025 06 01T06 16 39","text":""},{"location":"autodoc_src_backend_create_sample_data_py_2025-06-01T06-16-39/#sample-data-generator-documentation","title":"Sample Data Generator Documentation","text":""},{"location":"autodoc_src_backend_create_sample_data_py_2025-06-01T06-16-39/#overview","title":"Overview","text":"<p>This module creates sample data for testing tenant automation functionality in a document management system. It generates test users, entities (tenants), LLM configurations, and documents with various recipient assignment scenarios to validate automated tenant assignment capabilities.</p>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-06-01T06-16-39/#module-information","title":"Module Information","text":"<ul> <li>File: <code>create_sample_data.py</code></li> <li>Type: Standalone utility script</li> <li>Purpose: Generate test data for tenant automation testing</li> <li>Database: SQLite with async support</li> </ul>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-06-01T06-16-39/#dependencies","title":"Dependencies","text":"<pre><code>import asyncio\nimport sys\nimport os\nimport hashlib\nfrom datetime import datetime, timedelta\nfrom sqlalchemy.ext.asyncio import AsyncSession, create_async_engine\nfrom app.models import Document, Entity, LLMConfig, User\nfrom passlib.context import CryptContext\n</code></pre>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-06-01T06-16-39/#configuration","title":"Configuration","text":""},{"location":"autodoc_src_backend_create_sample_data_py_2025-06-01T06-16-39/#database-configuration","title":"Database Configuration","text":"<ul> <li>Engine: SQLite with aiosqlite driver</li> <li>Database File: <code>./documents.db</code></li> <li>Echo Mode: Disabled for cleaner output</li> </ul>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-06-01T06-16-39/#password-hashing","title":"Password Hashing","text":"<ul> <li>Algorithm: bcrypt</li> <li>Configuration: Uses passlib CryptContext with deprecated algorithm handling</li> </ul>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-06-01T06-16-39/#functions","title":"Functions","text":""},{"location":"autodoc_src_backend_create_sample_data_py_2025-06-01T06-16-39/#create_sample_data","title":"<code>create_sample_data()</code>","text":"<p>Purpose: Creates comprehensive sample data for testing tenant automation functionality.</p> <p>Signature:  <pre><code>async def create_sample_data() -&gt; None\n</code></pre></p> <p>Returns: None</p> <p>Functionality:</p>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-06-01T06-16-39/#1-user-creation","title":"1. User Creation","text":"<p>Creates an administrative user with the following properties: - Username: <code>admin</code> - Email: <code>admin@example.com</code> - Role: <code>admin</code> - Password: <code>admin123</code> (bcrypt hashed) - Status: Active</p>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-06-01T06-16-39/#2-entity-tenant-creation","title":"2. Entity (Tenant) Creation","text":"<p>Generates three distinct entities representing different tenant types:</p>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-06-01T06-16-39/#personal-entity","title":"Personal Entity","text":"<ul> <li>Type: Individual</li> <li>Name: Personal Entity</li> <li>Location: Zurich, Switzerland</li> <li>Aliases: Multiple name variations for testing alias matching</li> </ul>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-06-01T06-16-39/#test-company-ltd","title":"Test Company Ltd.","text":"<ul> <li>Type: Company</li> <li>Name: Test Company Ltd.</li> <li>Location: Zurich, Switzerland</li> <li>Financial Info: VAT ID and IBAN included</li> <li>Aliases: Various company name formats</li> </ul>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-06-01T06-16-39/#google-llc","title":"Google LLC","text":"<ul> <li>Type: Company</li> <li>Name: Google LLC</li> <li>Location: Mountain View, United States</li> <li>Aliases: Google, Google Cloud, Alphabet Inc variations</li> </ul>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-06-01T06-16-39/#3-llm-configuration","title":"3. LLM Configuration","text":"<p>Sets up local LLM configuration with the following parameters:</p> Parameter Value Description <code>provider</code> <code>local</code> Local LLM deployment <code>api_url</code> <code>http://localhost:11434</code> Ollama default endpoint <code>model_tagger</code> <code>phi3</code> Document tagging model <code>model_enricher</code> <code>llama3</code> Content enrichment model <code>auto_tagging</code> <code>true</code> Enable automatic tagging <code>auto_enrichment</code> <code>true</code> Enable content enrichment <code>min_confidence_tagging</code> <code>0.7</code> Minimum confidence for tagging <code>min_confidence_entity</code> <code>0.8</code> Minimum confidence for entity assignment <code>max_retries</code> <code>3</code> Maximum retry attempts <code>batch_size</code> <code>5</code> Processing batch size <code>concurrent_tasks</code> <code>2</code> Concurrent processing limit"},{"location":"autodoc_src_backend_create_sample_data_py_2025-06-01T06-16-39/#4-document-creation","title":"4. Document Creation","text":"<p>Creates five test documents with different recipient assignment scenarios:</p>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-06-01T06-16-39/#problematic-recipients-auto-assignment-candidates","title":"Problematic Recipients (Auto-Assignment Candidates)","text":"<ol> <li>Google Cloud Invoice</li> <li>Recipient: <code>\"Your Company\"</code> (generic placeholder)</li> <li> <p>Expected Assignment: Google LLC entity</p> </li> <li> <p>Medical Insurance Bill</p> </li> <li>Recipient: <code>\"\"</code> (empty string)</li> <li> <p>Expected Assignment: Personal Entity</p> </li> <li> <p>Office Rent Invoice</p> </li> <li>Recipient: <code>None</code> (null value)</li> <li> <p>Expected Assignment: Test Company Ltd.</p> </li> <li> <p>Google Workspace Subscription</p> </li> <li>Recipient: <code>\"Unknown\"</code> (placeholder value)</li> <li>Expected Assignment: Based on sender (Google LLC)</li> </ol>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-06-01T06-16-39/#properly-assigned-document","title":"Properly Assigned Document","text":"<ol> <li>Control Document</li> <li>Recipient: <code>\"Test Company Ltd.\"</code> (properly assigned)</li> <li>Entity ID: Pre-assigned to Test Company</li> </ol>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-06-01T06-16-39/#usage","title":"Usage","text":""},{"location":"autodoc_src_backend_create_sample_data_py_2025-06-01T06-16-39/#command-line-execution","title":"Command Line Execution","text":"<pre><code>python3 create_sample_data.py\n</code></pre>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-06-01T06-16-39/#programmatic-usage","title":"Programmatic Usage","text":"<pre><code>import asyncio\nfrom create_sample_data import create_sample_data\n\n# Run the data creation\nasyncio.run(create_sample_data())\n</code></pre>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-06-01T06-16-39/#output-format","title":"Output Format","text":"<p>The script provides detailed console output showing the creation progress:</p> <pre><code>\ud83d\udcdd Creating Sample Data for Tenant Automation Testing\n============================================================\n\u2705 Sample data created successfully!\n\ud83d\udcca Created:\n  - 1 admin user\n  - 3 entities (tenants)\n  - 1 LLM configuration (enabled)\n  - 5 sample documents\n    \u2022 4 with problematic recipients\n    \u2022 1 properly assigned\n</code></pre>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-06-01T06-16-39/#error-handling","title":"Error Handling","text":"<ul> <li>Transaction Management: Uses database transactions with automatic rollback on errors</li> <li>Exception Handling: Catches and reports database errors</li> <li>Resource Cleanup: Ensures proper session closure in finally block</li> </ul>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-06-01T06-16-39/#testing-scenarios","title":"Testing Scenarios","text":"<p>This sample data enables testing of the following automation scenarios:</p> <ol> <li>Empty Recipient Detection: Documents with null, empty, or placeholder recipients</li> <li>Alias Matching: Entity recognition through various name aliases</li> <li>Sender-Based Assignment: Assignment based on document sender when recipient is unclear</li> <li>Multi-Tenant Scenarios: Documents for different entity types (personal vs. corporate)</li> <li>Confidence Thresholds: Testing minimum confidence requirements for auto-assignment</li> </ol>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-06-01T06-16-39/#database-schema-requirements","title":"Database Schema Requirements","text":"<p>The script expects the following database models: - <code>User</code>: User management with role-based access - <code>Entity</code>: Tenant/entity information with aliases - <code>Document</code>: Document storage with sender/recipient tracking - <code>LLMConfig</code>: LLM service configuration</p>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-06-01T06-16-39/#security-considerations","title":"Security Considerations","text":"<ul> <li>Password Hashing: Uses bcrypt for secure password storage</li> <li>Test Data: Contains only sample/dummy data suitable for testing environments</li> <li>Database Path: Uses relative path suitable for development environments</li> </ul>"},{"location":"autodoc_src_backend_create_sample_data_py_2025-06-01T06-16-39/#maintenance-notes","title":"Maintenance Notes","text":"<ul> <li>Update entity information to reflect current testing requirements</li> <li>Modify LLM configuration parameters based on model capabilities</li> <li>Adjust document scenarios to cover new automation features</li> <li>Review and update sample data volumes for performance testing</li> </ul>"},{"location":"autodoc_src_backend_fix_hetzner_sender_names_py_2025-05-31T15-55-47/","title":"autodoc src backend fix hetzner sender names py 2025 05 31T15 55 47","text":""},{"location":"autodoc_src_backend_fix_hetzner_sender_names_py_2025-05-31T15-55-47/#hetzner-invoice-sender-name-fix-script","title":"Hetzner Invoice Sender Name Fix Script","text":""},{"location":"autodoc_src_backend_fix_hetzner_sender_names_py_2025-05-31T15-55-47/#overview","title":"Overview","text":"<p>This script is designed to clean up problematic sender names in Hetzner invoices stored in the database. It identifies documents where the sender field contains JSON strings instead of clean company names and normalizes them to display \"Hetzner Online GmbH\" or other appropriate clean names.</p>"},{"location":"autodoc_src_backend_fix_hetzner_sender_names_py_2025-05-31T15-55-47/#purpose","title":"Purpose","text":"<ul> <li>Problem: Some Hetzner invoice records have sender fields containing JSON data instead of readable company names</li> <li>Solution: Parse JSON data to extract meaningful company names and update the database records</li> <li>Target: Specifically focuses on Hetzner-related documents in the database</li> </ul>"},{"location":"autodoc_src_backend_fix_hetzner_sender_names_py_2025-05-31T15-55-47/#requirements","title":"Requirements","text":""},{"location":"autodoc_src_backend_fix_hetzner_sender_names_py_2025-05-31T15-55-47/#dependencies","title":"Dependencies","text":"<ul> <li>Python 3.7+</li> <li><code>asyncio</code> (built-in)</li> <li><code>json</code> (built-in)</li> <li><code>re</code> (built-in)</li> <li><code>sys</code> (built-in)</li> <li><code>sqlalchemy</code> with async support</li> <li>Custom application modules:</li> <li><code>app.database</code> (provides <code>async_engine</code>)</li> <li><code>app.models</code> (provides <code>Document</code> model)</li> </ul>"},{"location":"autodoc_src_backend_fix_hetzner_sender_names_py_2025-05-31T15-55-47/#environment","title":"Environment","text":"<ul> <li>Script expects to run in an environment where <code>/app</code> contains the backend application code</li> <li>Database connection must be configured through <code>app.database.async_engine</code></li> </ul>"},{"location":"autodoc_src_backend_fix_hetzner_sender_names_py_2025-05-31T15-55-47/#functions","title":"Functions","text":""},{"location":"autodoc_src_backend_fix_hetzner_sender_names_py_2025-05-31T15-55-47/#extract_sender_namesender_data","title":"<code>extract_sender_name(sender_data)</code>","text":"<p>Extracts a clean company name from potentially malformed sender data.</p> <p>Parameters: - <code>sender_data</code> (str|any): The raw sender data that may contain JSON or plain text</p> <p>Returns: - <code>str</code>: Clean, trimmed company name</p> <p>Logic: 1. Returns empty string for falsy input 2. For string input:    - Detects JSON format by checking for <code>{</code> and <code>}</code> delimiters    - Attempts JSON parsing if detected    - Searches for common name fields: <code>name</code>, <code>company</code>, <code>sender</code>, <code>company_name</code>    - Falls back to first non-empty string value in JSON object    - Returns original string if JSON parsing fails 3. Converts non-string input to string and trims whitespace</p>"},{"location":"autodoc_src_backend_fix_hetzner_sender_names_py_2025-05-31T15-55-47/#fix_hetzner_sender_names","title":"<code>fix_hetzner_sender_names()</code>","text":"<p>Main async function that processes and fixes Hetzner invoice sender names in the database.</p> <p>Process: 1. Query: Finds all documents with sender names containing \"hetzner\" (case-insensitive) 2. Analysis: Checks each document's sender field for cleanup opportunities 3. Processing:     - Extracts clean sender name using <code>extract_sender_name()</code>    - Compares original vs. cleaned version    - Updates database if changes are needed 4. Reporting: Provides detailed console output showing:    - Total documents found    - Before/after comparison for each document    - Success/skip status for each record    - Final summary of changes made</p> <p>Database Operations: - Uses async SQLAlchemy session management - Performs SELECT query with ILIKE pattern matching - Executes UPDATE statements for modified records - Commits changes only if fixes were applied</p>"},{"location":"autodoc_src_backend_fix_hetzner_sender_names_py_2025-05-31T15-55-47/#usage","title":"Usage","text":""},{"location":"autodoc_src_backend_fix_hetzner_sender_names_py_2025-05-31T15-55-47/#command-line-execution","title":"Command Line Execution","text":"<pre><code>python3 fix_hetzner_sender_names.py\n</code></pre>"},{"location":"autodoc_src_backend_fix_hetzner_sender_names_py_2025-05-31T15-55-47/#integration","title":"Integration","text":"<pre><code>import asyncio\nfrom fix_hetzner_sender_names import fix_hetzner_sender_names\n\n# Run the fix process\nasyncio.run(fix_hetzner_sender_names())\n</code></pre>"},{"location":"autodoc_src_backend_fix_hetzner_sender_names_py_2025-05-31T15-55-47/#output-examples","title":"Output Examples","text":""},{"location":"autodoc_src_backend_fix_hetzner_sender_names_py_2025-05-31T15-55-47/#successful-execution","title":"Successful Execution","text":"<pre><code>Found 3 Hetzner documents to check:\n\nDocument ID 123:\n  Original: {\"name\": \"Hetzner Online GmbH\", \"address\": \"...\"}\n  Cleaned:  Hetzner Online GmbH\n  \u2705 Fixed!\n\nDocument ID 124:\n  Original: Hetzner Online GmbH\n  Cleaned:  Hetzner Online GmbH\n  \u2713 Already clean\n\n\ud83c\udf89 Successfully fixed 1 Hetzner invoice sender names!\n</code></pre>"},{"location":"autodoc_src_backend_fix_hetzner_sender_names_py_2025-05-31T15-55-47/#no-changes-needed","title":"No Changes Needed","text":"<pre><code>Found 2 Hetzner documents to check:\n\u2713 All Hetzner invoice sender names are already clean.\n</code></pre>"},{"location":"autodoc_src_backend_fix_hetzner_sender_names_py_2025-05-31T15-55-47/#error-handling","title":"Error Handling","text":"<ul> <li>JSON Parsing: Gracefully handles malformed JSON with try/catch blocks</li> <li>Database Errors: Relies on SQLAlchemy's built-in error handling</li> <li>Data Types: Safely converts non-string data to strings</li> <li>Empty Data: Handles null, empty, or falsy sender data appropriately</li> </ul>"},{"location":"autodoc_src_backend_fix_hetzner_sender_names_py_2025-05-31T15-55-47/#safety-features","title":"Safety Features","text":"<ul> <li>Preview Mode: Shows before/after comparison before making changes</li> <li>Selective Updates: Only modifies records that actually need changes</li> <li>Transaction Safety: Uses database transactions with commit only after successful processing</li> <li>Detailed Logging: Provides comprehensive output for audit trails</li> </ul>"},{"location":"autodoc_src_backend_fix_hetzner_sender_names_py_2025-05-31T15-55-47/#database-schema-assumptions","title":"Database Schema Assumptions","text":"<p>The script assumes a <code>Document</code> model with at least these fields: - <code>id</code>: Primary key - <code>sender</code>: String field containing sender information</p>"},{"location":"autodoc_src_backend_fix_hetzner_sender_names_py_2025-05-31T15-55-47/#maintenance-notes","title":"Maintenance Notes","text":"<ul> <li>Script can be run multiple times safely (idempotent)</li> <li>No backup is created automatically - ensure database backups exist</li> <li>Consider testing on a subset of data first in production environments</li> </ul>"},{"location":"autodoc_src_backend_fix_hetzner_sender_names_py_2025-06-01T06-16-19/","title":"autodoc src backend fix hetzner sender names py 2025 06 01T06 16 19","text":""},{"location":"autodoc_src_backend_fix_hetzner_sender_names_py_2025-06-01T06-16-19/#hetzner-invoice-sender-name-cleanup-script","title":"Hetzner Invoice Sender Name Cleanup Script","text":""},{"location":"autodoc_src_backend_fix_hetzner_sender_names_py_2025-06-01T06-16-19/#overview","title":"Overview","text":"<p>This script is designed to clean up Hetzner invoice sender names that contain JSON strings in the database. It identifies documents with problematic sender fields and normalizes them to display clean company names.</p>"},{"location":"autodoc_src_backend_fix_hetzner_sender_names_py_2025-06-01T06-16-19/#purpose","title":"Purpose","text":"<p>The script addresses data quality issues where sender names are stored as JSON strings instead of clean text, ensuring consistent display of \"Hetzner Online GmbH\" and other company names.</p>"},{"location":"autodoc_src_backend_fix_hetzner_sender_names_py_2025-06-01T06-16-19/#requirements","title":"Requirements","text":"<ul> <li>Python 3.x</li> <li>SQLAlchemy with async support</li> <li>Access to the application database</li> <li>Required modules: <code>app.database</code>, <code>app.models</code></li> </ul>"},{"location":"autodoc_src_backend_fix_hetzner_sender_names_py_2025-06-01T06-16-19/#usage","title":"Usage","text":"<pre><code>python3 fix_hetzner_sender_names.py\n</code></pre>"},{"location":"autodoc_src_backend_fix_hetzner_sender_names_py_2025-06-01T06-16-19/#functions","title":"Functions","text":""},{"location":"autodoc_src_backend_fix_hetzner_sender_names_py_2025-06-01T06-16-19/#extract_sender_namesender_data","title":"<code>extract_sender_name(sender_data)</code>","text":"<p>Extracts and cleans company names from various sender data formats.</p> <p>Parameters: - <code>sender_data</code> (str|any): Raw sender data that may contain JSON strings or clean text</p> <p>Returns: - <code>str</code>: Cleaned company name</p> <p>Logic: 1. Returns empty string if no data provided 2. For string inputs:    - Detects JSON format by checking for <code>{</code> and <code>}</code> delimiters    - Attempts JSON parsing if format is detected    - Searches for common name fields: <code>name</code>, <code>company</code>, <code>sender</code>, <code>company_name</code>    - Falls back to first non-empty string value in JSON object    - Handles JSON parsing errors gracefully 3. Returns trimmed string representation for non-string inputs</p>"},{"location":"autodoc_src_backend_fix_hetzner_sender_names_py_2025-06-01T06-16-19/#fix_hetzner_sender_names","title":"<code>fix_hetzner_sender_names()</code>","text":"<p>Main async function that processes and updates Hetzner documents in the database.</p> <p>Process: 1. Establishes async database session 2. Queries for documents containing \"hetzner\" in sender field (case-insensitive) 3. Processes each document:    - Extracts original sender name    - Applies cleaning logic    - Compares original vs. cleaned versions    - Updates database if changes are needed 4. Commits changes and provides summary statistics</p> <p>Output: - Progress information for each document processed - Success indicators (\u2705 for fixed, \u2713 for already clean) - Final summary with count of fixed records</p>"},{"location":"autodoc_src_backend_fix_hetzner_sender_names_py_2025-06-01T06-16-19/#database-operations","title":"Database Operations","text":"<p>The script performs the following database operations:</p> <ul> <li>SELECT: Queries documents with Hetzner-related sender names</li> <li>UPDATE: Modifies sender field for documents requiring cleanup</li> <li>COMMIT: Saves all changes to the database</li> </ul>"},{"location":"autodoc_src_backend_fix_hetzner_sender_names_py_2025-06-01T06-16-19/#error-handling","title":"Error Handling","text":"<ul> <li>JSON parsing errors are caught and handled gracefully</li> <li>Database operations use proper async session management</li> <li>Input validation prevents processing of null/empty data</li> </ul>"},{"location":"autodoc_src_backend_fix_hetzner_sender_names_py_2025-06-01T06-16-19/#example-output","title":"Example Output","text":"<pre><code>Found 15 Hetzner documents to check:\n\nDocument ID 123:\n  Original: {\"company\": \"Hetzner Online GmbH\", \"address\": \"...\"}\n  Cleaned:  Hetzner Online GmbH\n  \u2705 Fixed!\n\nDocument ID 124:\n  Original: Hetzner Online GmbH\n  Cleaned:  Hetzner Online GmbH\n  \u2713 Already clean\n\n\ud83c\udf89 Successfully fixed 8 Hetzner invoice sender names!\n</code></pre>"},{"location":"autodoc_src_backend_fix_hetzner_sender_names_py_2025-06-01T06-16-19/#safety-features","title":"Safety Features","text":"<ul> <li>Read-only operations until final commit</li> <li>Detailed logging of all changes</li> <li>Comparison logic prevents unnecessary updates</li> <li>Transaction-based updates ensure data consistency</li> </ul>"},{"location":"autodoc_src_backend_fix_hetzner_sender_names_py_2025-06-01T06-16-19/#dependencies","title":"Dependencies","text":"<pre><code>import asyncio\nimport sys\nimport json\nimport re\nfrom sqlalchemy.ext.asyncio import AsyncSession\nfrom sqlalchemy import select, update\nfrom app.database import async_engine\nfrom app.models import Document\n</code></pre>"},{"location":"autodoc_src_backend_fix_hetzner_sender_names_py_2025-06-01T06-16-19/#file-structure","title":"File Structure","text":"<p>The script expects to be run from an environment where: - <code>/app</code> directory contains the backend modules - Database connection is properly configured - Document model is available and accessible</p>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-05-31T15-57-05/","title":"autodoc src backend fix tenant automation py 2025 05 31T15 57 05","text":""},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-05-31T15-57-05/#tenant-automation-fix-script","title":"Tenant Automation Fix Script","text":""},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-05-31T15-57-05/#overview","title":"Overview","text":"<p>This script fixes tenant automation by automatically assigning documents to matching tenants based on content analysis and predefined rules. It identifies problematic documents that lack proper tenant assignment and applies intelligent matching logic to associate them with the appropriate entities.</p>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-05-31T15-57-05/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.7+</li> <li>SQLAlchemy with async support</li> <li>aiosqlite for SQLite async operations</li> <li>Access to the application models (<code>Document</code> and <code>Entity</code>)</li> </ul>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-05-31T15-57-05/#installation","title":"Installation","text":"<p>Ensure the following dependencies are installed:</p> <pre><code>pip install sqlalchemy[asyncio] aiosqlite\n</code></pre>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-05-31T15-57-05/#usage","title":"Usage","text":"<p>Run the script directly from the command line:</p> <pre><code>python3 fix_tenant_automation.py\n</code></pre>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-05-31T15-57-05/#script-functionality","title":"Script Functionality","text":""},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-05-31T15-57-05/#main-components","title":"Main Components","text":""},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-05-31T15-57-05/#database-connection","title":"Database Connection","text":"<ul> <li>Creates an async SQLite engine using <code>aiosqlite</code></li> <li>Connects to <code>./documents.db</code></li> <li>Uses SQLAlchemy's async session management</li> </ul>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-05-31T15-57-05/#entity-management","title":"Entity Management","text":"<ul> <li>Retrieves all available entities from the database</li> <li>Creates a lookup dictionary for efficient entity matching</li> <li>Displays available entities with their IDs, aliases, and names</li> </ul>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-05-31T15-57-05/#document-processing","title":"Document Processing","text":"<ul> <li>Identifies problematic documents with missing or invalid recipient information</li> <li>Targets documents where <code>recipient</code> is:</li> <li><code>NULL</code></li> <li>Empty string</li> <li>\"Your Company\"</li> <li>\"Unknown\"</li> </ul>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-05-31T15-57-05/#assignment-rules","title":"Assignment Rules","text":"<p>The script applies intelligent assignment logic based on content analysis:</p> Rule Trigger Conditions Target Entity Description Rule 1 \"google\" in sender, title, or content Google entity Google service documents Rule 2 \"andr\u00e9\", \"personal\", \"medical\", or \"insurance\" keywords Personal entity Personal/medical documents Rule 3 \"test company\", \"office\", \"rent\", or \"test corp\" keywords Test Corp entity Company/business documents"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-05-31T15-57-05/#processing-workflow","title":"Processing Workflow","text":"<pre><code>graph TD\n    A[Start] --&gt; B[Load Entities]\n    B --&gt; C[Find Problematic Documents]\n    C --&gt; D[Apply Assignment Rules]\n    D --&gt; E[Generate Assignments]\n    E --&gt; F[Update Documents]\n    F --&gt; G[Commit Changes]\n    G --&gt; H[Display Results]\n</code></pre>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-05-31T15-57-05/#functions","title":"Functions","text":""},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-05-31T15-57-05/#fix_tenant_automation","title":"<code>fix_tenant_automation()</code>","text":"<p>Purpose: Main function that orchestrates the tenant assignment process.</p> <p>Parameters: None</p> <p>Returns: None</p> <p>Process: 1. Establishes database session 2. Loads all entities into memory 3. Queries for problematic documents 4. Applies assignment rules based on content analysis 5. Updates document records with new tenant assignments 6. Commits changes to database 7. Provides detailed output of operations performed</p>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-05-31T15-57-05/#output-format","title":"Output Format","text":"<p>The script provides comprehensive console output:</p> <pre><code>\ud83d\udd27 Fixing Tenant Automation\n========================================\n\ud83d\udc65 Available Entities:\n  1: Google (Google Services)\n  2: Personal (Personal Documents)\n  3: Test Corp (Test Corporation)\n\n\ud83d\udcc4 Found 15 documents to fix:\n  \ud83d\udcc4 Google Drive Notification        \u2192 Google (Google service detected)\n  \ud83d\udcc4 Medical Insurance Form           \u2192 Personal (Personal document detected)\n  \ud83d\udcc4 Office Rent Agreement           \u2192 Test Corp (Company document detected)\n  \u2753 Unknown Document                 \u2192 No assignment found\n\n\ud83c\udfaf Applying 12 assignments...\n  \u2705 Google Drive Notification \u2192 Google\n  \u2705 Medical Insurance Form \u2192 Personal\n  \u2705 Office Rent Agreement \u2192 Test Corp\n\n\u2705 Tenant automation fixed!\n   \ud83d\udcca 12 documents assigned to tenants\n   \ud83c\udfaf 3 documents still need manual review\n</code></pre>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-05-31T15-57-05/#database-schema-requirements","title":"Database Schema Requirements","text":"<p>The script expects the following database structure:</p>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-05-31T15-57-05/#document-table","title":"Document Table","text":"<pre><code>- id: Primary key\n- title: Document title\n- content: Document content\n- sender: Document sender\n- recipient: Document recipient (updated by script)\n- entity_id: Foreign key to Entity table (updated by script)\n</code></pre>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-05-31T15-57-05/#entity-table","title":"Entity Table","text":"<pre><code>- id: Primary key\n- name: Entity full name\n- alias: Entity short name/alias\n</code></pre>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-05-31T15-57-05/#error-handling","title":"Error Handling","text":"<ul> <li>Uses SQLAlchemy's transaction management with automatic rollback on errors</li> <li>Async context managers ensure proper resource cleanup</li> <li>Path configuration handles module imports from different locations</li> </ul>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-05-31T15-57-05/#customization","title":"Customization","text":"<p>To modify assignment rules, update the logic in the <code>fix_tenant_automation()</code> function:</p> <pre><code># Add new rule\nelif \"new_keyword\" in content:\n    assigned_entity = next((e for e in entities.values() if e.alias == \"New Entity\"), None)\n    reason = \"New rule applied\"\n</code></pre>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-05-31T15-57-05/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Loads all entities into memory for efficient lookup</li> <li>Uses async operations for database queries</li> <li>Batch commits changes after processing all assignments</li> <li>Content analysis performed in-memory to minimize database calls</li> </ul>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-05-31T15-57-05/#security-notes","title":"Security Notes","text":"<ul> <li>Database connection uses local SQLite file</li> <li>No external network connections required</li> <li>Operates on existing data without exposing sensitive information</li> <li>Uses parameterized queries through SQLAlchemy ORM</li> </ul>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-06-01T06-17-37/","title":"autodoc src backend fix tenant automation py 2025 06 01T06 17 37","text":""},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-06-01T06-17-37/#tenant-automation-fix-script","title":"Tenant Automation Fix Script","text":""},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-06-01T06-17-37/#overview","title":"Overview","text":"<p>This script addresses tenant automation issues by automatically assigning documents to appropriate tenants based on content analysis and predefined matching rules.</p>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-06-01T06-17-37/#purpose","title":"Purpose","text":"<p>The script identifies documents with missing or invalid tenant assignments and applies intelligent matching logic to associate them with the correct entities in the system.</p>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-06-01T06-17-37/#requirements","title":"Requirements","text":"<ul> <li>Python 3.7+</li> <li>SQLAlchemy with async support</li> <li>aiosqlite</li> <li>Access to the application models (<code>Document</code>, <code>Entity</code>)</li> </ul>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-06-01T06-17-37/#usage","title":"Usage","text":"<pre><code>python3 fix_tenant_automation.py\n</code></pre>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-06-01T06-17-37/#functionality","title":"Functionality","text":""},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-06-01T06-17-37/#main-function-fix_tenant_automation","title":"Main Function: <code>fix_tenant_automation()</code>","text":"<p>Purpose: Automatically assigns documents to matching tenants based on content analysis.</p> <p>Process: 1. Connects to the SQLite database using async SQLAlchemy 2. Retrieves all available entities from the database 3. Identifies problematic documents requiring tenant assignment 4. Applies intelligent matching rules to assign documents to appropriate entities 5. Commits the changes to the database</p>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-06-01T06-17-37/#document-selection-criteria","title":"Document Selection Criteria","text":"<p>The script targets documents with the following characteristics: - <code>recipient</code> field is <code>NULL</code> - <code>recipient</code> field is empty string - <code>recipient</code> field contains placeholder values: <code>'Your Company'</code> or <code>'Unknown'</code></p>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-06-01T06-17-37/#assignment-rules","title":"Assignment Rules","text":"<p>The script uses content-based matching rules to determine appropriate tenant assignments:</p>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-06-01T06-17-37/#rule-1-google-services","title":"Rule 1: Google Services","text":"<ul> <li>Trigger: Content contains \"google\" in sender, title, or content fields</li> <li>Assignment: Documents assigned to \"Google\" entity</li> <li>Use Case: Google service notifications, account updates</li> </ul>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-06-01T06-17-37/#rule-2-personal-documents","title":"Rule 2: Personal Documents","text":"<ul> <li>Triggers:</li> <li>Content contains \"andr\u00e9\" or \"personal\"</li> <li>Title contains \"medical\" or \"insurance\"</li> <li>Assignment: Documents assigned to \"Personal\" entity</li> <li>Use Case: Personal correspondence, medical records, insurance documents</li> </ul>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-06-01T06-17-37/#rule-3-company-documents","title":"Rule 3: Company Documents","text":"<ul> <li>Triggers:</li> <li>Content contains \"test company\", \"office\", or \"test corp\"</li> <li>Title contains \"rent\"</li> <li>Assignment: Documents assigned to \"Test Corp\" entity</li> <li>Use Case: Business correspondence, office-related documents, rental agreements</li> </ul>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-06-01T06-17-37/#database-schema","title":"Database Schema","text":"<p>The script interacts with the following database models:</p>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-06-01T06-17-37/#document-model","title":"Document Model","text":"<ul> <li><code>id</code>: Primary key</li> <li><code>title</code>: Document title</li> <li><code>content</code>: Document content</li> <li><code>sender</code>: Document sender</li> <li><code>recipient</code>: Document recipient (target for updates)</li> <li><code>entity_id</code>: Foreign key to Entity (target for updates)</li> </ul>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-06-01T06-17-37/#entity-model","title":"Entity Model","text":"<ul> <li><code>id</code>: Primary key</li> <li><code>name</code>: Full entity name</li> <li><code>alias</code>: Short entity identifier</li> </ul>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-06-01T06-17-37/#output","title":"Output","text":"<p>The script provides detailed console output including:</p>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-06-01T06-17-37/#entity-information","title":"Entity Information","text":"<pre><code>\ud83d\udc65 Available Entities:\n  1: Google (Google Services)\n  2: Personal (Personal Documents)\n  3: Test Corp (Test Company Inc.)\n</code></pre>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-06-01T06-17-37/#assignment-results","title":"Assignment Results","text":"<pre><code>\ud83d\udcc4 Found 15 documents to fix:\n  \ud83d\udcc4 Google Account Security Alert        \u2192 Google (Google service detected)\n  \ud83d\udcc4 Medical Appointment Reminder         \u2192 Personal (Personal document detected)\n  \ud83d\udcc4 Office Lease Agreement              \u2192 Test Corp (Company document detected)\n  \u2753 Unidentified Document               \u2192 No assignment found\n</code></pre>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-06-01T06-17-37/#summary-statistics","title":"Summary Statistics","text":"<pre><code>\u2705 Tenant automation fixed!\n   \ud83d\udcca 12 documents assigned to tenants\n   \ud83c\udfaf 3 documents still need manual review\n</code></pre>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-06-01T06-17-37/#error-handling","title":"Error Handling","text":"<ul> <li>Uses async context managers for proper database session management</li> <li>Automatically rolls back transactions on failure</li> <li>Gracefully handles missing entities or malformed data</li> </ul>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-06-01T06-17-37/#configuration","title":"Configuration","text":""},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-06-01T06-17-37/#database-connection","title":"Database Connection","text":"<ul> <li>Engine: SQLite with aiosqlite async driver</li> <li>Database File: <code>./documents.db</code></li> <li>Echo Mode: Disabled for production use</li> </ul>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-06-01T06-17-37/#path-configuration","title":"Path Configuration","text":"<p>The script adds the following paths to the Python path: - <code>/app</code>: Application root directory - Script directory: Directory containing the script file</p>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-06-01T06-17-37/#best-practices","title":"Best Practices","text":"<ol> <li>Backup: Always backup your database before running the script</li> <li>Testing: Test the script on a copy of your data first</li> <li>Review: Manually review documents that couldn't be automatically assigned</li> <li>Monitoring: Check the output logs to ensure expected assignment counts</li> </ol>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-06-01T06-17-37/#limitations","title":"Limitations","text":"<ul> <li>Assignment rules are hardcoded and may need customization for different use cases</li> <li>Content matching is case-insensitive but uses simple string containment</li> <li>Unmatched documents require manual intervention</li> <li>Script assumes specific entity aliases exist in the database</li> </ul>"},{"location":"autodoc_src_backend_fix_tenant_automation_py_2025-06-01T06-17-37/#extension-points","title":"Extension Points","text":"<p>To customize the script for your environment:</p> <ol> <li>Add New Rules: Extend the assignment logic with additional matching criteria</li> <li>Modify Triggers: Update the content matching patterns for your specific use case</li> <li>Entity Mapping: Adjust entity alias references to match your database</li> <li>Logging: Add more detailed logging or integrate with your logging system</li> </ol>"},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-05-31T15-54-39/","title":"autodoc src backend force process hetzner py 2025 05 31T15 54 39","text":""},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-05-31T15-54-39/#hetzner-invoice-force-processing-script","title":"Hetzner Invoice Force Processing Script","text":""},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-05-31T15-54-39/#overview","title":"Overview","text":"<p>This script provides a manual method to force the processing of Hetzner invoices by bypassing the built-in duplicate detection system and directly adding them to the processing queue.</p>"},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-05-31T15-54-39/#purpose","title":"Purpose","text":"<p>The script is designed to handle scenarios where Hetzner invoices need to be reprocessed or when the standard duplicate detection mechanism prevents legitimate documents from being processed.</p>"},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-05-31T15-54-39/#features","title":"Features","text":"<ul> <li>Automatic Detection: Scans the inbox directory for files matching the Hetzner invoice pattern</li> <li>Batch Processing: Processes multiple invoices sequentially</li> <li>Error Handling: Continues processing remaining files even if individual files fail</li> <li>Progress Reporting: Provides detailed console output with processing status</li> <li>Bypass Mechanism: Circumvents duplicate detection for forced processing</li> </ul>"},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-05-31T15-54-39/#requirements","title":"Requirements","text":""},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-05-31T15-54-39/#dependencies","title":"Dependencies","text":"<ul> <li>Python 3.7+</li> <li><code>asyncio</code> (standard library)</li> <li><code>sys</code> (standard library)</li> <li><code>os</code> (standard library)</li> <li><code>glob</code> (standard library)</li> <li>Application backend modules (from <code>/app</code>)</li> </ul>"},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-05-31T15-54-39/#environment","title":"Environment","text":"<ul> <li>Must be run within the application container environment</li> <li>Requires access to <code>/hostfs/Inbox</code> directory</li> <li>Backend application modules must be available at <code>/app</code></li> </ul>"},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-05-31T15-54-39/#usage","title":"Usage","text":""},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-05-31T15-54-39/#basic-execution","title":"Basic Execution","text":"<pre><code>python3 force_process_hetzner.py\n</code></pre>"},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-05-31T15-54-39/#docker-container-execution","title":"Docker Container Execution","text":"<pre><code># From within the container\n./force_process_hetzner.py\n</code></pre>"},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-05-31T15-54-39/#file-structure","title":"File Structure","text":"<pre><code>/hostfs/Inbox/          # Monitored directory for Hetzner invoices\n\u251c\u2500\u2500 *Hetzner*.pdf       # Hetzner invoice files (pattern matched)\n\u2514\u2500\u2500 ...\n</code></pre>"},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-05-31T15-54-39/#functions","title":"Functions","text":""},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-05-31T15-54-39/#force_process_hetzner_invoices","title":"<code>force_process_hetzner_invoices()</code>","text":"<p>Type: <code>async function</code></p> <p>Description: Main processing function that orchestrates the forced processing of Hetzner invoices.</p> <p>Parameters: None</p> <p>Returns: None</p> <p>Behavior: 1. Scans <code>/hostfs/Inbox</code> for files matching <code>*Hetzner*.pdf</code> pattern 2. Lists all discovered files 3. Processes each file sequentially using <code>process_new_document()</code> 4. Reports success/failure status for each file 5. Provides summary of processing results</p> <p>Error Handling: Individual file processing errors are caught and logged, but do not stop the processing of remaining files.</p>"},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-05-31T15-54-39/#output-format","title":"Output Format","text":""},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-05-31T15-54-39/#discovery-phase","title":"Discovery Phase","text":"<pre><code>Found 3 Hetzner invoice files:\n  - Hetzner_Invoice_2024_01.pdf\n  - Hetzner_Invoice_2024_02.pdf\n  - Hetzner_Invoice_2024_03.pdf\n</code></pre>"},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-05-31T15-54-39/#processing-phase","title":"Processing Phase","text":"<pre><code>Starting manual processing of Hetzner invoices...\n\nProcessing 1/3: Hetzner_Invoice_2024_01.pdf\n\u2705 Successfully processed: Hetzner_Invoice_2024_01.pdf\n\nProcessing 2/3: Hetzner_Invoice_2024_02.pdf\n\u274c Error processing Hetzner_Invoice_2024_02.pdf: [Error message]\n\nProcessing 3/3: Hetzner_Invoice_2024_03.pdf\n\u2705 Successfully processed: Hetzner_Invoice_2024_03.pdf\n\nCompleted processing 3 Hetzner invoices.\n</code></pre>"},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-05-31T15-54-39/#error-handling","title":"Error Handling","text":"<ul> <li>File Not Found: Script reports when no Hetzner invoice files are found</li> <li>Processing Errors: Individual file processing errors are caught and displayed with \u274c indicator</li> <li>Path Errors: Missing directories or permissions issues will raise exceptions</li> <li>Import Errors: Missing backend modules will cause import failures</li> </ul>"},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-05-31T15-54-39/#configuration","title":"Configuration","text":""},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-05-31T15-54-39/#file-pattern-matching","title":"File Pattern Matching","text":"<ul> <li>Pattern: <code>*Hetzner*.pdf</code></li> <li>Location: <code>/hostfs/Inbox</code></li> <li>Case Sensitivity: Case-sensitive matching</li> </ul>"},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-05-31T15-54-39/#paths","title":"Paths","text":"<ul> <li>Backend Path: <code>/app</code> (added to <code>sys.path</code>)</li> <li>Inbox Path: <code>/hostfs/Inbox</code></li> </ul>"},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-05-31T15-54-39/#security-considerations","title":"Security Considerations","text":"<ul> <li>Script requires file system access to inbox directory</li> <li>Bypasses duplicate detection mechanisms</li> <li>Should be used with caution in production environments</li> <li>Consider backing up files before forced processing</li> </ul>"},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-05-31T15-54-39/#troubleshooting","title":"Troubleshooting","text":""},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-05-31T15-54-39/#common-issues","title":"Common Issues","text":"<ol> <li>No files found: Verify files exist in <code>/hostfs/Inbox</code> and match <code>*Hetzner*.pdf</code> pattern</li> <li>Import errors: Ensure backend application is properly mounted at <code>/app</code></li> <li>Permission errors: Verify container has read access to inbox directory</li> <li>Processing failures: Check individual error messages for specific file issues</li> </ol>"},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-05-31T15-54-39/#debug-steps","title":"Debug Steps","text":"<ol> <li>Verify file existence: <code>ls -la /hostfs/Inbox/*Hetzner*.pdf</code></li> <li>Check permissions: <code>ls -ld /hostfs/Inbox</code></li> <li>Test backend import: <code>python3 -c \"from app.main import process_new_document\"</code></li> </ol>"},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-05-31T15-54-39/#limitations","title":"Limitations","text":"<ul> <li>Only processes PDF files</li> <li>Requires specific file naming pattern</li> <li>Must be run from within application container</li> <li>Sequential processing (not parallel)</li> <li>No rollback mechanism for processed files</li> </ul>"},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-06-01T06-15-16/","title":"autodoc src backend force process hetzner py 2025 06 01T06 15 16","text":""},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-06-01T06-15-16/#hetzner-invoice-force-processing-script","title":"Hetzner Invoice Force Processing Script","text":""},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-06-01T06-15-16/#overview","title":"Overview","text":"<p>This script provides a manual mechanism to force process Hetzner invoices by bypassing duplicate detection and adding them directly to the processing queue. It's designed to run within a containerized environment and processes PDF invoice files from a specified inbox directory.</p>"},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-06-01T06-15-16/#usage","title":"Usage","text":"<pre><code>python3 force_process_hetzner.py\n</code></pre>"},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-06-01T06-15-16/#requirements","title":"Requirements","text":"<ul> <li>Python 3.6+</li> <li>Access to <code>/app</code> directory containing the main application</li> <li>Access to <code>/hostfs/Inbox</code> directory containing invoice files</li> <li>Required dependencies from the main application (<code>app.main</code>)</li> </ul>"},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-06-01T06-15-16/#configuration","title":"Configuration","text":""},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-06-01T06-15-16/#file-paths","title":"File Paths","text":"Path Description <code>/app</code> Application backend directory (added to Python path) <code>/hostfs/Inbox</code> Container inbox directory containing PDF files"},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-06-01T06-15-16/#file-pattern","title":"File Pattern","text":"<p>The script searches for files matching the pattern: <code>*Hetzner*.pdf</code></p>"},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-06-01T06-15-16/#functions","title":"Functions","text":""},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-06-01T06-15-16/#force_process_hetzner_invoices","title":"<code>force_process_hetzner_invoices()</code>","text":"<p>Type: <code>async function</code></p> <p>Purpose: Main processing function that locates and processes all Hetzner invoice files.</p> <p>Behavior: 1. Scans the inbox directory for Hetzner invoice PDF files 2. Lists all found files for confirmation 3. Processes each file sequentially using the main application's processing function 4. Provides detailed progress reporting and error handling</p> <p>Returns: <code>None</code></p> <p>Exceptions: Individual file processing errors are caught and reported without stopping the batch process.</p>"},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-06-01T06-15-16/#process-flow","title":"Process Flow","text":"<pre><code>graph TD\n    A[Start Script] --&gt; B[Scan /hostfs/Inbox for *Hetzner*.pdf]\n    B --&gt; C{Files Found?}\n    C --&gt;|No| D[Print \"No files found\" and exit]\n    C --&gt;|Yes| E[Display file list]\n    E --&gt; F[Process each file sequentially]\n    F --&gt; G[Call process_new_document()]\n    G --&gt; H{Processing Successful?}\n    H --&gt;|Yes| I[Print success message]\n    H --&gt;|No| J[Print error message]\n    I --&gt; K{More files?}\n    J --&gt; K\n    K --&gt;|Yes| F\n    K --&gt;|No| L[Print completion summary]\n</code></pre>"},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-06-01T06-15-16/#output-examples","title":"Output Examples","text":""},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-06-01T06-15-16/#successful-processing","title":"Successful Processing","text":"<pre><code>Found 3 Hetzner invoice files:\n  - Hetzner_Invoice_2024001.pdf\n  - Hetzner_Invoice_2024002.pdf\n  - Hetzner_Invoice_2024003.pdf\n\nStarting manual processing of Hetzner invoices...\n\nProcessing 1/3: Hetzner_Invoice_2024001.pdf\n\u2705 Successfully processed: Hetzner_Invoice_2024001.pdf\n\nProcessing 2/3: Hetzner_Invoice_2024002.pdf\n\u2705 Successfully processed: Hetzner_Invoice_2024002.pdf\n\nProcessing 3/3: Hetzner_Invoice_2024003.pdf\n\u2705 Successfully processed: Hetzner_Invoice_2024003.pdf\n\nCompleted processing 3 Hetzner invoices.\n</code></pre>"},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-06-01T06-15-16/#no-files-found","title":"No Files Found","text":"<pre><code>Found 0 Hetzner invoice files:\nNo Hetzner invoice files found in the inbox.\n</code></pre>"},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-06-01T06-15-16/#processing-with-errors","title":"Processing with Errors","text":"<pre><code>Found 2 Hetzner invoice files:\n  - Hetzner_Invoice_2024001.pdf\n  - Hetzner_Invoice_corrupted.pdf\n\nStarting manual processing of Hetzner invoices...\n\nProcessing 1/2: Hetzner_Invoice_2024001.pdf\n\u2705 Successfully processed: Hetzner_Invoice_2024001.pdf\n\nProcessing 2/2: Hetzner_Invoice_corrupted.pdf\n\u274c Error processing Hetzner_Invoice_corrupted.pdf: File format not supported\n\nCompleted processing 2 Hetzner invoices.\n</code></pre>"},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-06-01T06-15-16/#error-handling","title":"Error Handling","text":"<ul> <li>File Not Found: Script reports when no matching files are found</li> <li>Processing Errors: Individual file processing errors are caught and logged without stopping the batch</li> <li>Path Errors: Relies on the underlying <code>glob</code> and <code>os.path</code> modules for path validation</li> </ul>"},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-06-01T06-15-16/#notes","title":"Notes","text":"<ul> <li>This script bypasses normal duplicate detection mechanisms</li> <li>Processing is performed sequentially, not in parallel</li> <li>The script is designed for containerized environments with specific mount points</li> <li>All file operations are read-only; the script does not modify or move files</li> </ul>"},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-06-01T06-15-16/#dependencies","title":"Dependencies","text":"<pre><code>import asyncio\nimport sys\nimport os\nimport glob\nfrom app.main import process_new_document\n</code></pre>"},{"location":"autodoc_src_backend_force_process_hetzner_py_2025-06-01T06-15-16/#security-considerations","title":"Security Considerations","text":"<ul> <li>Script requires access to host filesystem through <code>/hostfs/Inbox</code></li> <li>Executes with the same privileges as the main application</li> <li>No input validation on file contents (delegated to <code>process_new_document</code>)</li> </ul>"},{"location":"autodoc_src_backend_init_db_py_2025-05-31T15-55-04/","title":"autodoc src backend init db py 2025 05 31T15 55 04","text":""},{"location":"autodoc_src_backend_init_db_py_2025-05-31T15-55-04/#database-initialization-script","title":"Database Initialization Script","text":""},{"location":"autodoc_src_backend_init_db_py_2025-05-31T15-55-04/#overview","title":"Overview","text":"<p>This script provides database initialization functionality for the application. It creates all necessary database tables using SQLAlchemy's async ORM and supports both SQLite and other database backends through configurable connection strings.</p>"},{"location":"autodoc_src_backend_init_db_py_2025-05-31T15-55-04/#file-information","title":"File Information","text":"<ul> <li>File: <code>init_db.py</code></li> <li>Purpose: Initialize database schema by creating all required tables</li> <li>Type: Standalone executable script</li> <li>Python Version: 3.6+ (async/await support required)</li> </ul>"},{"location":"autodoc_src_backend_init_db_py_2025-05-31T15-55-04/#dependencies","title":"Dependencies","text":"<pre><code>import asyncio\nimport sys\nimport os\nfrom sqlalchemy.ext.asyncio import create_async_engine\nfrom app.models import Base\nfrom app.config import settings\n</code></pre>"},{"location":"autodoc_src_backend_init_db_py_2025-05-31T15-55-04/#required-packages","title":"Required Packages","text":"<ul> <li><code>sqlalchemy[asyncio]</code> - Async SQLAlchemy support</li> <li><code>aiosqlite</code> - Async SQLite driver (for SQLite databases)</li> </ul>"},{"location":"autodoc_src_backend_init_db_py_2025-05-31T15-55-04/#internal-dependencies","title":"Internal Dependencies","text":"<ul> <li><code>app.models.Base</code> - SQLAlchemy declarative base containing all model definitions</li> <li><code>app.config.settings</code> - Application configuration settings</li> </ul>"},{"location":"autodoc_src_backend_init_db_py_2025-05-31T15-55-04/#functions","title":"Functions","text":""},{"location":"autodoc_src_backend_init_db_py_2025-05-31T15-55-04/#init_database","title":"<code>init_database()</code>","text":"<p>Asynchronously initializes the database by creating all tables defined in the application models.</p> <p>Signature: <pre><code>async def init_database() -&gt; None\n</code></pre></p> <p>Parameters: None</p> <p>Returns: None</p> <p>Behavior: 1. Determines database connection URL from configuration 2. Creates async SQLAlchemy engine with echo enabled 3. Creates all tables defined in <code>Base.metadata</code> 4. Provides console feedback on success/failure 5. Properly disposes of database engine resources</p> <p>Database URL Resolution: - Uses <code>settings.DATABASE_URL</code> if available - Falls back to SQLite: <code>sqlite+aiosqlite:///{settings.DATABASE_PATH}</code></p>"},{"location":"autodoc_src_backend_init_db_py_2025-05-31T15-55-04/#database-schema","title":"Database Schema","text":"<p>The script creates the following tables:</p> Table Name Purpose <code>users</code> User account information <code>documents</code> Document storage and metadata <code>entities</code> Tenant/organization entities <code>user_entities</code> User-entity relationship mapping <code>llm_config</code> LLM configuration settings <code>address_book</code> Contact information storage <code>tags</code> Document tagging system <code>document_tag</code> Document-tag relationship mapping <code>notifications</code> User notification system <code>settings</code> Application settings <code>vectors</code> Vector embeddings storage"},{"location":"autodoc_src_backend_init_db_py_2025-05-31T15-55-04/#usage","title":"Usage","text":""},{"location":"autodoc_src_backend_init_db_py_2025-05-31T15-55-04/#command-line-execution","title":"Command Line Execution","text":"<pre><code># Make script executable\nchmod +x init_db.py\n\n# Run the script\npython3 init_db.py\n# or\n./init_db.py\n</code></pre>"},{"location":"autodoc_src_backend_init_db_py_2025-05-31T15-55-04/#programmatic-usage","title":"Programmatic Usage","text":"<pre><code>import asyncio\nfrom init_db import init_database\n\n# Initialize database\nawait init_database()\n\n# Or run in sync context\nasyncio.run(init_database())\n</code></pre>"},{"location":"autodoc_src_backend_init_db_py_2025-05-31T15-55-04/#configuration","title":"Configuration","text":"<p>The script relies on configuration settings from <code>app.config.settings</code>:</p> <ul> <li><code>DATABASE_URL</code> (optional): Full database connection string</li> <li><code>DATABASE_PATH</code> (fallback): Path for SQLite database file</li> </ul>"},{"location":"autodoc_src_backend_init_db_py_2025-05-31T15-55-04/#example-configurations","title":"Example Configurations","text":"<p>PostgreSQL: <pre><code>DATABASE_URL = \"postgresql+asyncpg://user:password@localhost/dbname\"\n</code></pre></p> <p>SQLite: <pre><code>DATABASE_PATH = \"/app/data/database.db\"\n</code></pre></p>"},{"location":"autodoc_src_backend_init_db_py_2025-05-31T15-55-04/#output-examples","title":"Output Examples","text":""},{"location":"autodoc_src_backend_init_db_py_2025-05-31T15-55-04/#successful-initialize","title":"Successful Initialize","text":"<pre><code>\ud83d\uddc4\ufe0f Initializing Database\n========================================\nDatabase URL: sqlite+aiosqlite:///app/data/database.db\n\n\u2705 Database initialized successfully!\n\ud83d\udcca Tables created:\n  - users\n  - documents\n  - entities (tenants)\n  - user_entities\n  - llm_config\n  - address_book\n  - tags\n  - document_tag\n  - notifications\n  - settings\n  - vectors\n</code></pre>"},{"location":"autodoc_src_backend_init_db_py_2025-05-31T15-55-04/#error-handling","title":"Error Handling","text":"<pre><code>\ud83d\uddc4\ufe0f Initializing Database\n========================================\nDatabase URL: postgresql+asyncpg://user:password@localhost/nonexistent\n\u274c Error initializing database: could not connect to server\n</code></pre>"},{"location":"autodoc_src_backend_init_db_py_2025-05-31T15-55-04/#error-handling_1","title":"Error Handling","text":"<p>The script implements comprehensive error handling:</p> <ul> <li>Database Connection Errors: Catches and reports connection failures</li> <li>Table Creation Errors: Reports schema creation issues</li> <li>Resource Cleanup: Ensures database engine is properly disposed</li> <li>Exception Reporting: Provides detailed error messages for debugging</li> </ul>"},{"location":"autodoc_src_backend_init_db_py_2025-05-31T15-55-04/#notes","title":"Notes","text":"<ul> <li>Idempotent Operation: Safe to run multiple times; existing tables won't be affected</li> <li>Echo Mode: SQL queries are logged to console for debugging</li> <li>Path Configuration: Adds <code>/app</code> and script directory to Python path for imports</li> <li>Async Context: Uses proper async context management for database operations</li> </ul>"},{"location":"autodoc_src_backend_init_db_py_2025-05-31T15-55-04/#security-considerations","title":"Security Considerations","text":"<ul> <li>Database credentials should be stored securely in environment variables</li> <li>Consider using connection pooling for production deployments</li> <li>Ensure proper file permissions on SQLite database files</li> <li>Use parameterized connection strings to prevent injection attacks</li> </ul>"},{"location":"autodoc_src_backend_init_db_py_2025-06-01T06-15-38/","title":"autodoc src backend init db py 2025 06 01T06 15 38","text":""},{"location":"autodoc_src_backend_init_db_py_2025-06-01T06-15-38/#database-initialization-script","title":"Database Initialization Script","text":""},{"location":"autodoc_src_backend_init_db_py_2025-06-01T06-15-38/#overview","title":"Overview","text":"<p>This script initializes the application database by creating all required tables based on SQLAlchemy model definitions. It provides a standalone utility for setting up the database schema during application deployment or development setup.</p>"},{"location":"autodoc_src_backend_init_db_py_2025-06-01T06-15-38/#file-information","title":"File Information","text":"<ul> <li>File: <code>init_db.py</code></li> <li>Type: Database initialization script</li> <li>Python Version: 3.6+ (requires async/await support)</li> </ul>"},{"location":"autodoc_src_backend_init_db_py_2025-06-01T06-15-38/#dependencies","title":"Dependencies","text":""},{"location":"autodoc_src_backend_init_db_py_2025-06-01T06-15-38/#required-packages","title":"Required Packages","text":"<ul> <li><code>asyncio</code> - Built-in async support</li> <li><code>sqlalchemy</code> - Database ORM with async extensions</li> <li><code>aiosqlite</code> - Async SQLite driver (for SQLite databases)</li> </ul>"},{"location":"autodoc_src_backend_init_db_py_2025-06-01T06-15-38/#internal-dependencies","title":"Internal Dependencies","text":"<ul> <li><code>app.models.Base</code> - SQLAlchemy declarative base containing all table models</li> <li><code>app.config.settings</code> - Application configuration settings</li> </ul>"},{"location":"autodoc_src_backend_init_db_py_2025-06-01T06-15-38/#functions","title":"Functions","text":""},{"location":"autodoc_src_backend_init_db_py_2025-06-01T06-15-38/#init_database","title":"<code>init_database()</code>","text":"<p>Type: <code>async function</code></p> <p>Description:  Initializes the database by creating all tables defined in the application's SQLAlchemy models.</p> <p>Parameters: None</p> <p>Returns: None</p> <p>Behavior: 1. Determines database URL from configuration settings 2. Creates an async SQLAlchemy engine with echo logging enabled 3. Executes table creation using SQLAlchemy metadata 4. Provides detailed console output about the initialization process 5. Handles exceptions and ensures proper engine cleanup</p> <p>Database URL Resolution: - Primary: Uses <code>settings.DATABASE_URL</code> if configured - Fallback: Constructs SQLite URL using <code>settings.DATABASE_PATH</code></p>"},{"location":"autodoc_src_backend_init_db_py_2025-06-01T06-15-38/#database-schema","title":"Database Schema","text":"<p>The script creates the following tables:</p> Table Name Purpose <code>users</code> User account information <code>documents</code> Document storage and metadata <code>entities</code> Tenant/organization entities <code>user_entities</code> User-entity relationship mapping <code>llm_config</code> LLM configuration settings <code>address_book</code> Contact information storage <code>tags</code> Document tagging system <code>document_tag</code> Document-tag relationships <code>notifications</code> User notifications <code>settings</code> Application settings <code>vectors</code> Vector embeddings storage"},{"location":"autodoc_src_backend_init_db_py_2025-06-01T06-15-38/#usage","title":"Usage","text":""},{"location":"autodoc_src_backend_init_db_py_2025-06-01T06-15-38/#command-line-execution","title":"Command Line Execution","text":"<pre><code>python3 init_db.py\n</code></pre>"},{"location":"autodoc_src_backend_init_db_py_2025-06-01T06-15-38/#programmatic-usage","title":"Programmatic Usage","text":"<pre><code>import asyncio\nfrom init_db import init_database\n\n# Run database initialization\nasyncio.run(init_database())\n</code></pre>"},{"location":"autodoc_src_backend_init_db_py_2025-06-01T06-15-38/#configuration-requirements","title":"Configuration Requirements","text":""},{"location":"autodoc_src_backend_init_db_py_2025-06-01T06-15-38/#environment-variables","title":"Environment Variables","text":"<p>The script requires the following configuration settings:</p> <ul> <li><code>DATABASE_URL</code> (optional): Complete database connection string</li> <li><code>DATABASE_PATH</code> (fallback): File path for SQLite database</li> </ul>"},{"location":"autodoc_src_backend_init_db_py_2025-06-01T06-15-38/#example-configuration","title":"Example Configuration","text":"<pre><code># Using DATABASE_URL\nDATABASE_URL = \"postgresql+asyncpg://user:pass@localhost/dbname\"\n\n# Using DATABASE_PATH (SQLite)\nDATABASE_PATH = \"/app/data/database.db\"\n</code></pre>"},{"location":"autodoc_src_backend_init_db_py_2025-06-01T06-15-38/#output-examples","title":"Output Examples","text":""},{"location":"autodoc_src_backend_init_db_py_2025-06-01T06-15-38/#successful-initialization","title":"Successful Initialization","text":"<pre><code>\ud83d\uddc4\ufe0f Initializing Database\n========================================\nDatabase URL: sqlite+aiosqlite:///app/data/database.db\n\n\u2705 Database initialized successfully!\n\ud83d\udcca Tables created:\n  - users\n  - documents\n  - entities (tenants)\n  - user_entities\n  - llm_config\n  - address_book\n  - tags\n  - document_tag\n  - notifications\n  - settings\n  - vectors\n</code></pre>"},{"location":"autodoc_src_backend_init_db_py_2025-06-01T06-15-38/#error-handling","title":"Error Handling","text":"<pre><code>\ud83d\uddc4\ufe0f Initializing Database\n========================================\nDatabase URL: postgresql+asyncpg://invalid:connection@localhost/db\n\u274c Error initializing database: connection failed\n</code></pre>"},{"location":"autodoc_src_backend_init_db_py_2025-06-01T06-15-38/#error-handling_1","title":"Error Handling","text":"<p>The script implements comprehensive error handling:</p> <ul> <li>Database Connection Errors: Catches and reports connection failures</li> <li>Table Creation Errors: Handles schema-related exceptions</li> <li>Resource Cleanup: Ensures database engine disposal in all scenarios</li> </ul>"},{"location":"autodoc_src_backend_init_db_py_2025-06-01T06-15-38/#best-practices","title":"Best Practices","text":""},{"location":"autodoc_src_backend_init_db_py_2025-06-01T06-15-38/#deployment-usage","title":"Deployment Usage","text":"<ol> <li>Run during deployment: Execute as part of application deployment process</li> <li>Idempotent operations: Safe to run multiple times (existing tables won't be affected)</li> <li>Environment-specific: Configure appropriate database URLs for different environments</li> </ol>"},{"location":"autodoc_src_backend_init_db_py_2025-06-01T06-15-38/#development-usage","title":"Development Usage","text":"<ol> <li>Fresh setup: Run when setting up development environment</li> <li>Schema updates: Re-run after model changes (may require manual migration handling)</li> <li>Testing: Use for test database initialization</li> </ol>"},{"location":"autodoc_src_backend_init_db_py_2025-06-01T06-15-38/#security-considerations","title":"Security Considerations","text":"<ul> <li>Database Credentials: Ensure database URLs contain properly secured credentials</li> <li>File Permissions: Set appropriate permissions on SQLite database files</li> <li>Network Security: Use encrypted connections for remote databases</li> </ul>"},{"location":"autodoc_src_backend_init_db_py_2025-06-01T06-15-38/#troubleshooting","title":"Troubleshooting","text":""},{"location":"autodoc_src_backend_init_db_py_2025-06-01T06-15-38/#common-issues","title":"Common Issues","text":"<ol> <li>Import Errors: Ensure all dependencies are installed and paths are correctly configured</li> <li>Permission Errors: Verify write permissions for SQLite database directory</li> <li>Connection Timeouts: Check database server availability and network connectivity</li> </ol>"},{"location":"autodoc_src_backend_init_db_py_2025-06-01T06-15-38/#debugging","title":"Debugging","text":"<p>Enable detailed logging by reviewing the SQLAlchemy echo output during execution.</p>"},{"location":"autodoc_src_backend_main_py_2025-05-31T15-57-31/","title":"autodoc src backend main py 2025 05 31T15 57 31","text":""},{"location":"autodoc_src_backend_main_py_2025-05-31T15-57-31/#document-processing-api-documentation","title":"Document Processing API Documentation","text":""},{"location":"autodoc_src_backend_main_py_2025-05-31T15-57-31/#overview","title":"Overview","text":"<p>This Python module implements a FastAPI-based document processing service with AI-powered analysis capabilities. The service provides document management, user authentication, multi-tenancy support, and automated document processing with configurable rules.</p>"},{"location":"autodoc_src_backend_main_py_2025-05-31T15-57-31/#dependencies","title":"Dependencies","text":""},{"location":"autodoc_src_backend_main_py_2025-05-31T15-57-31/#core-framework","title":"Core Framework","text":"<ul> <li>FastAPI: Modern web framework for building APIs</li> <li>Uvicorn: ASGI server for running the FastAPI application</li> <li>SQLAlchemy: SQL toolkit and Object-Relational Mapping (ORM)</li> <li>Pydantic: Data validation using Python type annotations</li> </ul>"},{"location":"autodoc_src_backend_main_py_2025-05-31T15-57-31/#authentication-security","title":"Authentication &amp; Security","text":"<ul> <li>HTTPBearer: HTTP Bearer token authentication scheme</li> <li>Custom Auth Module: Handles token creation, verification, and password management</li> </ul>"},{"location":"autodoc_src_backend_main_py_2025-05-31T15-57-31/#file-system-operations","title":"File &amp; System Operations","text":"<ul> <li>pathlib.Path: Object-oriented filesystem paths</li> <li>os: Operating system interface</li> <li>shutil: High-level file operations</li> <li>logging: Logging facility for Python</li> </ul>"},{"location":"autodoc_src_backend_main_py_2025-05-31T15-57-31/#ai-processing","title":"AI &amp; Processing","text":"<ul> <li>VisionAnalyzer: AI-powered document vision analysis</li> <li>LLMNotConfiguredError: Exception for unconfigured language models</li> <li>TenantExtractor: Automated tenant identification from documents</li> <li>TenantAutoAssigner: Automatic tenant assignment logic</li> <li>DocumentRuleProcessor: Rule-based document processing engine</li> </ul>"},{"location":"autodoc_src_backend_main_py_2025-05-31T15-57-31/#core-components","title":"Core Components","text":""},{"location":"autodoc_src_backend_main_py_2025-05-31T15-57-31/#web-framework-setup","title":"Web Framework Setup","text":"<pre><code>from fastapi import FastAPI, HTTPException, Depends, File, UploadFile, Form, BackgroundTasks, Query\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom fastapi.responses import FileResponse, StreamingResponse\nfrom fastapi.staticfiles import StaticFiles\n</code></pre> <p>Purpose: Establishes the web API framework with support for: - File uploads and downloads - Cross-Origin Resource Sharing (CORS) - Static file serving - Background task processing - Query parameter handling</p>"},{"location":"autodoc_src_backend_main_py_2025-05-31T15-57-31/#database-integration","title":"Database Integration","text":"<pre><code>from database import get_db, init_database\nfrom models import Document, User, Tenant, ProcessingRule\n</code></pre> <p>Components: - <code>get_db()</code>: Database session dependency injection - <code>init_database()</code>: Database initialization function - Models: SQLAlchemy ORM models for core entities</p>"},{"location":"autodoc_src_backend_main_py_2025-05-31T15-57-31/#data-schemas","title":"Data Schemas","text":"<pre><code>from schemas import (\n    DocumentCreate, DocumentUpdate, DocumentResponse,\n    UserCreate, UserResponse,\n    TenantCreate, TenantUpdate, TenantResponse,\n    ProcessingRuleCreate, ProcessingRuleUpdate, ProcessingRuleResponse\n)\n</code></pre> <p>Purpose: Pydantic schemas for request/response validation and serialization: - Document Schemas: Handle document CRUD operations - User Schemas: Manage user registration and profiles - Tenant Schemas: Multi-tenant organization management - Processing Rule Schemas: Configurable document processing rules</p>"},{"location":"autodoc_src_backend_main_py_2025-05-31T15-57-31/#authentication-system","title":"Authentication System","text":"<pre><code>from auth import create_access_token, verify_token, hash_password, verify_password, get_current_user\n</code></pre> <p>Features: - JWT token creation and verification - Password hashing and validation - Current user identification from requests - Secure authentication flow</p>"},{"location":"autodoc_src_backend_main_py_2025-05-31T15-57-31/#service-layer","title":"Service Layer","text":"<pre><code>from document_service import DocumentService\nfrom utils import save_uploaded_file, cleanup_temp_files\nfrom rule_repository import RuleRepository\n</code></pre> <p>Components: - DocumentService: Business logic for document operations - Utility Functions: File handling and cleanup operations - RuleRepository: Data access layer for processing rules</p>"},{"location":"autodoc_src_backend_main_py_2025-05-31T15-57-31/#ai-processing-pipeline","title":"AI Processing Pipeline","text":"<pre><code>from vision_ai import VisionAnalyzer, LLMNotConfiguredError\nfrom tenant_extractor import TenantExtractor\nfrom tenant_auto_assigner import TenantAutoAssigner\nfrom document_rule_processor import DocumentRuleProcessor\n</code></pre> <p>Capabilities: - Vision Analysis: Extract text and insights from document images - Tenant Extraction: Automatically identify document ownership - Auto-Assignment: Intelligent tenant assignment based on content - Rule Processing: Apply custom processing rules to documents - Error Handling: Graceful handling of AI service configuration issues</p>"},{"location":"autodoc_src_backend_main_py_2025-05-31T15-57-31/#version-management","title":"Version Management","text":"<pre><code>from version import get_version, get_release_info, get_version_history\n</code></pre> <p>Functions: - <code>get_version()</code>: Current application version - <code>get_release_info()</code>: Detailed release information - <code>get_version_history()</code>: Version change history</p>"},{"location":"autodoc_src_backend_main_py_2025-05-31T15-57-31/#architecture-pattern","title":"Architecture Pattern","text":"<p>This module follows a layered architecture pattern:</p> <ol> <li>Presentation Layer: FastAPI routes and middleware</li> <li>Authentication Layer: Security and user management</li> <li>Service Layer: Business logic and orchestration</li> <li>Data Access Layer: Database models and repositories</li> <li>AI Processing Layer: Document analysis and automation</li> <li>Utilities Layer: File operations and system utilities</li> </ol>"},{"location":"autodoc_src_backend_main_py_2025-05-31T15-57-31/#key-features","title":"Key Features","text":"<ul> <li>\ud83d\udd10 Secure Authentication: JWT-based authentication with password hashing</li> <li>\ud83d\udcc4 Document Management: Upload, process, and retrieve documents</li> <li>\ud83c\udfe2 Multi-Tenancy: Organization-based data isolation</li> <li>\ud83e\udd16 AI-Powered Analysis: Automated document processing with vision AI</li> <li>\u2699\ufe0f Configurable Rules: Custom processing rules per tenant</li> <li>\ud83d\udcca Background Processing: Asynchronous document processing</li> <li>\ud83c\udf10 CORS Support: Cross-origin request handling</li> <li>\ud83d\udcc1 File Management: Secure file upload and storage</li> <li>\ud83d\udcc8 Version Tracking: Application version management</li> </ul>"},{"location":"autodoc_src_backend_main_py_2025-05-31T15-57-31/#error-handling","title":"Error Handling","text":"<p>The system includes comprehensive error handling: - <code>HTTPException</code>: Standard HTTP error responses - <code>LLMNotConfiguredError</code>: AI service configuration errors - Database connection and transaction error handling - File operation error management</p>"},{"location":"autodoc_src_backend_main_py_2025-05-31T15-57-31/#usage-context","title":"Usage Context","text":"<p>This module serves as the main entry point for a document processing API that can be used for: - Enterprise document management systems - Automated invoice processing - Multi-tenant SaaS applications - AI-powered document analysis services - Compliance and audit document processing</p>"},{"location":"autodoc_src_backend_main_py_2025-06-01T06-18-03/","title":"autodoc src backend main py 2025 06 01T06 18 03","text":""},{"location":"autodoc_src_backend_main_py_2025-06-01T06-18-03/#api-documentation","title":"API Documentation","text":""},{"location":"autodoc_src_backend_main_py_2025-06-01T06-18-03/#overview","title":"Overview","text":"<p>This is a FastAPI-based document management and processing system that provides RESTful endpoints for handling documents, users, tenants, and processing rules. The application includes AI-powered document analysis, multi-tenant support, and automated document processing capabilities.</p>"},{"location":"autodoc_src_backend_main_py_2025-06-01T06-18-03/#dependencies","title":"Dependencies","text":""},{"location":"autodoc_src_backend_main_py_2025-06-01T06-18-03/#core-framework","title":"Core Framework","text":"<ul> <li>FastAPI: Modern, fast web framework for building APIs</li> <li>Uvicorn: ASGI web server implementation</li> </ul>"},{"location":"autodoc_src_backend_main_py_2025-06-01T06-18-03/#database-orm","title":"Database &amp; ORM","text":"<ul> <li>SQLAlchemy: SQL toolkit and Object-Relational Mapping (ORM) library</li> <li>Pydantic: Data validation using Python type annotations</li> </ul>"},{"location":"autodoc_src_backend_main_py_2025-06-01T06-18-03/#authentication-security","title":"Authentication &amp; Security","text":"<ul> <li>HTTPBearer: HTTP Bearer token authentication scheme</li> <li>JWT: JSON Web Token implementation for secure authentication</li> </ul>"},{"location":"autodoc_src_backend_main_py_2025-06-01T06-18-03/#file-handling-storage","title":"File Handling &amp; Storage","text":"<ul> <li>pathlib: Object-oriented filesystem paths</li> <li>shutil: High-level file operations</li> <li>os: Operating system interface</li> </ul>"},{"location":"autodoc_src_backend_main_py_2025-06-01T06-18-03/#ai-processing","title":"AI &amp; Processing","text":"<ul> <li>Vision AI: Custom vision analysis module for document processing</li> <li>LLM Integration: Large Language Model integration for intelligent document analysis</li> </ul>"},{"location":"autodoc_src_backend_main_py_2025-06-01T06-18-03/#utilities","title":"Utilities","text":"<ul> <li>logging: Python logging facility</li> <li>contextlib: Utilities for common tasks involving the <code>with</code> statement</li> <li>typing: Support for type hints</li> </ul>"},{"location":"autodoc_src_backend_main_py_2025-06-01T06-18-03/#application-structure","title":"Application Structure","text":""},{"location":"autodoc_src_backend_main_py_2025-06-01T06-18-03/#core-components","title":"Core Components","text":""},{"location":"autodoc_src_backend_main_py_2025-06-01T06-18-03/#database-layer","title":"Database Layer","text":"<ul> <li><code>database.py</code>: Database connection and session management</li> <li><code>models.py</code>: SQLAlchemy ORM models for data entities</li> <li><code>schemas.py</code>: Pydantic models for request/response validation</li> </ul>"},{"location":"autodoc_src_backend_main_py_2025-06-01T06-18-03/#authentication-system","title":"Authentication System","text":"<ul> <li><code>auth.py</code>: JWT token management, password hashing, and user authentication</li> <li>Implements secure user authentication with Bearer token support</li> </ul>"},{"location":"autodoc_src_backend_main_py_2025-06-01T06-18-03/#document-management","title":"Document Management","text":"<ul> <li><code>document_service.py</code>: Core document processing business logic</li> <li><code>utils.py</code>: File handling utilities and temporary file cleanup</li> <li><code>vision_ai.py</code>: AI-powered document analysis and vision processing</li> </ul>"},{"location":"autodoc_src_backend_main_py_2025-06-01T06-18-03/#multi-tenant-architecture","title":"Multi-Tenant Architecture","text":"<ul> <li><code>tenant_extractor.py</code>: Extract tenant information from documents</li> <li><code>tenant_auto_assigner.py</code>: Automatically assign documents to appropriate tenants</li> </ul>"},{"location":"autodoc_src_backend_main_py_2025-06-01T06-18-03/#rule-processing-engine","title":"Rule Processing Engine","text":"<ul> <li><code>document_rule_processor.py</code>: Apply processing rules to documents</li> <li><code>rule_repository.py</code>: Manage and retrieve processing rules</li> <li><code>processing_rules.py</code>: Define and validate document processing rules</li> </ul>"},{"location":"autodoc_src_backend_main_py_2025-06-01T06-18-03/#version-management","title":"Version Management","text":"<ul> <li><code>version.py</code>: Application version information and release history</li> </ul>"},{"location":"autodoc_src_backend_main_py_2025-06-01T06-18-03/#api-features","title":"API Features","text":""},{"location":"autodoc_src_backend_main_py_2025-06-01T06-18-03/#cors-support","title":"CORS Support","text":"<p>Cross-Origin Resource Sharing (CORS) middleware enabled for web application integration.</p>"},{"location":"autodoc_src_backend_main_py_2025-06-01T06-18-03/#static-file-serving","title":"Static File Serving","text":"<p>Built-in static file serving capabilities for document delivery and web assets.</p>"},{"location":"autodoc_src_backend_main_py_2025-06-01T06-18-03/#background-task-processing","title":"Background Task Processing","text":"<p>Asynchronous background task processing for long-running operations like document analysis.</p>"},{"location":"autodoc_src_backend_main_py_2025-06-01T06-18-03/#streaming-responses","title":"Streaming Responses","text":"<p>Support for streaming large files and real-time data delivery.</p>"},{"location":"autodoc_src_backend_main_py_2025-06-01T06-18-03/#data-models","title":"Data Models","text":""},{"location":"autodoc_src_backend_main_py_2025-06-01T06-18-03/#core-entities","title":"Core Entities","text":"<ul> <li>Document: Represents uploaded documents with metadata and processing status</li> <li>User: System users with authentication credentials and permissions</li> <li>Tenant: Multi-tenant organization management</li> <li>ProcessingRule: Configurable rules for automated document processing</li> </ul>"},{"location":"autodoc_src_backend_main_py_2025-06-01T06-18-03/#schema-validation","title":"Schema Validation","text":"<ul> <li>Create Schemas: Validation for entity creation requests</li> <li>Update Schemas: Validation for entity modification requests</li> <li>Response Schemas: Standardized API response formats</li> </ul>"},{"location":"autodoc_src_backend_main_py_2025-06-01T06-18-03/#error-handling","title":"Error Handling","text":""},{"location":"autodoc_src_backend_main_py_2025-06-01T06-18-03/#custom-exceptions","title":"Custom Exceptions","text":"<ul> <li>HTTPException: Standard HTTP error responses</li> <li>LLMNotConfiguredError: Specific error for AI service configuration issues</li> </ul>"},{"location":"autodoc_src_backend_main_py_2025-06-01T06-18-03/#file-operations","title":"File Operations","text":"<ul> <li>Automatic cleanup of temporary files</li> <li>Graceful handling of file upload errors</li> <li>Validation of file types and sizes</li> </ul>"},{"location":"autodoc_src_backend_main_py_2025-06-01T06-18-03/#security-features","title":"Security Features","text":""},{"location":"autodoc_src_backend_main_py_2025-06-01T06-18-03/#authentication","title":"Authentication","text":"<ul> <li>JWT-based authentication system</li> <li>Secure password hashing using industry-standard algorithms</li> <li>Token verification and refresh capabilities</li> </ul>"},{"location":"autodoc_src_backend_main_py_2025-06-01T06-18-03/#authorization","title":"Authorization","text":"<ul> <li>Role-based access control</li> <li>Tenant-based data isolation</li> <li>Secure file access controls</li> </ul>"},{"location":"autodoc_src_backend_main_py_2025-06-01T06-18-03/#deployment","title":"Deployment","text":"<p>The application uses Uvicorn as the ASGI server for production deployment, providing: - High performance asynchronous request handling - WebSocket support - Production-ready server capabilities</p>"},{"location":"autodoc_src_backend_main_py_2025-06-01T06-18-03/#usage-notes","title":"Usage Notes","text":"<p>This system is designed for enterprise document management with the following key capabilities:</p> <ol> <li>Automated Document Processing: AI-powered analysis and categorization</li> <li>Multi-Tenant Support: Isolated data and processing per organization</li> <li>Rule-Based Processing: Configurable business logic for document handling</li> <li>Secure Authentication: Enterprise-grade security features</li> <li>Scalable Architecture: Asynchronous processing and background tasks</li> </ol> <p>For specific API endpoint documentation, refer to the FastAPI automatic documentation available at <code>/docs</code> when the application is running.</p>"},{"location":"autodoc_src_backend_run_tests_py_2025-05-31T15-56-49/","title":"autodoc src backend run tests py 2025 05 31T15 56 49","text":""},{"location":"autodoc_src_backend_run_tests_py_2025-05-31T15-56-49/#test-runner-documentation","title":"Test Runner Documentation","text":""},{"location":"autodoc_src_backend_run_tests_py_2025-05-31T15-56-49/#overview","title":"Overview","text":"<p>This module provides a test runner specifically designed for executing 137Docs LLM integration tests. It configures the testing environment and runs pytest with appropriate parameters for asynchronous LLM testing.</p>"},{"location":"autodoc_src_backend_run_tests_py_2025-05-31T15-56-49/#module-information","title":"Module Information","text":"<ul> <li>File: <code>test_runner.py</code></li> <li>Purpose: Execute LLM integration tests with proper environment configuration</li> <li>Dependencies: <code>pytest</code>, <code>pytest-asyncio</code>, <code>pytest-mock</code></li> </ul>"},{"location":"autodoc_src_backend_run_tests_py_2025-05-31T15-56-49/#functions","title":"Functions","text":""},{"location":"autodoc_src_backend_run_tests_py_2025-05-31T15-56-49/#run_tests","title":"<code>run_tests()</code>","text":"<p>Executes the LLM integration tests with proper environment setup and configuration.</p> <p>Returns: - <code>int</code>: Exit code (0 for success, non-zero for failure)</p> <p>Behavior: 1. Sets up testing environment variables 2. Configures in-memory SQLite database for testing 3. Runs pytest with specific parameters for LLM tests 4. Provides user-friendly output with status indicators</p> <p>Environment Variables Set: - <code>TESTING</code>: Set to <code>'true'</code> to indicate test mode - <code>DATABASE_URL</code>: Set to <code>'sqlite+aiosqlite:///:memory:'</code> for in-memory testing database</p> <p>Pytest Configuration: - Target file: <code>tests/test_llm_simple.py</code> - Verbose output (<code>-v</code>) - Short traceback format (<code>--tb=short</code>) - Auto asyncio mode (<code>--asyncio-mode=auto</code>) - Show print statements (<code>-s</code>)</p> <p>Exception Handling: - <code>subprocess.CalledProcessError</code>: Captures test failures and returns appropriate exit code - <code>FileNotFoundError</code>: Handles missing pytest installation with helpful error message</p>"},{"location":"autodoc_src_backend_run_tests_py_2025-05-31T15-56-49/#usage","title":"Usage","text":""},{"location":"autodoc_src_backend_run_tests_py_2025-05-31T15-56-49/#command-line","title":"Command Line","text":"<pre><code>python test_runner.py\n</code></pre>"},{"location":"autodoc_src_backend_run_tests_py_2025-05-31T15-56-49/#as-a-module","title":"As a Module","text":"<pre><code>from test_runner import run_tests\n\nexit_code = run_tests()\nif exit_code == 0:\n    print(\"Tests passed successfully\")\nelse:\n    print(f\"Tests failed with code {exit_code}\")\n</code></pre>"},{"location":"autodoc_src_backend_run_tests_py_2025-05-31T15-56-49/#prerequisites","title":"Prerequisites","text":"<p>Ensure the following packages are installed:</p> <pre><code>pip install pytest pytest-asyncio pytest-mock\n</code></pre>"},{"location":"autodoc_src_backend_run_tests_py_2025-05-31T15-56-49/#output-examples","title":"Output Examples","text":""},{"location":"autodoc_src_backend_run_tests_py_2025-05-31T15-56-49/#successful-test-run","title":"Successful Test Run","text":"<pre><code>\ud83e\uddea Running 137Docs LLM Integration Tests\n==================================================\n[pytest output...]\n\u2705 All LLM integration tests passed!\n</code></pre>"},{"location":"autodoc_src_backend_run_tests_py_2025-05-31T15-56-49/#failed-test-run","title":"Failed Test Run","text":"<pre><code>\ud83e\uddea Running 137Docs LLM Integration Tests\n==================================================\n[pytest output...]\n\u274c Tests failed with exit code 1\n</code></pre>"},{"location":"autodoc_src_backend_run_tests_py_2025-05-31T15-56-49/#missing-dependencies","title":"Missing Dependencies","text":"<pre><code>\ud83e\uddea Running 137Docs LLM Integration Tests\n==================================================\n\u274c pytest not found. Please install test dependencies:\npip install pytest pytest-asyncio pytest-mock\n</code></pre>"},{"location":"autodoc_src_backend_run_tests_py_2025-05-31T15-56-49/#integration-notes","title":"Integration Notes","text":"<ul> <li>Uses in-memory SQLite database to avoid test data persistence</li> <li>Configured for async/await testing patterns common in LLM integrations</li> <li>Designed to run as part of CI/CD pipelines with proper exit codes</li> <li>Environment isolation ensures tests don't interfere with production settings</li> </ul>"},{"location":"autodoc_src_backend_run_tests_py_2025-05-31T15-56-49/#exit-codes","title":"Exit Codes","text":"Code Description 0 All tests passed successfully 1 Missing pytest dependencies &gt;1 Test failures (code matches pytest exit code)"},{"location":"autodoc_src_backend_run_tests_py_2025-06-01T06-17-12/","title":"autodoc src backend run tests py 2025 06 01T06 17 12","text":""},{"location":"autodoc_src_backend_run_tests_py_2025-06-01T06-17-12/#llm-integration-test-runner","title":"LLM Integration Test Runner","text":""},{"location":"autodoc_src_backend_run_tests_py_2025-06-01T06-17-12/#overview","title":"Overview","text":"<p>The <code>run_llm_tests.py</code> module provides a test runner specifically designed for executing 137Docs LLM (Large Language Model) integration tests. This utility sets up the necessary testing environment, configures database connections, and executes the test suite with appropriate pytest configurations.</p>"},{"location":"autodoc_src_backend_run_tests_py_2025-06-01T06-17-12/#features","title":"Features","text":"<ul> <li>Automated test environment setup</li> <li>In-memory database configuration for isolated testing</li> <li>Comprehensive pytest configuration with async support</li> <li>Clear visual feedback and error reporting</li> <li>Dependency validation and helpful error messages</li> </ul>"},{"location":"autodoc_src_backend_run_tests_py_2025-06-01T06-17-12/#usage","title":"Usage","text":""},{"location":"autodoc_src_backend_run_tests_py_2025-06-01T06-17-12/#command-line-execution","title":"Command Line Execution","text":"<pre><code>python run_llm_tests.py\n</code></pre> <p>Or make the script executable and run directly:</p> <pre><code>chmod +x run_llm_tests.py\n./run_llm_tests.py\n</code></pre>"},{"location":"autodoc_src_backend_run_tests_py_2025-06-01T06-17-12/#programmatic-usage","title":"Programmatic Usage","text":"<pre><code>from run_llm_tests import run_tests\n\n# Execute tests and get return code\nexit_code = run_tests()\nif exit_code == 0:\n    print(\"Tests completed successfully\")\nelse:\n    print(f\"Tests failed with code: {exit_code}\")\n</code></pre>"},{"location":"autodoc_src_backend_run_tests_py_2025-06-01T06-17-12/#environment-configuration","title":"Environment Configuration","text":"<p>The test runner automatically configures the following environment variables:</p> Variable Value Purpose <code>TESTING</code> <code>true</code> Indicates the application is running in test mode <code>DATABASE_URL</code> <code>sqlite+aiosqlite:///:memory:</code> Configures an in-memory SQLite database for testing"},{"location":"autodoc_src_backend_run_tests_py_2025-06-01T06-17-12/#pytest-configuration","title":"Pytest Configuration","text":"<p>The runner executes pytest with the following parameters:</p> <ul> <li>Target: <code>tests/test_llm_simple.py</code> - Specific test file for LLM functionality</li> <li>Verbosity: <code>-v</code> - Verbose output showing individual test results</li> <li>Traceback: <code>--tb=short</code> - Concise error tracebacks</li> <li>Async Mode: <code>--asyncio-mode=auto</code> - Automatic async test detection</li> <li>Output: <code>-s</code> - Preserve print statements in test output</li> </ul>"},{"location":"autodoc_src_backend_run_tests_py_2025-06-01T06-17-12/#functions","title":"Functions","text":""},{"location":"autodoc_src_backend_run_tests_py_2025-06-01T06-17-12/#run_tests","title":"<code>run_tests()</code>","text":"<p>Executes the LLM integration test suite with proper environment setup.</p> <p>Returns: - <code>int</code>: Exit code (0 for success, non-zero for failure)</p> <p>Behavior: 1. Sets up testing environment variables 2. Constructs pytest command with appropriate flags 3. Executes the test suite using subprocess 4. Provides visual feedback with emojis and status messages 5. Returns appropriate exit codes for integration with CI/CD systems</p> <p>Error Handling: - subprocess.CalledProcessError: Captures test failures and returns the pytest exit code - FileNotFoundError: Detects missing pytest installation and provides installation instructions</p>"},{"location":"autodoc_src_backend_run_tests_py_2025-06-01T06-17-12/#dependencies","title":"Dependencies","text":""},{"location":"autodoc_src_backend_run_tests_py_2025-06-01T06-17-12/#required-dependencies","title":"Required Dependencies","text":"<ul> <li>Python 3.6+: Required for f-string support and subprocess features</li> <li>pytest: Test framework for executing the test suite</li> <li>pytest-asyncio: Plugin for testing async functions</li> <li>pytest-mock: Mocking framework for tests (recommended)</li> </ul>"},{"location":"autodoc_src_backend_run_tests_py_2025-06-01T06-17-12/#installation","title":"Installation","text":"<pre><code>pip install pytest pytest-asyncio pytest-mock\n</code></pre>"},{"location":"autodoc_src_backend_run_tests_py_2025-06-01T06-17-12/#exit-codes","title":"Exit Codes","text":"Code Meaning 0 All tests passed successfully 1 pytest not found or installation error &gt;1 Test failures (returned from pytest)"},{"location":"autodoc_src_backend_run_tests_py_2025-06-01T06-17-12/#example-output","title":"Example Output","text":""},{"location":"autodoc_src_backend_run_tests_py_2025-06-01T06-17-12/#successful-test-run","title":"Successful Test Run","text":"<pre><code>\ud83e\uddea Running 137Docs LLM Integration Tests\n==================================================\n========================= test session starts =========================\ncollected 5 items\n\ntests/test_llm_simple.py::test_llm_connection PASSED\ntests/test_llm_simple.py::test_llm_response PASSED\ntests/test_llm_simple.py::test_llm_error_handling PASSED\ntests/test_llm_simple.py::test_llm_async_operations PASSED\ntests/test_llm_simple.py::test_llm_integration PASSED\n\n========================= 5 passed in 2.34s =========================\n\n\u2705 All LLM integration tests passed!\n</code></pre>"},{"location":"autodoc_src_backend_run_tests_py_2025-06-01T06-17-12/#failed-test-run","title":"Failed Test Run","text":"<pre><code>\ud83e\uddea Running 137Docs LLM Integration Tests\n==================================================\n========================= FAILURES =========================\n_________________ test_llm_connection _________________\n[test failure details]\n\n\u274c Tests failed with exit code 1\n</code></pre>"},{"location":"autodoc_src_backend_run_tests_py_2025-06-01T06-17-12/#integration-with-cicd","title":"Integration with CI/CD","text":"<p>The test runner is designed to work seamlessly with continuous integration systems:</p> <pre><code># Example GitHub Actions workflow\n- name: Run LLM Integration Tests\n  run: python run_llm_tests.py\n\n- name: Check test results\n  if: ${{ failure() }}\n  run: echo \"LLM integration tests failed\"\n</code></pre>"},{"location":"autodoc_src_backend_run_tests_py_2025-06-01T06-17-12/#best-practices","title":"Best Practices","text":"<ol> <li>Isolation: Each test run uses a fresh in-memory database</li> <li>Environment: Tests run in a controlled environment separate from development/production</li> <li>Feedback: Clear visual indicators help identify test status quickly</li> <li>Error Handling: Comprehensive error messages guide users toward solutions</li> <li>Exit Codes: Proper exit codes enable integration with automated systems</li> </ol>"},{"location":"autodoc_src_backend_tests_conftest_py_2025-05-31T16-10-27/","title":"autodoc src backend tests conftest py 2025 05 31T16 10 27","text":""},{"location":"autodoc_src_backend_tests_conftest_py_2025-05-31T16-10-27/#pytest-configuration-and-fixtures-documentation","title":"Pytest Configuration and Fixtures Documentation","text":""},{"location":"autodoc_src_backend_tests_conftest_py_2025-05-31T16-10-27/#overview","title":"Overview","text":"<p>This module provides pytest configuration and fixtures for testing the 137Docs backend application. It sets up test database connections, HTTP clients, and mock data to facilitate comprehensive testing of the application's functionality.</p>"},{"location":"autodoc_src_backend_tests_conftest_py_2025-05-31T16-10-27/#configuration","title":"Configuration","text":""},{"location":"autodoc_src_backend_tests_conftest_py_2025-05-31T16-10-27/#test-database","title":"Test Database","text":"<p>The test suite uses an in-memory SQLite database for isolated testing:</p> <pre><code>TEST_DATABASE_URL = \"sqlite+aiosqlite:///:memory:\"\n</code></pre> <p>This ensures tests run quickly and don't interfere with production data.</p>"},{"location":"autodoc_src_backend_tests_conftest_py_2025-05-31T16-10-27/#fixtures","title":"Fixtures","text":""},{"location":"autodoc_src_backend_tests_conftest_py_2025-05-31T16-10-27/#core-testing-infrastructure","title":"Core Testing Infrastructure","text":""},{"location":"autodoc_src_backend_tests_conftest_py_2025-05-31T16-10-27/#event_loop","title":"<code>event_loop</code>","text":"<ul> <li>Scope: Session</li> <li>Purpose: Creates and manages the default event loop for async test execution</li> <li>Usage: Automatically used by pytest-asyncio for running async tests</li> </ul> <pre><code>@pytest.fixture(scope=\"session\")\ndef event_loop():\n    \"\"\"Create an instance of the default event loop for the test session.\"\"\"\n</code></pre>"},{"location":"autodoc_src_backend_tests_conftest_py_2025-05-31T16-10-27/#test_engine","title":"<code>test_engine</code>","text":"<ul> <li>Scope: Session</li> <li>Purpose: Creates and configures the test database engine</li> <li>Features:</li> <li>Uses in-memory SQLite database</li> <li>Automatically creates all database tables</li> <li>Handles cleanup on teardown</li> </ul> <pre><code>@pytest.fixture(scope=\"session\")\nasync def test_engine():\n    \"\"\"Create test database engine.\"\"\"\n</code></pre>"},{"location":"autodoc_src_backend_tests_conftest_py_2025-05-31T16-10-27/#test_session","title":"<code>test_session</code>","text":"<ul> <li>Scope: Function</li> <li>Purpose: Provides isolated database sessions for each test</li> <li>Features:</li> <li>Automatic rollback after each test</li> <li>Prevents test data contamination</li> </ul> <pre><code>@pytest.fixture\nasync def test_session(test_engine):\n    \"\"\"Create test database session.\"\"\"\n</code></pre>"},{"location":"autodoc_src_backend_tests_conftest_py_2025-05-31T16-10-27/#test_client","title":"<code>test_client</code>","text":"<ul> <li>Scope: Function</li> <li>Purpose: Creates HTTP client for API testing</li> <li>Features:</li> <li>Overrides database dependency with test session</li> <li>Provides isolated test environment</li> <li>Automatic cleanup of dependency overrides</li> </ul> <pre><code>@pytest.fixture\nasync def test_client(test_session):\n    \"\"\"Create test HTTP client with database override.\"\"\"\n</code></pre>"},{"location":"autodoc_src_backend_tests_conftest_py_2025-05-31T16-10-27/#mock-data-and-configuration","title":"Mock Data and Configuration","text":""},{"location":"autodoc_src_backend_tests_conftest_py_2025-05-31T16-10-27/#mock_llm_config","title":"<code>mock_llm_config</code>","text":"<ul> <li>Scope: Function</li> <li>Purpose: Provides mock LLM configuration for testing AI features</li> <li>Configuration:</li> <li>Provider: Local (Ollama)</li> <li>Multiple model types for different tasks</li> <li>Confidence thresholds and retry settings</li> </ul> <pre><code>@pytest.fixture\ndef mock_llm_config():\n    \"\"\"Mock LLM configuration for testing.\"\"\"\n</code></pre> <p>Configuration Parameters: | Parameter | Value | Description | |-----------|--------|-------------| | <code>provider</code> | <code>'local'</code> | LLM provider type | | <code>api_url</code> | <code>'http://localhost:11434'</code> | Ollama API endpoint | | <code>model_tagger</code> | <code>'phi3'</code> | Model for document tagging | | <code>model_enricher</code> | <code>'llama3'</code> | Model for content enrichment | | <code>model_analytics</code> | <code>'llama3'</code> | Model for analytics | | <code>model_responder</code> | <code>'gpt-4'</code> | Model for responses | | <code>min_confidence_tagging</code> | <code>0.7</code> | Minimum confidence for tagging | | <code>min_confidence_entity</code> | <code>0.8</code> | Minimum confidence for entities |</p>"},{"location":"autodoc_src_backend_tests_conftest_py_2025-05-31T16-10-27/#sample_document_text","title":"<code>sample_document_text</code>","text":"<ul> <li>Scope: Function</li> <li>Purpose: Provides realistic document content for testing</li> <li>Content: Sample invoice with typical business document structure</li> </ul> <pre><code>@pytest.fixture\ndef sample_document_text():\n    \"\"\"Sample document text for testing.\"\"\"\n</code></pre> <p>Sample Content Includes: - Invoice header and numbering - Business addresses - Financial data (amounts, taxes, totals) - Payment terms - Dates and due dates</p>"},{"location":"autodoc_src_backend_tests_conftest_py_2025-05-31T16-10-27/#temp_file","title":"<code>temp_file</code>","text":"<ul> <li>Scope: Function</li> <li>Purpose: Creates temporary files for file upload testing</li> <li>Features:</li> <li>Automatic cleanup after test completion</li> <li>Configurable content and file extension</li> </ul> <pre><code>@pytest.fixture\ndef temp_file():\n    \"\"\"Create a temporary file for testing.\"\"\"\n</code></pre>"},{"location":"autodoc_src_backend_tests_conftest_py_2025-05-31T16-10-27/#usage-examples","title":"Usage Examples","text":""},{"location":"autodoc_src_backend_tests_conftest_py_2025-05-31T16-10-27/#testing-api-endpoints","title":"Testing API Endpoints","text":"<pre><code>async def test_upload_document(test_client):\n    \"\"\"Test document upload endpoint.\"\"\"\n    response = await test_client.post(\"/api/documents/upload\", \n                                    files={\"file\": (\"test.txt\", \"content\")})\n    assert response.status_code == 200\n</code></pre>"},{"location":"autodoc_src_backend_tests_conftest_py_2025-05-31T16-10-27/#testing-database-operations","title":"Testing Database Operations","text":"<pre><code>async def test_create_document(test_session, sample_document_text):\n    \"\"\"Test document creation in database.\"\"\"\n    document = Document(content=sample_document_text)\n    test_session.add(document)\n    await test_session.commit()\n    assert document.id is not None\n</code></pre>"},{"location":"autodoc_src_backend_tests_conftest_py_2025-05-31T16-10-27/#testing-with-mock-configuration","title":"Testing with Mock Configuration","text":"<pre><code>def test_llm_processing(mock_llm_config, sample_document_text):\n    \"\"\"Test LLM processing with mock configuration.\"\"\"\n    processor = LLMProcessor(config=mock_llm_config)\n    result = processor.process(sample_document_text)\n    assert result is not None\n</code></pre>"},{"location":"autodoc_src_backend_tests_conftest_py_2025-05-31T16-10-27/#dependencies","title":"Dependencies","text":"<ul> <li>pytest: Testing framework</li> <li>pytest-asyncio: Async test support</li> <li>SQLAlchemy: Database ORM with async support</li> <li>httpx: Async HTTP client for API testing</li> <li>tempfile: Temporary file creation</li> <li>os: File system operations</li> </ul>"},{"location":"autodoc_src_backend_tests_conftest_py_2025-05-31T16-10-27/#best-practices","title":"Best Practices","text":"<ol> <li>Isolation: Each test gets fresh database session and HTTP client</li> <li>Cleanup: Automatic cleanup of resources and temporary files</li> <li>Realistic Data: Sample data reflects real-world document structures</li> <li>Configuration: Mock configurations prevent external API calls during testing</li> <li>Performance: In-memory database ensures fast test execution</li> </ol>"},{"location":"autodoc_src_backend_tests_conftest_py_2025-05-31T16-10-27/#notes","title":"Notes","text":"<ul> <li>Tests run in isolation with automatic rollback</li> <li>Temporary files are automatically cleaned up</li> <li>Mock LLM configuration prevents external API dependencies</li> <li>Session-scoped fixtures optimize performance for test suites</li> </ul>"},{"location":"autodoc_src_backend_tests_conftest_py_2025-06-01T06-30-52/","title":"autodoc src backend tests conftest py 2025 06 01T06 30 52","text":""},{"location":"autodoc_src_backend_tests_conftest_py_2025-06-01T06-30-52/#pytest-configuration-and-fixtures-documentation","title":"Pytest Configuration and Fixtures Documentation","text":""},{"location":"autodoc_src_backend_tests_conftest_py_2025-06-01T06-30-52/#overview","title":"Overview","text":"<p>This module provides comprehensive pytest configuration and fixtures for testing the 137Docs backend application. It sets up test database connections, HTTP clients, and mock data to support isolated and reliable testing.</p>"},{"location":"autodoc_src_backend_tests_conftest_py_2025-06-01T06-30-52/#configuration","title":"Configuration","text":""},{"location":"autodoc_src_backend_tests_conftest_py_2025-06-01T06-30-52/#test-database","title":"Test Database","text":"<ul> <li>Database URL: <code>sqlite+aiosqlite:///:memory:</code></li> <li>Type: In-memory SQLite database for fast, isolated tests</li> <li>Engine: Async SQLAlchemy engine with echo disabled</li> </ul>"},{"location":"autodoc_src_backend_tests_conftest_py_2025-06-01T06-30-52/#fixtures","title":"Fixtures","text":""},{"location":"autodoc_src_backend_tests_conftest_py_2025-06-01T06-30-52/#session-management","title":"Session Management","text":""},{"location":"autodoc_src_backend_tests_conftest_py_2025-06-01T06-30-52/#event_loop","title":"<code>event_loop</code>","text":"<p>Scope: <code>session</code></p> <p>Creates and manages the default event loop for the entire test session.</p> <pre><code>@pytest.fixture(scope=\"session\")\ndef event_loop():\n</code></pre> <p>Returns: <code>asyncio.AbstractEventLoop</code></p> <p>Lifecycle: - Creates new event loop at session start - Yields loop for test execution - Closes loop after session completion</p>"},{"location":"autodoc_src_backend_tests_conftest_py_2025-06-01T06-30-52/#test_engine","title":"<code>test_engine</code>","text":"<p>Scope: <code>session</code></p> <p>Provides an async SQLAlchemy engine configured for testing.</p> <pre><code>@pytest.fixture(scope=\"session\")\nasync def test_engine():\n</code></pre> <p>Returns: <code>sqlalchemy.ext.asyncio.AsyncEngine</code></p> <p>Features: - Uses in-memory SQLite for speed and isolation - Automatically creates all database tables - Properly disposes of engine after tests</p> <p>Configuration: - <code>echo=False</code>: Disables SQL query logging - <code>future=True</code>: Enables SQLAlchemy 2.0 style</p>"},{"location":"autodoc_src_backend_tests_conftest_py_2025-06-01T06-30-52/#test_session","title":"<code>test_session</code>","text":"<p>Scope: <code>function</code></p> <p>Creates a fresh database session for each test function.</p> <pre><code>@pytest.fixture\nasync def test_session(test_engine):\n</code></pre> <p>Returns: <code>sqlalchemy.ext.asyncio.AsyncSession</code></p> <p>Dependencies: <code>test_engine</code></p> <p>Isolation Strategy: - Creates new session per test - Rolls back all changes after test completion - Ensures test isolation and clean state</p>"},{"location":"autodoc_src_backend_tests_conftest_py_2025-06-01T06-30-52/#http-client","title":"HTTP Client","text":""},{"location":"autodoc_src_backend_tests_conftest_py_2025-06-01T06-30-52/#test_client","title":"<code>test_client</code>","text":"<p>Scope: <code>function</code></p> <p>Provides an HTTP client for testing API endpoints with database dependency injection.</p> <pre><code>@pytest.fixture\nasync def test_client(test_session):\n</code></pre> <p>Returns: <code>httpx.AsyncClient</code></p> <p>Dependencies: <code>test_session</code></p> <p>Features: - Overrides application database dependency - Base URL: <code>http://test</code> - Automatic cleanup of dependency overrides - Uses test database session for all requests</p> <p>Usage Example: <pre><code>async def test_api_endpoint(test_client):\n    response = await test_client.get(\"/api/documents\")\n    assert response.status_code == 200\n</code></pre></p>"},{"location":"autodoc_src_backend_tests_conftest_py_2025-06-01T06-30-52/#mock-data-and-configuration","title":"Mock Data and Configuration","text":""},{"location":"autodoc_src_backend_tests_conftest_py_2025-06-01T06-30-52/#mock_llm_config","title":"<code>mock_llm_config</code>","text":"<p>Scope: <code>function</code></p> <p>Provides mock LLM (Large Language Model) configuration for testing AI features.</p> <pre><code>@pytest.fixture\ndef mock_llm_config():\n</code></pre> <p>Returns: <code>dict</code></p> <p>Configuration Fields:</p> Field Value Description <code>provider</code> <code>'local'</code> LLM provider type <code>api_url</code> <code>'http://localhost:11434'</code> Local API endpoint <code>api_key</code> <code>''</code> Empty for local provider <code>model_tagger</code> <code>'phi3'</code> Model for document tagging <code>model_enricher</code> <code>'llama3'</code> Model for content enrichment <code>model_analytics</code> <code>'llama3'</code> Model for analytics <code>model_responder</code> <code>'gpt-4'</code> Model for responses <code>enabled</code> <code>True</code> LLM features enabled <code>auto_tagging</code> <code>True</code> Automatic tagging enabled <code>auto_enrichment</code> <code>True</code> Automatic enrichment enabled <code>external_enrichment</code> <code>False</code> External enrichment disabled <code>max_retries</code> <code>3</code> Maximum retry attempts <code>retry_delay</code> <code>300</code> Delay between retries (seconds) <code>batch_size</code> <code>5</code> Processing batch size <code>concurrent_tasks</code> <code>2</code> Maximum concurrent tasks <code>cache_responses</code> <code>True</code> Response caching enabled <code>min_confidence_tagging</code> <code>0.7</code> Minimum confidence for tagging <code>min_confidence_entity</code> <code>0.8</code> Minimum confidence for entities"},{"location":"autodoc_src_backend_tests_conftest_py_2025-06-01T06-30-52/#sample_document_text","title":"<code>sample_document_text</code>","text":"<p>Scope: <code>function</code></p> <p>Provides realistic sample document text for testing document processing features.</p> <pre><code>@pytest.fixture\ndef sample_document_text():\n</code></pre> <p>Returns: <code>str</code></p> <p>Content: Sample invoice document containing: - Invoice header and number - Sender and recipient addresses - Dates and payment terms - Line items with pricing - Tax calculations</p> <p>Usage Example: <pre><code>def test_document_parsing(sample_document_text):\n    result = parse_document(sample_document_text)\n    assert \"INV-2024-001\" in result.invoice_number\n</code></pre></p>"},{"location":"autodoc_src_backend_tests_conftest_py_2025-06-01T06-30-52/#temp_file","title":"<code>temp_file</code>","text":"<p>Scope: <code>function</code></p> <p>Creates a temporary file for testing file operations.</p> <pre><code>@pytest.fixture\ndef temp_file():\n</code></pre> <p>Returns: <code>str</code> (file path)</p> <p>Features: - Creates temporary file with <code>.txt</code> extension - Pre-populated with test content: <code>\"Test document content\"</code> - Automatic cleanup after test completion - Safe deletion with existence check</p> <p>Usage Example: <pre><code>def test_file_upload(temp_file, test_client):\n    with open(temp_file, 'rb') as f:\n        response = await test_client.post(\"/upload\", files={\"file\": f})\n    assert response.status_code == 200\n</code></pre></p>"},{"location":"autodoc_src_backend_tests_conftest_py_2025-06-01T06-30-52/#dependencies","title":"Dependencies","text":""},{"location":"autodoc_src_backend_tests_conftest_py_2025-06-01T06-30-52/#required-packages","title":"Required Packages","text":"<ul> <li><code>pytest</code>: Testing framework</li> <li><code>pytest-asyncio</code>: Async testing support</li> <li><code>sqlalchemy</code>: Database ORM</li> <li><code>httpx</code>: HTTP client for API testing</li> <li><code>aiosqlite</code>: Async SQLite driver</li> </ul>"},{"location":"autodoc_src_backend_tests_conftest_py_2025-06-01T06-30-52/#internal-dependencies","title":"Internal Dependencies","text":"<ul> <li><code>app.main.app</code>: FastAPI application instance</li> <li><code>app.database.get_db</code>: Database dependency</li> <li><code>tests.test_models.Base</code>: Test database models</li> </ul>"},{"location":"autodoc_src_backend_tests_conftest_py_2025-06-01T06-30-52/#usage-patterns","title":"Usage Patterns","text":""},{"location":"autodoc_src_backend_version_py_2025-05-31T15-54-18/","title":"autodoc src backend version py 2025 05 31T15 54 18","text":""},{"location":"autodoc_src_backend_version_py_2025-05-31T15-54-18/#docai-image-version-configuration-module","title":"DocAI-IMAGE Version Configuration Module","text":""},{"location":"autodoc_src_backend_version_py_2025-05-31T15-54-18/#overview","title":"Overview","text":"<p>The version configuration module provides centralized version management and release tracking for the DocAI-IMAGE application. This module maintains version information, release history, and provides utility functions to access version-related data throughout the application.</p>"},{"location":"autodoc_src_backend_version_py_2025-05-31T15-54-18/#module-information","title":"Module Information","text":"<ul> <li>Current Version: 0.92.0</li> <li>Release Date: 2025-05-30</li> <li>Release Name: Document Processing Rule Engine</li> </ul>"},{"location":"autodoc_src_backend_version_py_2025-05-31T15-54-18/#constants","title":"Constants","text":""},{"location":"autodoc_src_backend_version_py_2025-05-31T15-54-18/#version-information","title":"Version Information","text":"Constant Value Description <code>__version__</code> <code>\"0.92.0\"</code> Current application version <code>__release_date__</code> <code>\"2025-05-30\"</code> Current release date <code>__release_name__</code> <code>\"Document Processing Rule Engine\"</code> Current release name"},{"location":"autodoc_src_backend_version_py_2025-05-31T15-54-18/#version-history","title":"Version History","text":"<p>The <code>VERSION_HISTORY</code> constant contains a comprehensive list of all releases, each with the following structure:</p> <ul> <li><code>version</code>: Version number string</li> <li><code>date</code>: Release date (YYYY-MM-DD format)</li> <li><code>name</code>: Release name/title</li> <li><code>description</code>: Brief description of the release</li> <li><code>features</code>: List of user-facing features</li> <li><code>changes</code>: List of technical changes (optional)</li> </ul>"},{"location":"autodoc_src_backend_version_py_2025-05-31T15-54-18/#functions","title":"Functions","text":""},{"location":"autodoc_src_backend_version_py_2025-05-31T15-54-18/#get_version","title":"<code>get_version()</code>","text":"<p>Returns the current version string.</p> <p>Returns: - <code>str</code>: Current version number</p> <p>Example: <pre><code>version = get_version()\nprint(f\"Current version: {version}\")  # Output: Current version: 0.92.0\n</code></pre></p>"},{"location":"autodoc_src_backend_version_py_2025-05-31T15-54-18/#get_release_info","title":"<code>get_release_info()</code>","text":"<p>Returns comprehensive information about the current release.</p> <p>Returns: - <code>dict</code>: Dictionary containing version, date, and name</p> <p>Example: <pre><code>info = get_release_info()\n# Returns: {\n#     \"version\": \"0.92.0\",\n#     \"date\": \"2025-05-30\", \n#     \"name\": \"Document Processing Rule Engine\"\n# }\n</code></pre></p>"},{"location":"autodoc_src_backend_version_py_2025-05-31T15-54-18/#get_version_history","title":"<code>get_version_history()</code>","text":"<p>Returns the complete version history for the application.</p> <p>Returns: - <code>list</code>: List of dictionaries containing release information</p> <p>Example: <pre><code>history = get_version_history()\nfor release in history:\n    print(f\"Version {release['version']}: {release['name']}\")\n</code></pre></p>"},{"location":"autodoc_src_backend_version_py_2025-05-31T15-54-18/#get_latest_features","title":"<code>get_latest_features()</code>","text":"<p>Returns the list of features from the most recent release.</p> <p>Returns: - <code>list</code>: List of feature strings from the latest release</p> <p>Example: <pre><code>features = get_latest_features()\nfor feature in features:\n    print(f\"- {feature}\")\n</code></pre></p>"},{"location":"autodoc_src_backend_version_py_2025-05-31T15-54-18/#get_latest_changes","title":"<code>get_latest_changes()</code>","text":"<p>Returns the list of technical changes from the most recent release.</p> <p>Returns: - <code>list</code>: List of technical change strings from the latest release</p> <p>Example: <pre><code>changes = get_latest_changes()\nfor change in changes:\n    print(f\"- {change}\")\n</code></pre></p>"},{"location":"autodoc_src_backend_version_py_2025-05-31T15-54-18/#recent-release-highlights","title":"Recent Release Highlights","text":""},{"location":"autodoc_src_backend_version_py_2025-05-31T15-54-18/#version-0920-document-processing-rule-engine","title":"Version 0.92.0 - Document Processing Rule Engine","text":"<p>Key Features: - Visual Rule Builder with drag-and-drop interface - Smart Automation for document classification and tenant assignment - Real-time Processing Monitor with live dashboard - Priority-based Rule Execution with comprehensive action support - Rule Analytics and usage statistics tracking</p> <p>Technical Changes: - Added processing_rules table with 13-column schema - Implemented RuleEvaluator for condition processing - Created RuleActionExecutor for automated actions - Built DocumentRuleProcessor for document workflow - Added 8 comprehensive API endpoints for rule management</p>"},{"location":"autodoc_src_backend_version_py_2025-05-31T15-54-18/#usage-examples","title":"Usage Examples","text":""},{"location":"autodoc_src_backend_version_py_2025-05-31T15-54-18/#basic-version-information","title":"Basic Version Information","text":"<pre><code>from version import get_version, get_release_info\n\n# Get current version\ncurrent_version = get_version()\nprint(f\"Running DocAI-IMAGE v{current_version}\")\n\n# Get full release information\nrelease_info = get_release_info()\nprint(f\"Release: {release_info['name']} ({release_info['date']})\")\n</code></pre>"},{"location":"autodoc_src_backend_version_py_2025-05-31T15-54-18/#display-latest-features","title":"Display Latest Features","text":"<pre><code>from version import get_latest_features\n\nfeatures = get_latest_features()\nprint(\"Latest Features:\")\nfor i, feature in enumerate(features, 1):\n    print(f\"{i}. {feature}\")\n</code></pre>"},{"location":"autodoc_src_backend_version_py_2025-05-31T15-54-18/#version-history-report","title":"Version History Report","text":"<pre><code>from version import get_version_history\n\nhistory = get_version_history()\nprint(\"Release History:\")\nfor release in history:\n    print(f\"\\n{release['version']} - {release['name']}\")\n    print(f\"Released: {release['date']}\")\n    print(f\"Description: {release['description']}\")\n</code></pre>"},{"location":"autodoc_src_backend_version_py_2025-05-31T15-54-18/#integration-notes","title":"Integration Notes","text":"<p>This module is designed to be imported and used throughout the DocAI-IMAGE application for:</p> <ul> <li>Application startup version logging</li> <li>About/Help dialog information</li> <li>API version headers</li> <li>Update notifications</li> <li>Feature announcements</li> <li>Release documentation generation</li> </ul> <p>The centralized approach ensures consistent version information across all application components.</p>"},{"location":"autodoc_src_backend_version_py_2025-06-01T06-14-53/","title":"autodoc src backend version py 2025 06 01T06 14 53","text":""},{"location":"autodoc_src_backend_version_py_2025-06-01T06-14-53/#docai-image-version-configuration","title":"DocAI-IMAGE Version Configuration","text":""},{"location":"autodoc_src_backend_version_py_2025-06-01T06-14-53/#overview","title":"Overview","text":"<p>The <code>version.py</code> module manages version information and release history for the DocAI-IMAGE application. It provides a centralized location for tracking application versions, release dates, features, and technical changes across different releases.</p>"},{"location":"autodoc_src_backend_version_py_2025-06-01T06-14-53/#module-information","title":"Module Information","text":"<ul> <li>Current Version: 0.92.0</li> <li>Release Date: 2025-05-30</li> <li>Release Name: Document Processing Rule Engine</li> </ul>"},{"location":"autodoc_src_backend_version_py_2025-06-01T06-14-53/#global-variables","title":"Global Variables","text":""},{"location":"autodoc_src_backend_version_py_2025-06-01T06-14-53/#version-constants","title":"Version Constants","text":"Variable Type Description <code>__version__</code> <code>str</code> Current application version string <code>__release_date__</code> <code>str</code> Current release date in YYYY-MM-DD format <code>__release_name__</code> <code>str</code> Human-readable name for the current release"},{"location":"autodoc_src_backend_version_py_2025-06-01T06-14-53/#version-history","title":"Version History","text":"Variable Type Description <code>VERSION_HISTORY</code> <code>list[dict]</code> Complete chronological history of all application releases"},{"location":"autodoc_src_backend_version_py_2025-06-01T06-14-53/#version_history-structure","title":"VERSION_HISTORY Structure","text":"<p>Each version entry contains the following fields:</p> <pre><code>{\n    \"version\": str,        # Version number (semantic versioning)\n    \"date\": str,           # Release date (YYYY-MM-DD)\n    \"name\": str,           # Release name/title\n    \"description\": str,    # Brief description of the release\n    \"features\": list[str], # List of new features added\n    \"changes\": list[str]   # List of technical changes made (optional)\n}\n</code></pre>"},{"location":"autodoc_src_backend_version_py_2025-06-01T06-14-53/#functions","title":"Functions","text":""},{"location":"autodoc_src_backend_version_py_2025-06-01T06-14-53/#get_version","title":"<code>get_version()</code>","text":"<p>Returns the current version string.</p> <p>Returns: - <code>str</code>: Current version number</p> <p>Example: <pre><code>version = get_version()\nprint(version)  # Output: \"0.92.0\"\n</code></pre></p>"},{"location":"autodoc_src_backend_version_py_2025-06-01T06-14-53/#get_release_info","title":"<code>get_release_info()</code>","text":"<p>Returns comprehensive information about the current release.</p> <p>Returns: - <code>dict</code>: Dictionary containing version, date, and name of current release   - <code>version</code> (str): Current version number   - <code>date</code> (str): Release date   - <code>name</code> (str): Release name</p> <p>Example: <pre><code>info = get_release_info()\n# Returns: {\n#     \"version\": \"0.92.0\",\n#     \"date\": \"2025-05-30\", \n#     \"name\": \"Document Processing Rule Engine\"\n# }\n</code></pre></p>"},{"location":"autodoc_src_backend_version_py_2025-06-01T06-14-53/#get_version_history","title":"<code>get_version_history()</code>","text":"<p>Returns the complete version history of the application.</p> <p>Returns: - <code>list[dict]</code>: Complete VERSION_HISTORY list with all releases</p> <p>Example: <pre><code>history = get_version_history()\nfor release in history:\n    print(f\"Version {release['version']}: {release['name']}\")\n</code></pre></p>"},{"location":"autodoc_src_backend_version_py_2025-06-01T06-14-53/#get_latest_features","title":"<code>get_latest_features()</code>","text":"<p>Extracts and returns the feature list from the most recent release.</p> <p>Returns: - <code>list[str]</code>: List of features from the latest release, or empty list if no history exists</p> <p>Example: <pre><code>features = get_latest_features()\nfor feature in features:\n    print(f\"- {feature}\")\n</code></pre></p>"},{"location":"autodoc_src_backend_version_py_2025-06-01T06-14-53/#get_latest_changes","title":"<code>get_latest_changes()</code>","text":"<p>Extracts and returns the technical changes from the most recent release.</p> <p>Returns: - <code>list[str]</code>: List of technical changes from the latest release, or empty list if no history/changes exist</p> <p>Example: <pre><code>changes = get_latest_changes()\nfor change in changes:\n    print(f\"- {change}\")\n</code></pre></p>"},{"location":"autodoc_src_backend_version_py_2025-06-01T06-14-53/#release-history-summary","title":"Release History Summary","text":""},{"location":"autodoc_src_backend_version_py_2025-06-01T06-14-53/#version-0920-document-processing-rule-engine-2025-05-30","title":"Version 0.92.0 - Document Processing Rule Engine (2025-05-30)","text":"<ul> <li>Focus: Comprehensive rule-based document automation system</li> <li>Key Features: Visual Rule Builder, Smart Automation, Real-time Processing Monitor</li> <li>Technical Changes: Added processing_rules table, implemented RuleEvaluator and RuleActionExecutor</li> </ul>"},{"location":"autodoc_src_backend_version_py_2025-06-01T06-14-53/#version-0910-vendor-analytics-feature-2025-05-27","title":"Version 0.91.0 - Vendor Analytics Feature (2025-05-27)","text":"<ul> <li>Focus: Advanced vendor analytics and missing invoice detection</li> <li>Key Features: Dynamic Vendor Insights, AI-powered Missing Invoice Detection</li> </ul>"},{"location":"autodoc_src_backend_version_py_2025-06-01T06-14-53/#version-0900-llm-integration-multi-provider-support-2025-05-25","title":"Version 0.90.0 - LLM Integration &amp; Multi-Provider Support (2025-05-25)","text":"<ul> <li>Focus: Comprehensive AI integration with multiple providers</li> <li>Key Features: Multi-Provider AI Support, Privacy-first local processing</li> </ul>"},{"location":"autodoc_src_backend_version_py_2025-06-01T06-14-53/#version-0890-multi-tenant-system-2025-05-22","title":"Version 0.89.0 - Multi-Tenant System (2025-05-22)","text":"<ul> <li>Focus: Complete tenant management and document assignment</li> <li>Key Features: Complete Tenant Management, AI Tenant Extraction</li> </ul>"},{"location":"autodoc_src_backend_version_py_2025-06-01T06-14-53/#usage-notes","title":"Usage Notes","text":"<ul> <li>All functions are safe to call and handle edge cases (empty history, missing fields)</li> <li>Version history is maintained in reverse chronological order (newest first)</li> <li>The module follows semantic versioning principles</li> <li>Release dates use ISO 8601 date format (YYYY-MM-DD)</li> </ul>"},{"location":"autodoc_src_backend_version_py_2025-06-01T06-14-53/#integration","title":"Integration","text":"<p>This module is typically imported and used throughout the application for: - Displaying version information in UI components - API endpoints that return application metadata - Logging and debugging with version context - Feature availability checks based on version history</p>"},{"location":"autodoc_tools_autodoc_py_2025-05-31T16-14-27/","title":"autodoc tools autodoc py 2025 05 31T16 14 27","text":""},{"location":"autodoc_tools_autodoc_py_2025-05-31T16-14-27/#python-documentation-generator","title":"Python Documentation Generator","text":"<p>A Python script that automatically generates professional documentation for Python codebases using Anthropic's Claude AI API.</p>"},{"location":"autodoc_tools_autodoc_py_2025-05-31T16-14-27/#overview","title":"Overview","text":"<p>This tool scans a directory for Python files, generates comprehensive documentation using Claude AI, and creates a documentation website ready for deployment on GitHub Pages.</p>"},{"location":"autodoc_tools_autodoc_py_2025-05-31T16-14-27/#features","title":"Features","text":"<ul> <li>Recursive Python file discovery - Automatically finds all <code>.py</code> files in the target directory</li> <li>AI-powered documentation - Uses Claude AI to generate professional, clear documentation</li> <li>GitHub Pages ready - Creates HTML index and proper configuration for web deployment</li> <li>Batch processing - Documents multiple files in a single run</li> <li>Timestamped outputs - Each documentation file includes generation metadata</li> </ul>"},{"location":"autodoc_tools_autodoc_py_2025-05-31T16-14-27/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.6+</li> <li>Anthropic API key</li> <li>Required packages: <code>anthropic</code>, <code>python-dotenv</code></li> </ul>"},{"location":"autodoc_tools_autodoc_py_2025-05-31T16-14-27/#installation","title":"Installation","text":"<ol> <li> <p>Install required dependencies: <pre><code>pip install anthropic python-dotenv\n</code></pre></p> </li> <li> <p>Create a <code>.env</code> file with your Anthropic API credentials: <pre><code>ANTHROPIC_API_KEY=your_api_key_here\nANTHROPIC_MODEL=claude-sonnet-4-20250514\n</code></pre></p> </li> </ol>"},{"location":"autodoc_tools_autodoc_py_2025-05-31T16-14-27/#usage","title":"Usage","text":""},{"location":"autodoc_tools_autodoc_py_2025-05-31T16-14-27/#basic-usage","title":"Basic Usage","text":"<p><pre><code>python doc_generator.py\n</code></pre> Documents all Python files in the current directory.</p>"},{"location":"autodoc_tools_autodoc_py_2025-05-31T16-14-27/#specify-target-directory","title":"Specify Target Directory","text":"<p><pre><code>python doc_generator.py /path/to/your/project\n</code></pre> Documents all Python files in the specified directory.</p>"},{"location":"autodoc_tools_autodoc_py_2025-05-31T16-14-27/#configuration","title":"Configuration","text":""},{"location":"autodoc_tools_autodoc_py_2025-05-31T16-14-27/#environment-variables","title":"Environment Variables","text":"Variable Description Default <code>ANTHROPIC_API_KEY</code> Your Anthropic API key Required <code>ANTHROPIC_MODEL</code> Claude model to use <code>claude-sonnet-4-20250514</code>"},{"location":"autodoc_tools_autodoc_py_2025-05-31T16-14-27/#file-filtering","title":"File Filtering","text":"<p>The script automatically excludes: - Test files (starting with <code>test_</code>) - <code>__init__.py</code> files - Non-Python files</p>"},{"location":"autodoc_tools_autodoc_py_2025-05-31T16-14-27/#output-structure","title":"Output Structure","text":"<pre><code>docs/\n\u251c\u2500\u2500 .nojekyll              # GitHub Pages configuration\n\u251c\u2500\u2500 index.html             # Web interface landing page\n\u251c\u2500\u2500 index.md               # Documentation index\n\u2514\u2500\u2500 autodoc_*.md           # Generated documentation files\n</code></pre>"},{"location":"autodoc_tools_autodoc_py_2025-05-31T16-14-27/#generated-files","title":"Generated Files","text":"<ul> <li><code>.nojekyll</code> - Ensures GitHub Pages processes the site correctly</li> <li><code>index.html</code> - Simple web interface for browsing documentation</li> <li><code>index.md</code> - Markdown index linking to all documentation files</li> <li><code>autodoc_[filename]_[timestamp].md</code> - Individual documentation files</li> </ul>"},{"location":"autodoc_tools_autodoc_py_2025-05-31T16-14-27/#documentation-format","title":"Documentation Format","text":"<p>Each generated documentation file includes:</p> <ol> <li>Header comment with metadata:</li> <li>Generation timestamp</li> <li>Source file path</li> <li> <p>Generator information</p> </li> <li> <p>Professional documentation containing:</p> </li> <li>Code overview and purpose</li> <li>Function/class descriptions</li> <li>Usage examples</li> <li>Parameter documentation</li> <li>Return value descriptions</li> </ol>"},{"location":"autodoc_tools_autodoc_py_2025-05-31T16-14-27/#error-handling","title":"Error Handling","text":"<p>The script includes robust error handling: - Continues processing other files if one fails - Provides clear error messages with file paths - Exits gracefully if no Python files are found</p>"},{"location":"autodoc_tools_autodoc_py_2025-05-31T16-14-27/#github-pages-deployment","title":"GitHub Pages Deployment","text":"<p>The generated <code>docs/</code> directory is ready for GitHub Pages deployment:</p> <ol> <li>Push the <code>docs/</code> directory to your repository</li> <li>Enable GitHub Pages in repository settings</li> <li>Set source to the <code>docs/</code> folder</li> <li>Access your documentation at <code>https://username.github.io/repository-name/</code></li> </ol>"},{"location":"autodoc_tools_autodoc_py_2025-05-31T16-14-27/#example-output","title":"Example Output","text":"<p>When processing files, you'll see output like: <pre><code>\ud83d\udcc2 Found 5 Python files to document.\n\u2705 Documented: src/main.py \u2192 docs/autodoc_src_main_py_2024-01-15T14-30-25.md\n\u2705 Documented: utils/helpers.py \u2192 docs/autodoc_utils_helpers_py_2024-01-15T14-30-26.md\n\ud83d\udcd8 Index created at: docs/index.md\n</code></pre></p>"},{"location":"autodoc_tools_autodoc_py_2025-05-31T16-14-27/#limitations","title":"Limitations","text":"<ul> <li>Requires valid Anthropic API key and sufficient credits</li> <li>Limited to Python files only</li> <li>Documentation quality depends on source code clarity</li> <li>API rate limits may affect large codebases</li> </ul>"},{"location":"autodoc_tools_autodoc_py_2025-05-31T16-14-27/#contributing","title":"Contributing","text":"<p>To extend this tool: 1. Modify file filtering logic in the <code>os.walk()</code> section 2. Customize the AI prompt for different documentation styles 3. Add support for additional file types 4. Enhance the HTML template for better styling</p>"},{"location":"autodoc_tools_autodoc_py_2025-06-01T06-34-47/","title":"autodoc tools autodoc py 2025 06 01T06 34 47","text":""},{"location":"autodoc_tools_autodoc_py_2025-06-01T06-34-47/#python-documentation-generator","title":"Python Documentation Generator","text":"<p>A command-line tool that automatically generates comprehensive documentation for Python codebases using Anthropic's Claude AI API.</p>"},{"location":"autodoc_tools_autodoc_py_2025-06-01T06-34-47/#overview","title":"Overview","text":"<p>This utility scans Python files in a specified directory (recursively), sends each file's source code to Claude for analysis, and generates professional Markdown documentation. It creates a complete documentation website with an index and individual pages for each Python file.</p>"},{"location":"autodoc_tools_autodoc_py_2025-06-01T06-34-47/#features","title":"Features","text":"<ul> <li>Recursive Python file discovery - Automatically finds all <code>.py</code> files in the target directory and subdirectories</li> <li>AI-powered documentation - Uses Claude to generate high-quality, professional documentation</li> <li>GitHub Pages ready - Creates HTML index and <code>.nojekyll</code> file for seamless GitHub Pages deployment</li> <li>Organized output - Generates timestamped documentation files with a comprehensive index</li> <li>Error handling - Gracefully handles file processing errors and continues with remaining files</li> </ul>"},{"location":"autodoc_tools_autodoc_py_2025-06-01T06-34-47/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.6+</li> <li><code>anthropic</code> package</li> <li><code>python-dotenv</code> package</li> <li>Valid Anthropic API key</li> </ul>"},{"location":"autodoc_tools_autodoc_py_2025-06-01T06-34-47/#installation","title":"Installation","text":"<ol> <li> <p>Install required packages: <pre><code>pip install anthropic python-dotenv\n</code></pre></p> </li> <li> <p>Create a <code>.env</code> file in your project root: <pre><code>ANTHROPIC_API_KEY=your_api_key_here\nANTHROPIC_MODEL=claude-sonnet-4-20250514\n</code></pre></p> </li> </ol>"},{"location":"autodoc_tools_autodoc_py_2025-06-01T06-34-47/#usage","title":"Usage","text":""},{"location":"autodoc_tools_autodoc_py_2025-06-01T06-34-47/#basic-usage","title":"Basic Usage","text":"<p><pre><code>python doc_generator.py\n</code></pre> Generates documentation for Python files in the current directory.</p>"},{"location":"autodoc_tools_autodoc_py_2025-06-01T06-34-47/#specify-target-directory","title":"Specify Target Directory","text":"<p><pre><code>python doc_generator.py /path/to/your/project\n</code></pre> Generates documentation for Python files in the specified directory.</p>"},{"location":"autodoc_tools_autodoc_py_2025-06-01T06-34-47/#configuration","title":"Configuration","text":""},{"location":"autodoc_tools_autodoc_py_2025-06-01T06-34-47/#environment-variables","title":"Environment Variables","text":"Variable Description Default <code>ANTHROPIC_API_KEY</code> Your Anthropic API key Required <code>ANTHROPIC_MODEL</code> Claude model to use <code>claude-sonnet-4-20250514</code>"},{"location":"autodoc_tools_autodoc_py_2025-06-01T06-34-47/#file-filtering","title":"File Filtering","text":"<p>The tool automatically excludes: - Test files (files starting with <code>test_</code>) - <code>__init__.py</code> files - Non-Python files</p>"},{"location":"autodoc_tools_autodoc_py_2025-06-01T06-34-47/#output-structure","title":"Output Structure","text":"<pre><code>docs/\n\u251c\u2500\u2500 .nojekyll                    # GitHub Pages configuration\n\u251c\u2500\u2500 index.html                   # HTML landing page\n\u251c\u2500\u2500 index.md                     # Markdown index with links to all docs\n\u2514\u2500\u2500 autodoc_[filename]_[timestamp].md  # Individual documentation files\n</code></pre>"},{"location":"autodoc_tools_autodoc_py_2025-06-01T06-34-47/#generated-files","title":"Generated Files","text":"<ul> <li><code>.nojekyll</code> - Ensures GitHub Pages processes the site correctly</li> <li><code>index.html</code> - User-friendly landing page with styling</li> <li><code>index.md</code> - Markdown index listing all documented files</li> <li>Individual docs - One file per Python source file with format <code>autodoc_[relativepath]_[timestamp].md</code></li> </ul>"},{"location":"autodoc_tools_autodoc_py_2025-06-01T06-34-47/#example-output","title":"Example Output","text":"<p>Each generated documentation file includes:</p> <pre><code>&lt;!--\nThis documentation was auto-generated by Claude on 2024-01-15T14-30-45.\nSource file: /path/to/source.py\n--&gt;\n\n# Module Documentation\n[Claude-generated content describing the module, classes, functions, etc.]\n</code></pre>"},{"location":"autodoc_tools_autodoc_py_2025-06-01T06-34-47/#error-handling","title":"Error Handling","text":"<ul> <li>No Python files found - Exits gracefully with warning message</li> <li>File processing errors - Logs errors but continues processing remaining files</li> <li>Missing directories - Automatically creates the <code>docs</code> output directory</li> </ul>"},{"location":"autodoc_tools_autodoc_py_2025-06-01T06-34-47/#api-usage","title":"API Usage","text":"<p>The tool uses the Anthropic Messages API with: - Model: Configurable via environment variable - Max tokens: 1500 per request - Prompt: Instructs Claude to act as a technical writer and generate professional Markdown documentation</p>"},{"location":"autodoc_tools_autodoc_py_2025-06-01T06-34-47/#github-pages-deployment","title":"GitHub Pages Deployment","text":"<p>The generated <code>docs</code> folder is ready for GitHub Pages:</p> <ol> <li>Push your code with the generated <code>docs</code> folder</li> <li>In your GitHub repository settings, enable Pages from the <code>docs</code> folder</li> <li>Your documentation will be available at <code>https://yourusername.github.io/yourrepo</code></li> </ol>"},{"location":"autodoc_tools_autodoc_py_2025-06-01T06-34-47/#limitations","title":"Limitations","text":"<ul> <li>Requires internet connection for Claude API calls</li> <li>API rate limits may apply based on your Anthropic plan</li> <li>Large codebases may take considerable time to process</li> <li>Documentation quality depends on code clarity and Claude's analysis</li> </ul>"},{"location":"autodoc_tools_autodoc_py_2025-06-01T06-34-47/#troubleshooting","title":"Troubleshooting","text":"<p>Missing API key: Ensure your <code>.env</code> file contains a valid <code>ANTHROPIC_API_KEY</code></p> <p>No files found: Verify your target directory contains <code>.py</code> files that aren't excluded by the filtering rules</p> <p>API errors: Check your internet connection and API key validity</p>"},{"location":"placeholder/","title":"Placeholder","text":""}]}